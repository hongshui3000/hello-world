<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\osapp_dis_server.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\osapp_dis_server.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Mar 05 14:16:49 2019
<BR><P>
<H3>Maximum Stack Usage =        600 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
FrontAddAdmin &rArr; AdminSaveConfig &rArr; FlashWriteAdminData &rArr; eflash_write &rArr; flash_program &rArr; flash_program_base &rArr; app_qspi_flash_program_wrapper &rArr; app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[b6]">bx_delay_asm</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6]">bx_delay_asm</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BLE_LP_IRQHandler</a> from sys_sleep.o(i.BLE_LP_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[8]">BLE_MAC_IRQHandler</a> from bx_rwble.o(i.BLE_MAC_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[c]">DMAC_IRQHandler</a> from dmac_integration.o(i.DMAC_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[b]">ECC_IRQHandler</a> from hwecc_integration.o(i.ECC_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[a]">EXT_INTR_IRQHandler</a> from io_ctrl.o(i.EXT_INTR_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[3e]">FrontAddAdmin</a> from front.o(i.FrontAddAdmin) referenced from front.o(i.FrontMenuAddUser)
 <LI><a href="#[36]">FrontAddNormalFingerUser</a> from front.o(i.FrontAddNormalFingerUser) referenced from front.o(i.FrontAddNormalUser)
 <LI><a href="#[35]">FrontAddNormalKeyUser</a> from front.o(i.FrontAddNormalKeyUser) referenced from front.o(i.FrontAddNormalUser)
 <LI><a href="#[37]">FrontAddNormalRfidUser</a> from front.o(i.FrontAddNormalRfidUser) referenced from front.o(i.FrontAddNormalUser)
 <LI><a href="#[34]">FrontAddNormalUser</a> from front.o(i.FrontAddNormalUser) referenced from front.o(i.FrontAddNormalFingerUser)
 <LI><a href="#[34]">FrontAddNormalUser</a> from front.o(i.FrontAddNormalUser) referenced from front.o(i.FrontAddNormalKeyUser)
 <LI><a href="#[34]">FrontAddNormalUser</a> from front.o(i.FrontAddNormalUser) referenced from front.o(i.FrontAddNormalRfidUser)
 <LI><a href="#[34]">FrontAddNormalUser</a> from front.o(i.FrontAddNormalUser) referenced from front.o(i.FrontMenuAddUser)
 <LI><a href="#[3a]">FrontAlarm</a> from front.o(i.FrontAlarm) referenced from front.o(i.FrontAwake)
 <LI><a href="#[3a]">FrontAlarm</a> from front.o(i.FrontAlarm) referenced from front.o(i.FrontVerifyAdmin)
 <LI><a href="#[38]">FrontAwake</a> from front.o(i.FrontAwake) referenced from front.o(i.FrontAlarm)
 <LI><a href="#[38]">FrontAwake</a> from front.o(i.FrontAwake) referenced from front.o(i.FrontMenuTop)
 <LI><a href="#[38]">FrontAwake</a> from front.o(i.FrontAwake) referenced from front.o(i.FrontSleep)
 <LI><a href="#[38]">FrontAwake</a> from front.o(i.FrontAwake) referenced from front.o(i.FrontTask)
 <LI><a href="#[38]">FrontAwake</a> from front.o(i.FrontAwake) referenced from front.o(i.FrontVerifyAdmin)
 <LI><a href="#[3f]">FrontDeleteAllUser</a> from front.o(i.FrontDeleteAllUser) referenced from front.o(i.FrontMenuDeleteUser)
 <LI><a href="#[40]">FrontDeleteNormalUser</a> from front.o(i.FrontDeleteNormalUser) referenced from front.o(i.FrontMenuDeleteUser)
 <LI><a href="#[33]">FrontMenuAddUser</a> from front.o(i.FrontMenuAddUser) referenced from front.o(i.FrontAddAdmin)
 <LI><a href="#[33]">FrontMenuAddUser</a> from front.o(i.FrontMenuAddUser) referenced from front.o(i.FrontAddNormalUser)
 <LI><a href="#[33]">FrontMenuAddUser</a> from front.o(i.FrontMenuAddUser) referenced from front.o(i.FrontMenuTop)
 <LI><a href="#[3d]">FrontMenuDeleteUser</a> from front.o(i.FrontMenuDeleteUser) referenced from front.o(i.FrontDeleteAllUser)
 <LI><a href="#[3d]">FrontMenuDeleteUser</a> from front.o(i.FrontMenuDeleteUser) referenced from front.o(i.FrontDeleteNormalUser)
 <LI><a href="#[3d]">FrontMenuDeleteUser</a> from front.o(i.FrontMenuDeleteUser) referenced from front.o(i.FrontMenuTop)
 <LI><a href="#[3c]">FrontMenuTop</a> from front.o(i.FrontMenuTop) referenced from front.o(i.FrontAwake)
 <LI><a href="#[3c]">FrontMenuTop</a> from front.o(i.FrontMenuTop) referenced from front.o(i.FrontMenuAddUser)
 <LI><a href="#[3c]">FrontMenuTop</a> from front.o(i.FrontMenuTop) referenced from front.o(i.FrontMenuDeleteUser)
 <LI><a href="#[3c]">FrontMenuTop</a> from front.o(i.FrontMenuTop) referenced from front.o(i.FrontVerifyAdmin)
 <LI><a href="#[32]">FrontSleep</a> from front.o(i.FrontSleep) referenced from front.o(i.FrontAddAdmin)
 <LI><a href="#[32]">FrontSleep</a> from front.o(i.FrontSleep) referenced from front.o(i.FrontAddNormalKeyUser)
 <LI><a href="#[32]">FrontSleep</a> from front.o(i.FrontSleep) referenced from front.o(i.FrontAddNormalUser)
 <LI><a href="#[32]">FrontSleep</a> from front.o(i.FrontSleep) referenced from front.o(i.FrontAlarm)
 <LI><a href="#[32]">FrontSleep</a> from front.o(i.FrontSleep) referenced from front.o(i.FrontAwake)
 <LI><a href="#[32]">FrontSleep</a> from front.o(i.FrontSleep) referenced from front.o(i.FrontInit)
 <LI><a href="#[32]">FrontSleep</a> from front.o(i.FrontSleep) referenced from front.o(i.FrontMenuAddUser)
 <LI><a href="#[32]">FrontSleep</a> from front.o(i.FrontSleep) referenced from front.o(i.FrontMenuDeleteUser)
 <LI><a href="#[32]">FrontSleep</a> from front.o(i.FrontSleep) referenced from front.o(i.FrontMenuTop)
 <LI><a href="#[32]">FrontSleep</a> from front.o(i.FrontSleep) referenced from front.o(i.FrontTask)
 <LI><a href="#[32]">FrontSleep</a> from front.o(i.FrontSleep) referenced from front.o(i.FrontUnlock)
 <LI><a href="#[32]">FrontSleep</a> from front.o(i.FrontSleep) referenced from front.o(i.FrontVerifyAdmin)
 <LI><a href="#[39]">FrontUnlock</a> from front.o(i.FrontUnlock) referenced from front.o(i.FrontAwake)
 <LI><a href="#[3b]">FrontVerifyAdmin</a> from front.o(i.FrontVerifyAdmin) referenced from front.o(i.FrontAwake)
 <LI><a href="#[3b]">FrontVerifyAdmin</a> from front.o(i.FrontVerifyAdmin) referenced from front.o(i.FrontTask)
 <LI><a href="#[15]">GPIO_IRQHandler</a> from gpio_integration.o(i.GPIO_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from bx_dbg.o(HARDFAULT_CODE) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[13]">IIC0_IRQHandler</a> from iic_integration.o(i.IIC0_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[14]">IIC1_IRQHandler</a> from iic_integration.o(i.IIC1_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[41]">Key_Int_Callback</a> from common_lock_bs81x.o(i.Key_Int_Callback) referenced from common_lock_bs81x.o(i.Init_KeyTouch)
 <LI><a href="#[41]">Key_Int_Callback</a> from common_lock_bs81x.o(i.Key_Int_Callback) referenced from common_lock_bs81x.o(i.Key_Int_Callback)
 <LI><a href="#[1]">NMI_Handler</a> from startup_apollo_00.o(.text.Default_Handler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[18]">PGSPY_IRQHandler</a> from startup_apollo_00.o(.text.Default_Handler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[d]">QSPI_IRQHandler</a> from startup_apollo_00.o(.text.Default_Handler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[9]">RTC_IRQHandler</a> from task_init.o(i.RTC_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_apollo_00.o(.text) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[17]">SFT_IRQHandler</a> from os_bridge.o(i.SFT_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[e]">SPIM0_IRQHandler</a> from spi_integration.o(i.SPIM0_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[f]">SPIM1_IRQHandler</a> from spi_integration.o(i.SPIM1_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[10]">SPIS_IRQHandler</a> from spi_integration.o(i.SPIS_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_apollo_00.o(.text.Default_Handler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[42]">Sensor_Int_Callback</a> from common_lock_sensor3403.o(i.Sensor_Int_Callback) referenced from common_lock_sensor3403.o(i.Init_SensorTouch)
 <LI><a href="#[42]">Sensor_Int_Callback</a> from common_lock_sensor3403.o(i.Sensor_Int_Callback) referenced from common_lock_sensor3403.o(i.Sensor_Int_Callback)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_apollo_00.o(.text.Default_Handler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from arch_init.o(i.SystemInit) referenced from startup_apollo_00.o(.text)
 <LI><a href="#[16]">TIMER_IRQHandler</a> from timer_integration.o(i.TIMER_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[11]">UART0_IRQHandler</a> from uart_integration.o(i.UART0_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[12]">UART1_IRQHandler</a> from uart_integration.o(i.UART1_IRQHandler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[6]">WDT_IRQHandler</a> from startup_apollo_00.o(.text.Default_Handler) referenced from startup_apollo_00.o(RESET)
 <LI><a href="#[4a]">__aeabi_uldivmod</a> from rom_syms_armcc.txt(ABSOLUTE) referenced from jump_table.o(i.func_ref_list)
 <LI><a href="#[31]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_apollo_00.o(.text)
 <LI><a href="#[43]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[50]">add_svc_callback</a> from osapp_uart_server.o(i.add_svc_callback) referenced from osapp_uart_server.o(i.osapp_gapm_cmp_evt_handler)
 <LI><a href="#[a0]">app_dmac_init</a> from app_dmac.o(i.app_dmac_init) referenced from app_dmac_wrapper.o(.data)
 <LI><a href="#[95]">app_gpio_init</a> from app_gpio.o(i.app_gpio_init) referenced from io_ctrl.o(.data)
 <LI><a href="#[a1]">app_hwecc_init</a> from app_hwecc.o(i.app_hwecc_init) referenced from app_hwecc_wrapper.o(.data)
 <LI><a href="#[a2]">app_qspi_init</a> from app_qspi.o(i.app_qspi_init) referenced from app_qspi_wrapper.o(.data)
 <LI><a href="#[5b]">app_task</a> from task_init.o(i.app_task) referenced from task_init.o(i.test_task)
 <LI><a href="#[5c]">app_timer0_interrupt_callback</a> from m_timer.o(i.app_timer0_interrupt_callback) referenced from m_timer.o(i.timerInit)
 <LI><a href="#[a3]">app_timer_init</a> from app_timer.o(i.app_timer_init) referenced from m_timer.o(.data)
 <LI><a href="#[a4]">app_uart_init</a> from app_uart.o(i.app_uart_init) referenced 2 times from m_uart.o(.data)
 <LI><a href="#[4c]">attm_reserve_handle_range</a> from rom_syms_armcc.txt(ABSOLUTE) referenced from jump_table.o(i.func_ref_list)
 <LI><a href="#[6f]">ble_stack_task</a> from ble_task.o(i.ble_stack_task) referenced from task_init.o(.constdata)
 <LI><a href="#[96]">cache_clk_gate</a> from cache_integration.o(i.cache_clk_gate) referenced from cache_integration.o(.data)
 <LI><a href="#[97]">cache_sys_stat</a> from cache_integration.o(i.cache_sys_stat) referenced from cache_integration.o(.data)
 <LI><a href="#[9a]">dmac_clk_gate</a> from dmac_integration.o(i.dmac_clk_gate) referenced from dmac_integration.o(.data)
 <LI><a href="#[98]">dmac_intr_op</a> from dmac_integration.o(i.dmac_intr_op) referenced from dmac_integration.o(.data)
 <LI><a href="#[99]">dmac_sw_rst</a> from dmac_integration.o(i.dmac_sw_rst) referenced from dmac_integration.o(.data)
 <LI><a href="#[9b]">dmac_sys_stat</a> from dmac_integration.o(i.dmac_sys_stat) referenced from dmac_integration.o(.data)
 <LI><a href="#[44]">dummy_func0</a> from m_uart.o(i.dummy_func0) referenced from m_uart.o(i.debugPrint)
 <LI><a href="#[26]">ecc_gen_new_public_key</a> from ecc_p256.o(i.ecc_gen_new_public_key) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[25]">ecc_gen_new_secret_key</a> from ecc_p256.o(i.ecc_gen_new_secret_key) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[24]">ecc_generate_key256</a> from ecc_p256.o(i.ecc_generate_key256) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[71]">ecc_generate_key256_callback</a> from ecc_p256.o(i.ecc_generate_key256_callback) referenced from ecc_p256.o(.constdata)
 <LI><a href="#[48]">flash_dual_io_read</a> from flash.o(i.flash_dual_io_read) referenced from flash.o(i.flash_read_func_ptr_get)
 <LI><a href="#[46]">flash_dual_output_read</a> from flash.o(i.flash_dual_output_read) referenced from flash.o(i.flash_read_func_ptr_get)
 <LI><a href="#[4f]">flash_erase_wrapper</a> from nvds_in_ram.o(i.flash_erase_wrapper) referenced from nvds_in_ram.o(i.nvds_init)
 <LI><a href="#[4e]">flash_program</a> from flash.o(i.flash_program) referenced from nvds_in_ram.o(i.nvds_init)
 <LI><a href="#[49]">flash_quad_io_read</a> from flash.o(i.flash_quad_io_read) referenced from flash.o(i.flash_read_func_ptr_get)
 <LI><a href="#[47]">flash_quad_output_read</a> from flash.o(i.flash_quad_output_read) referenced from flash.o(i.flash_read_func_ptr_get)
 <LI><a href="#[45]">flash_read</a> from flash.o(i.flash_read) referenced from flash.o(i.flash_read_func_ptr_get)
 <LI><a href="#[2e]">func_ref_list</a> from jump_table.o(i.func_ref_list) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[74]">gpio_clk_gate</a> from gpio_integration.o(i.gpio_clk_gate) referenced from gpio_integration.o(.constdata)
 <LI><a href="#[72]">gpio_intr_op</a> from gpio_integration.o(i.gpio_intr_op) referenced from gpio_integration.o(.constdata)
 <LI><a href="#[73]">gpio_sw_rst</a> from gpio_integration.o(i.gpio_sw_rst) referenced from gpio_integration.o(.constdata)
 <LI><a href="#[75]">gpio_sys_stat</a> from gpio_integration.o(i.gpio_sys_stat) referenced from gpio_integration.o(.constdata)
 <LI><a href="#[9e]">hwecc_clk_gate</a> from hwecc_integration.o(i.hwecc_clk_gate) referenced from hwecc_integration.o(.data)
 <LI><a href="#[9c]">hwecc_intr_op</a> from hwecc_integration.o(i.hwecc_intr_op) referenced from hwecc_integration.o(.data)
 <LI><a href="#[9d]">hwecc_sw_rst</a> from hwecc_integration.o(i.hwecc_sw_rst) referenced from hwecc_integration.o(.data)
 <LI><a href="#[9f]">hwecc_sys_stat</a> from hwecc_integration.o(i.hwecc_sys_stat) referenced from hwecc_integration.o(.data)
 <LI><a href="#[79]">iic_clk_gate</a> from iic_integration.o(i.iic_clk_gate) referenced from iic_integration.o(.constdata)
 <LI><a href="#[78]">iic_clk_src_cfg</a> from iic_integration.o(i.iic_clk_src_cfg) referenced from iic_integration.o(.constdata)
 <LI><a href="#[76]">iic_intr_op</a> from iic_integration.o(i.iic_intr_op) referenced from iic_integration.o(.constdata)
 <LI><a href="#[7a]">iic_pin_cfg</a> from iic_integration.o(i.iic_pin_cfg) referenced from iic_integration.o(.constdata)
 <LI><a href="#[77]">iic_sw_rst</a> from iic_integration.o(i.iic_sw_rst) referenced from iic_integration.o(.constdata)
 <LI><a href="#[7b]">iic_sys_stat</a> from iic_integration.o(i.iic_sys_stat) referenced from iic_integration.o(.constdata)
 <LI><a href="#[2c]">lld_sleep_init</a> from bx_lld_sleep.o(i.lld_sleep_init) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[5a]">llm_end_evt_defer_patch</a> from llm_end_evt_defer_patch.o(i.llm_end_evt_defer_patch) referenced from llm_end_evt_defer_patch.o(i.set_llm_end_evt_defer_patch)
 <LI><a href="#[2f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1c]">nvds_del</a> from nvds_in_ram.o(i.nvds_del) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[1b]">nvds_get</a> from nvds_in_ram.o(i.nvds_get) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[1a]">nvds_init</a> from nvds_in_ram.o(i.nvds_init) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[1d]">nvds_put</a> from nvds_in_ram.o(i.nvds_put) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[64]">osapp_add_svc_rsp_helper_handler</a> from osapp_utils.o(i.osapp_add_svc_rsp_helper_handler) referenced from osapp_uart_server.o(.constdata)
 <LI><a href="#[60]">osapp_default_msg_handler</a> from osapp_uart_server.o(i.osapp_default_msg_handler) referenced from osapp_uart_server.o(.constdata)
 <LI><a href="#[61]">osapp_device_ready_ind_handler</a> from osapp_uart_server.o(i.osapp_device_ready_ind_handler) referenced from osapp_uart_server.o(.constdata)
 <LI><a href="#[65]">osapp_gapc_conn_req_ind_handler</a> from osapp_uart_server.o(i.osapp_gapc_conn_req_ind_handler) referenced from osapp_uart_server.o(.constdata)
 <LI><a href="#[66]">osapp_gapc_disconnect_ind_handler</a> from osapp_uart_server.o(i.osapp_gapc_disconnect_ind_handler) referenced from osapp_uart_server.o(.constdata)
 <LI><a href="#[69]">osapp_gapc_get_dev_info_req_ind_handler</a> from osapp_uart_server.o(i.osapp_gapc_get_dev_info_req_ind_handler) referenced from osapp_uart_server.o(.constdata)
 <LI><a href="#[63]">osapp_gapc_param_update_req_handler</a> from osapp_uart_server.o(i.osapp_gapc_param_update_req_handler) referenced from osapp_uart_server.o(.constdata)
 <LI><a href="#[62]">osapp_gapm_cmp_evt_handler</a> from osapp_uart_server.o(i.osapp_gapm_cmp_evt_handler) referenced from osapp_uart_server.o(.constdata)
 <LI><a href="#[68]">osapp_gattc_cmp_evt_handler</a> from osapp_uart_server.o(i.osapp_gattc_cmp_evt_handler) referenced from osapp_uart_server.o(.constdata)
 <LI><a href="#[6a]">osapp_read_req_ind_helper_handler</a> from osapp_utils.o(i.osapp_read_req_ind_helper_handler) referenced from osapp_uart_server.o(.constdata)
 <LI><a href="#[70]">osapp_task</a> from osapp_task.o(i.osapp_task) referenced from task_init.o(.constdata)
 <LI><a href="#[67]">osapp_write_req_ind_helper_handler</a> from osapp_utils.o(i.osapp_write_req_ind_helper_handler) referenced from osapp_uart_server.o(.constdata)
 <LI><a href="#[19]">platform_reset</a> from arch_init.o(i.platform_reset) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[21]">prf_add_profile</a> from prf.o(i.prf_add_profile) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[1f]">prf_cleanup</a> from prf.o(i.prf_cleanup) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[20]">prf_create</a> from prf.o(i.prf_create) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[22]">prf_get_id_from_task</a> from prf.o(i.prf_get_id_from_task) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[23]">prf_get_task_from_id</a> from prf.o(i.prf_get_task_from_id) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[1e]">prf_init</a> from prf.o(i.prf_init) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[5e]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[51]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[5f]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[7d]">qspi_clk_gate</a> from qspi_integration.o(i.qspi_clk_gate) referenced from qspi_integration.o(.constdata)
 <LI><a href="#[7e]">qspi_pin_cfg</a> from qspi_integration.o(i.qspi_pin_cfg) referenced from qspi_integration.o(.constdata)
 <LI><a href="#[7c]">qspi_sw_rst</a> from qspi_integration.o(i.qspi_sw_rst) referenced from qspi_integration.o(.constdata)
 <LI><a href="#[7f]">qspi_sys_stat</a> from qspi_integration.o(i.qspi_sys_stat) referenced from qspi_integration.o(.constdata)
 <LI><a href="#[57]">rf_force_agc_enable</a> from rf_apollo.o(i.rf_force_agc_enable) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[52]">rf_reg_rd</a> from rf_apollo.o(i.rf_reg_rd) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[53]">rf_reg_wr</a> from rf_apollo.o(i.rf_reg_wr) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[56]">rf_reset</a> from rf_apollo.o(i.rf_reset) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[58]">rf_rssi_convert</a> from rf_apollo.o(i.rf_rssi_convert) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[55]">rf_sleep</a> from rf_apollo.o(i.rf_sleep) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[54]">rf_txpwr_dbm_get</a> from rf_apollo.o(i.rf_txpwr_dbm_get) referenced from rf_apollo.o(i.rf_init)
 <LI><a href="#[2d]">rwip_assert_asm</a> from bx_dbg_asm.o(RWIP_ASSERT_ASM) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[2a]">rwip_prevent_sleep_clear</a> from rwip.o(i.rwip_prevent_sleep_clear) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[29]">rwip_prevent_sleep_set</a> from rwip.o(i.rwip_prevent_sleep_set) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[2b]">rwip_reset</a> from rwip.o(i.rwip_reset) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[27]">rwip_wakeup</a> from rwip.o(i.rwip_wakeup) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[28]">rwip_wakeup_end</a> from rwip.o(i.rwip_wakeup_end) referenced from jump_table.o(jump_table_area)
 <LI><a href="#[82]">spi_clk_gate</a> from spi_integration.o(i.spi_clk_gate) referenced from spi_integration.o(.constdata)
 <LI><a href="#[80]">spi_intr_op</a> from spi_integration.o(i.spi_intr_op) referenced from spi_integration.o(.constdata)
 <LI><a href="#[83]">spi_pin_cfg</a> from spi_integration.o(i.spi_pin_cfg) referenced from spi_integration.o(.constdata)
 <LI><a href="#[81]">spi_sw_rst</a> from spi_integration.o(i.spi_sw_rst) referenced from spi_integration.o(.constdata)
 <LI><a href="#[84]">spi_sys_stat</a> from spi_integration.o(i.spi_sys_stat) referenced from spi_integration.o(.constdata)
 <LI><a href="#[4b]">strcpy</a> from rom_syms_armcc.txt(ABSOLUTE) referenced from jump_table.o(i.func_ref_list)
 <LI><a href="#[59]">test_task</a> from task_init.o(i.test_task) referenced from task_init.o(i.rtos_task_init)
 <LI><a href="#[88]">timer_clk_gate</a> from timer_integration.o(i.timer_clk_gate) referenced from timer_integration.o(.constdata)
 <LI><a href="#[87]">timer_clk_src_cfg</a> from timer_integration.o(i.timer_clk_src_cfg) referenced from timer_integration.o(.constdata)
 <LI><a href="#[85]">timer_intr_op</a> from timer_integration.o(i.timer_intr_op) referenced from timer_integration.o(.constdata)
 <LI><a href="#[89]">timer_pin_cfg</a> from timer_integration.o(i.timer_pin_cfg) referenced from timer_integration.o(.constdata)
 <LI><a href="#[86]">timer_sw_rst</a> from timer_integration.o(i.timer_sw_rst) referenced from timer_integration.o(.constdata)
 <LI><a href="#[8a]">timer_sys_stat</a> from timer_integration.o(i.timer_sys_stat) referenced from timer_integration.o(.constdata)
 <LI><a href="#[4d]">uart00_rx_callback</a> from m_uart.o(i.uart00_rx_callback) referenced from m_uart.o(i.init_uart0)
 <LI><a href="#[4d]">uart00_rx_callback</a> from m_uart.o(i.uart00_rx_callback) referenced from m_uart.o(i.uart00_rx_callback)
 <LI><a href="#[5d]">uart1_rx_callback</a> from m_uart.o(i.uart1_rx_callback) referenced from m_uart.o(i.uart1_rx_callback)
 <LI><a href="#[5d]">uart1_rx_callback</a> from m_uart.o(i.uart1_rx_callback) referenced from m_uart.o(i.uartInit)
 <LI><a href="#[8e]">uart_clk_gate</a> from uart_integration.o(i.uart_clk_gate) referenced from uart_integration.o(.constdata)
 <LI><a href="#[8d]">uart_clk_src_cfg</a> from uart_integration.o(i.uart_clk_src_cfg) referenced from uart_integration.o(.constdata)
 <LI><a href="#[8b]">uart_intr_op</a> from uart_integration.o(i.uart_intr_op) referenced from uart_integration.o(.constdata)
 <LI><a href="#[8f]">uart_pin_cfg</a> from uart_integration.o(i.uart_pin_cfg) referenced from uart_integration.o(.constdata)
 <LI><a href="#[91]">uart_read_dma_callback</a> from app_uart.o(i.uart_read_dma_callback) referenced from app_uart.o(.constdata)
 <LI><a href="#[93]">uart_server_read_req_ind</a> from osapp_uart_server.o(i.uart_server_read_req_ind) referenced from osapp_uart_server.o(.data)
 <LI><a href="#[94]">uart_server_write_req_ind</a> from osapp_uart_server.o(i.uart_server_write_req_ind) referenced from osapp_uart_server.o(.data)
 <LI><a href="#[8c]">uart_sw_rst</a> from uart_integration.o(i.uart_sw_rst) referenced from uart_integration.o(.constdata)
 <LI><a href="#[90]">uart_sys_stat</a> from uart_integration.o(i.uart_sys_stat) referenced from uart_integration.o(.constdata)
 <LI><a href="#[92]">uart_write_dma_callback</a> from app_uart.o(i.uart_write_dma_callback) referenced from app_uart.o(.constdata)
 <LI><a href="#[6e]">virtual_port_flow_off</a> from os_bridge.o(i.virtual_port_flow_off) referenced from os_bridge.o(.constdata)
 <LI><a href="#[6d]">virtual_port_flow_on</a> from os_bridge.o(i.virtual_port_flow_on) referenced from os_bridge.o(.constdata)
 <LI><a href="#[6b]">virtual_port_read</a> from os_bridge.o(i.virtual_port_read) referenced from os_bridge.o(.constdata)
 <LI><a href="#[6c]">virtual_port_write</a> from os_bridge.o(i.virtual_port_write) referenced from os_bridge.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[110]"></a>__aeabi_uidivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_compensate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortOSTick_IRQ
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_search
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get_available_idx
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calib_end
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelayMs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_idivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(i.func_ref_list)
</UL>
<P><STRONG><a name="[18c]"></a>rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_secret_key
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_pack
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_rx_callback
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_get_dev_info_req_ind_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_svc_req
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_enqueue
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_isr
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_start
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read_dma
</UL>

<P><STRONG><a name="[1fe]"></a>__aeabi_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_bs81x
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontVerifyAdmin
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteAllUser
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAwake
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalUser
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalRfidUser
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalKeyUser
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalFingerUser
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddAdmin
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart0
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_conn_req_ind_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c3]"></a>memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_data_ver_get
</UL>

<P><STRONG><a name="[4b]"></a>strcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(i.func_ref_list)
</UL>
<P><STRONG><a name="[aa]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[145]"></a>__ARM_common_switch8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_func_ptr_get
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_init_wrapper
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_int_idx_get
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali_value_save
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_pin_cfg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sys_stat
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sys_stat
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_cfg
</UL>

<P><STRONG><a name="[22e]"></a>ahi_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[4c]"></a>attm_reserve_handle_range</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(i.func_ref_list)
</UL>
<P><STRONG><a name="[1d4]"></a>co_list_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_add_svc_req_helper
</UL>

<P><STRONG><a name="[1d5]"></a>co_list_push_back</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_add_svc_req_helper
</UL>

<P><STRONG><a name="[231]"></a>ea_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[23a]"></a>ea_timer_target_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[22c]"></a>h4tl_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[22d]"></a>hci_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[233]"></a>hci_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[1bb]"></a>hci_send_2_host</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_chk_tst_mode_patch
</UL>

<P><STRONG><a name="[162]"></a>ke_event_get_all</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_schedule
</UL>

<P><STRONG><a name="[235]"></a>ke_event_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule
</UL>

<P><STRONG><a name="[23c]"></a>ke_event_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>

<P><STRONG><a name="[232]"></a>ke_flush</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[229]"></a>ke_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[22a]"></a>ke_mem_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[18e]"></a>ke_msg_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_chk_tst_mode_patch
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
</UL>

<P><STRONG><a name="[18f]"></a>ke_msg_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256_callback
</UL>

<P><STRONG><a name="[1bc]"></a>ke_msg_send_basic</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_chk_tst_mode_patch
</UL>

<P><STRONG><a name="[237]"></a>ke_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_prepare_and_check
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[1ed]"></a>ke_task_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
</UL>

<P><STRONG><a name="[1ec]"></a>ke_task_msg_flush</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
</UL>

<P><STRONG><a name="[239]"></a>ke_timer_target_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[22f]"></a>rwble_hl_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[230]"></a>rwble_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[c0]"></a>rwble_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_MAC_IRQHandler
</UL>

<P><STRONG><a name="[234]"></a>rwble_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[238]"></a>rwble_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_syms_armcc.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(.text)
</UL>
<P><STRONG><a name="[26d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[a6]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[26e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[26f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[270]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[271]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[272]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[264]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[265]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[267]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_apollo_00.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_reg
</UL>

<P><STRONG><a name="[273]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a7]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[276]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[277]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ac]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo_00.o(.text.Default_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PGSPY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo_00.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo_00.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo_00.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo_00.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo_00.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>bx_delay_asm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bx_dbg_asm.o(BX_DELAY_ASM))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_32k_clk_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X_AddrRead
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Stop_BS81X
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Start_BS81X
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Read_Data_BS81X
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Update_LED
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Byte
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Stop_Condition
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Start_Condition
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Speaker_Send_Byte
</UL>

<P><STRONG><a name="[b7]"></a>hardfault_print</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, bx_dbg.o(HARDFAULT_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = hardfault_print &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bx_dbg.o(HARDFAULT_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HardFault_Handler &rArr; hardfault_print &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_env_save
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>hardfault_env_save</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bx_dbg_asm.o(HARDFAULT_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[2d]"></a>rwip_assert_asm</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, bx_dbg_asm.o(RWIP_ASSERT_ASM))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_c
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_lpcycles_2_us
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_compensate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_radiocntl1_pack
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_eif_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[bb]"></a>AdminSaveConfig</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, user.o(i.AdminSaveConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = AdminSaveConfig &rArr; FlashWriteAdminData &rArr; eflash_write &rArr; flash_program &rArr; flash_program_base &rArr; app_qspi_flash_program_wrapper &rArr; app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_page_erase
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteAdminData
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddAdmin
</UL>

<P><STRONG><a name="[7]"></a>BLE_LP_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_sleep.o(i.BLE_LP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BLE_LP_IRQHandler &rArr; ble_lp_isr_mp &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_isr_mp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BLE_MAC_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bx_rwble.o(i.BLE_MAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BLE_MAC_IRQHandler &rArr; msg2blestack_from_ISR &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg2blestack_from_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>ChangeNumtoString</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, front.o(i.ChangeNumtoString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChangeNumtoString
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFindKeyUser
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFindAdmin
</UL>

<P><STRONG><a name="[fb]"></a>ChanneltoData</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, common_lock_bs81x.o(i.ChanneltoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChanneltoData
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Int_Callback
</UL>

<P><STRONG><a name="[c2]"></a>CheckKey</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, front.o(i.CheckKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckKey
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFindKeyUser
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFindAdmin
</UL>

<P><STRONG><a name="[cb]"></a>Com_Lock_IIC_Start_Condition</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, common_lock_led.o(i.Com_Lock_IIC_Start_Condition))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Com_Lock_IIC_Start_Condition &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Update_LED
</UL>

<P><STRONG><a name="[cd]"></a>Com_Lock_IIC_Stop_Condition</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, common_lock_led.o(i.Com_Lock_IIC_Stop_Condition))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Com_Lock_IIC_Stop_Condition &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Update_LED
</UL>

<P><STRONG><a name="[ce]"></a>Com_Lock_IIC_Write_Byte</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, common_lock_led.o(i.Com_Lock_IIC_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Com_Lock_IIC_Write_Byte &rArr; io_cfg_output &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Update_LED
</UL>

<P><STRONG><a name="[d1]"></a>Com_Lock_Init_LED</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, common_lock_led.o(i.Com_Lock_Init_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Com_Lock_Init_LED &rArr; Com_Lock_Update_LED &rArr; Com_Lock_IIC_Write_Byte &rArr; io_cfg_output &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Update_LED
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[d4]"></a>Com_Lock_Init_Mfrc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, common_lock_mfrc.o(i.Com_Lock_Init_Mfrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Com_Lock_Init_Mfrc &rArr; io_cfg_output &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[d5]"></a>Com_Lock_Init_Sensor</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, common_lock_sensor3403.o(i.Com_Lock_Init_Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Com_Lock_Init_Sensor &rArr; Init_SensorTouch &rArr; io_ext_int_en &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SensorTouch
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[d7]"></a>Com_Lock_Init_Speaker</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, common_lock_speaker.o(i.Com_Lock_Init_Speaker))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Com_Lock_Init_Speaker &rArr; Com_Lock_Speaker_Send_Byte &rArr; io_cfg_output &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Speaker_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[d9]"></a>Com_Lock_Init_bs81x</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, common_lock_bs81x.o(i.Com_Lock_Init_bs81x))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Com_Lock_Init_bs81x &rArr; Init_KeyTouch &rArr; io_ext_int_en &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_KeyTouch
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X_AddrRead
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Stop_BS81X
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Start_BS81X
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Read_Data_BS81X
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[d8]"></a>Com_Lock_Speaker_Send_Byte</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, common_lock_speaker.o(i.Com_Lock_Speaker_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Com_Lock_Speaker_Send_Byte &rArr; io_cfg_output &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_Speaker
</UL>

<P><STRONG><a name="[d2]"></a>Com_Lock_Update_LED</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, common_lock_led.o(i.Com_Lock_Update_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Com_Lock_Update_LED &rArr; Com_Lock_IIC_Write_Byte &rArr; io_cfg_output &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Byte
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Stop_Condition
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Start_Condition
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_LED
</UL>

<P><STRONG><a name="[c]"></a>DMAC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dmac_integration.o(i.DMAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = DMAC_IRQHandler &rArr; app_dmac_isr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>ECC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hwecc_integration.o(i.ECC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ECC_IRQHandler &rArr; app_hwecc_isr &rArr; hwecc_calculate_start &rArr; mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXT_INTR_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, io_ctrl.o(i.EXT_INTR_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXT_INTR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>FlashReadAdminData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, user.o(i.FlashReadAdminData))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = FlashReadAdminData &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFindAdmin
</UL>

<P><STRONG><a name="[df]"></a>FlashReadRfid</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, user.o(i.FlashReadRfid))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = FlashReadRfid &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFindRfid
</UL>

<P><STRONG><a name="[e0]"></a>FlashReadUserData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, user.o(i.FlashReadUserData))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = FlashReadUserData &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFindKeyUser
</UL>

<P><STRONG><a name="[be]"></a>FlashWriteAdminData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, user.o(i.FlashWriteAdminData))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = FlashWriteAdminData &rArr; eflash_write &rArr; flash_program &rArr; flash_program_base &rArr; app_qspi_flash_program_wrapper &rArr; app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdminSaveConfig
</UL>

<P><STRONG><a name="[e2]"></a>FlashWriteUserData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, user.o(i.FlashWriteUserData))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = FlashWriteUserData &rArr; eflash_write &rArr; flash_program &rArr; flash_program_base &rArr; app_qspi_flash_program_wrapper &rArr; app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserSaveConfig
</UL>

<P><STRONG><a name="[f5]"></a>FrontGetConfigKey</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardware.o(i.FrontGetConfigKey))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontTask
</UL>

<P><STRONG><a name="[e8]"></a>FrontGetFingerTouch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardware.o(i.FrontGetFingerTouch))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontSleep
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAwake
</UL>

<P><STRONG><a name="[e3]"></a>FrontGetKey</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardware.o(i.FrontGetKey))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontVerifyAdmin
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuTop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuDeleteUser
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuAddUser
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteAllUser
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAwake
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlarm
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalUser
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalKeyUser
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddAdmin
</UL>

<P><STRONG><a name="[f2]"></a>FrontGetKeyTouch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardware.o(i.FrontGetKeyTouch))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontSleep
</UL>

<P><STRONG><a name="[e9]"></a>FrontGetRfid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardware.o(i.FrontGetRfid))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAwake
</UL>

<P><STRONG><a name="[f0]"></a>FrontInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, front.o(i.FrontInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = FrontInit &rArr; UserInit &rArr; FlashReadUserData &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInputInit
</UL>

<P><STRONG><a name="[f4]"></a>FrontTask</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, front.o(i.FrontTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FrontTask &rArr; FrontCalcElapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetConfigKey
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
</UL>

<P><STRONG><a name="[15]"></a>GPIO_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_integration.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_IRQHandler &rArr; app_gpio_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>HardwareInputInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardware.o(i.HardwareInputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = HardwareInputInit &rArr; FrontInit &rArr; UserInit &rArr; FlashReadUserData &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontInit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[13]"></a>IIC0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iic_integration.o(i.IIC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = IIC0_IRQHandler &rArr; app_iic_isr &rArr; iic_tx_empty_isr &rArr; iic_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IIC1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iic_integration.o(i.IIC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = IIC1_IRQHandler &rArr; app_iic_isr &rArr; iic_tx_empty_isr &rArr; iic_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>Init_KeyTouch</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, common_lock_bs81x.o(i.Init_KeyTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Init_KeyTouch &rArr; io_ext_int_en &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_en
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_bs81x
</UL>

<P><STRONG><a name="[d6]"></a>Init_SensorTouch</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, common_lock_sensor3403.o(i.Init_SensorTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Init_SensorTouch &rArr; io_ext_int_en &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_en
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_Sensor
</UL>

<P><STRONG><a name="[41]"></a>Key_Int_Callback</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, common_lock_bs81x.o(i.Key_Int_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Key_Int_Callback &rArr; io_ext_int_en &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_en
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_cfg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanneltoData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X_AddrRead
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Stop_BS81X
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Start_BS81X
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Read_Data_BS81X
</UL>
<BR>[Address Reference Count : 2]<UL><LI> common_lock_bs81x.o(i.Init_KeyTouch)
<LI> common_lock_bs81x.o(i.Key_Int_Callback)
</UL>
<P><STRONG><a name="[9]"></a>RTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, task_init.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = RTC_IRQHandler &rArr; vPortOSTick_IRQ &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortOSTick_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
</UL>

<P><STRONG><a name="[ff]"></a>SEGGER_RTT_SetTerminal</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_SetTerminal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_SetTerminal &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
</UL>

<P><STRONG><a name="[103]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[104]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[105]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 382 bytes, Stack size 128 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
</UL>

<P><STRONG><a name="[17]"></a>SFT_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_bridge.o(i.SFT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SFT_IRQHandler &rArr; msg2blestack_from_ISR &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg2blestack_from_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIM0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_integration.o(i.SPIM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SPIM0_IRQHandler &rArr; app_spi_isr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPIM1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_integration.o(i.SPIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SPIM1_IRQHandler &rArr; app_spi_isr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPIS_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_integration.o(i.SPIS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SPIS_IRQHandler &rArr; app_spi_isr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>ScreenClear</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardware.o(i.ScreenClear))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontSleep
</UL>

<P><STRONG><a name="[ed]"></a>ScreenShowLogo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardware.o(i.ScreenShowLogo))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAwake
</UL>

<P><STRONG><a name="[42]"></a>Sensor_Int_Callback</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, common_lock_sensor3403.o(i.Sensor_Int_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Sensor_Int_Callback &rArr; io_ext_int_en &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_en
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_cfg
</UL>
<BR>[Address Reference Count : 2]<UL><LI> common_lock_sensor3403.o(i.Init_SensorTouch)
<LI> common_lock_sensor3403.o(i.Sensor_Int_Callback)
</UL>
<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, arch_init.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_per
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>TIMER_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timer_integration.o(i.TIMER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_integration.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = UART0_IRQHandler &rArr; app_uart_isr &rArr; uart_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_integration.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = UART1_IRQHandler &rArr; app_uart_isr &rArr; uart_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo_00.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>UserDeleteAllAdminUser</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, user.o(i.UserDeleteAllAdminUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = UserDeleteAllAdminUser &rArr; eflash_page_erase &rArr; flash_erase &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteAllUser
</UL>

<P><STRONG><a name="[ee]"></a>UserDeleteAllKeyUser</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, user.o(i.UserDeleteAllKeyUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = UserDeleteAllKeyUser &rArr; eflash_page_erase &rArr; flash_erase &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteNormalUser
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteAllUser
</UL>

<P><STRONG><a name="[eb]"></a>UserFindAdmin</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, user.o(i.UserFindAdmin))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = UserFindAdmin &rArr; FlashReadAdminData &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeNumtoString
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadAdminData
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontVerifyAdmin
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteAllUser
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAwake
</UL>

<P><STRONG><a name="[ec]"></a>UserFindKeyUser</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, user.o(i.UserFindKeyUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = UserFindKeyUser &rArr; FlashReadUserData &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeNumtoString
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadUserData
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAwake
</UL>

<P><STRONG><a name="[ea]"></a>UserFindRfid</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, user.o(i.UserFindRfid))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = UserFindRfid &rArr; FlashReadRfid &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadRfid
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAwake
</UL>

<P><STRONG><a name="[f1]"></a>UserInit</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, user.o(i.UserInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = UserInit &rArr; FlashReadUserData &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadUserData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadRfid
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadAdminData
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontInit
</UL>

<P><STRONG><a name="[e7]"></a>UserSaveConfig</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, user.o(i.UserSaveConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = UserSaveConfig &rArr; FlashWriteUserData &rArr; eflash_write &rArr; flash_program &rArr; flash_program_base &rArr; app_qspi_flash_program_wrapper &rArr; app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_page_erase
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteUserData
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalKeyUser
</UL>

<P><STRONG><a name="[e5]"></a>VoicePlay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardware.o(i.VoicePlay))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontVerifyAdmin
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuTop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuDeleteUser
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuAddUser
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteAllUser
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAwake
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalUser
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalKeyUser
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddAdmin
</UL>

<P><STRONG><a name="[112]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[278]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[279]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[27a]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[17a]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
</UL>

<P><STRONG><a name="[b5]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_assert</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bx_dbg.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueEmptyFromISR
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_cmp_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_prepare_and_check
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_tasks_create
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_msg_2_app
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_adv_int
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_isr_mp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_entrance_exit_addr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_index_build
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_pd_onoff_sw
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g1
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g0
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_cpu_g1
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_llm_end_evt_defer_patch
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_pin_cfg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pin_cfg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_intr_op
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_intr_op
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_intr_op
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_isr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_intr_op
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftsv_calc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_tx_complete
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_rx_complete
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_reg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_calculate
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_get_burst_transaction_size_enum
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_ch_alloc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pin_cfg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_op
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_intr_op
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_cfg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_intr_op
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_base
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_complete
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_complete
</UL>

<P><STRONG><a name="[27b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[27c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[27d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[11d]"></a>adv_data_pack</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, osapp_utils.o(i.adv_data_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adv_data_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_start_advertising
</UL>

<P><STRONG><a name="[11b]"></a>ahi_msg_alloc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, osapp_task.o(i.ahi_msg_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ahi_msg_alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_rx_callback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_server_write_req_ind
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_server_read_req_ind
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_start_advertising
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_cmp_evt_handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_param_update_req_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_get_dev_info_req_ind_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_conn_req_ind_handler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_device_ready_ind_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_svc_req
</UL>

<P><STRONG><a name="[a0]"></a>app_dmac_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, app_dmac.o(i.app_dmac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_dmac_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_init_wrapper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_dmac_wrapper.o(.data)
</UL>
<P><STRONG><a name="[11f]"></a>app_dmac_init_wrapper</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_dmac_wrapper.o(i.app_dmac_init_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_dmac_init_wrapper &rArr; app_dmac_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_init
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[dc]"></a>app_dmac_isr</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_dmac.o(i.app_dmac_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = app_dmac_isr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_tfr_isr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_stat_clean_if_all_transfer_done
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAC_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>app_dmac_start</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, app_dmac.o(i.app_dmac_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_ch_alloc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_block_ts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start_wrapper
</UL>

<P><STRONG><a name="[125]"></a>app_dmac_start_wrapper</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_dmac_wrapper.o(i.app_dmac_start_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_start
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read_dma
</UL>

<P><STRONG><a name="[126]"></a>app_dmac_transfer_wait</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, app_dmac.o(i.app_dmac_transfer_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_dmac_transfer_wait &rArr; dmac_stat_clean_if_all_transfer_done
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_stat_clean_if_all_transfer_done
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_ch_free
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_block_ts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait_wrapper
</UL>

<P><STRONG><a name="[128]"></a>app_dmac_transfer_wait_wrapper</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_dmac_wrapper.o(i.app_dmac_transfer_wait_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_dmac_transfer_wait_wrapper &rArr; app_dmac_transfer_wait &rArr; dmac_stat_clean_if_all_transfer_done
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_start
</UL>

<P><STRONG><a name="[95]"></a>app_gpio_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_gpio.o(i.app_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_gpio_init &rArr; gpio_int_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_int_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_ctrl.o(.data)
</UL>
<P><STRONG><a name="[f6]"></a>app_gpio_isr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_gpio.o(i.app_gpio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gpio_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>app_gpio_port_dir_input_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_dir_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>

<P><STRONG><a name="[1a8]"></a>app_gpio_port_dir_output_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_dir_output_set))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
</UL>

<P><STRONG><a name="[1a9]"></a>app_gpio_port_dir_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_dir_read))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir_read_all
</UL>

<P><STRONG><a name="[1aa]"></a>app_gpio_port_dir_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_dir_write))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir_write_all_noie
</UL>

<P><STRONG><a name="[1ae]"></a>app_gpio_port_in_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_in_read))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
</UL>

<P><STRONG><a name="[1ad]"></a>app_gpio_port_out_clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_out_clr))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
</UL>

<P><STRONG><a name="[1ac]"></a>app_gpio_port_out_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_out_read))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_out_read_all
</UL>

<P><STRONG><a name="[1af]"></a>app_gpio_port_out_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_out_set))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
</UL>

<P><STRONG><a name="[1b1]"></a>app_gpio_port_out_toggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_out_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_toggle
</UL>

<P><STRONG><a name="[1b2]"></a>app_gpio_port_out_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gpio.o(i.app_gpio_port_out_write))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_all
</UL>

<P><STRONG><a name="[12a]"></a>app_hwecc_calculate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, app_hwecc.o(i.app_hwecc_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = app_hwecc_calculate &rArr; hwecc_calculate_start &rArr; mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_ring_queue_full
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_calculate_start
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_calculate_wrapper
</UL>

<P><STRONG><a name="[12e]"></a>app_hwecc_calculate_wrapper</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_hwecc_wrapper.o(i.app_hwecc_calculate_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = app_hwecc_calculate_wrapper &rArr; app_hwecc_calculate &rArr; hwecc_calculate_start &rArr; mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
</UL>

<P><STRONG><a name="[a1]"></a>app_hwecc_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_hwecc.o(i.app_hwecc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_hwecc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_init_wrapper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_hwecc_wrapper.o(.data)
</UL>
<P><STRONG><a name="[12f]"></a>app_hwecc_init_wrapper</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_hwecc_wrapper.o(i.app_hwecc_init_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_hwecc_init_wrapper &rArr; app_hwecc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[dd]"></a>app_hwecc_isr</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_hwecc.o(i.app_hwecc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = app_hwecc_isr &rArr; hwecc_calculate_start &rArr; mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_ring_queue_glance
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_ring_queue_empty
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_dequeue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_calculate_start
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>app_iic_isr</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, app_iic.o(i.app_iic_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = app_iic_isr &rArr; iic_tx_empty_isr &rArr; iic_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_tx_empty_isr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_rx_complete
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_clear_all_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>app_qspi_config_for_cache</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, app_qspi.o(i.app_qspi_config_for_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_qspi_config_for_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_config_for_cache_wrapper
</UL>

<P><STRONG><a name="[136]"></a>app_qspi_config_for_cache_wrapper</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_qspi_wrapper.o(i.app_qspi_config_for_cache_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_qspi_config_for_cache_wrapper &rArr; app_qspi_config_for_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_config_for_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_enable
</UL>

<P><STRONG><a name="[139]"></a>app_qspi_disable_for_cache</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_qspi.o(i.app_qspi_disable_for_cache))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_disable_for_cache_wrapper
</UL>

<P><STRONG><a name="[138]"></a>app_qspi_disable_for_cache_wrapper</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_qspi_wrapper.o(i.app_qspi_disable_for_cache_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_qspi_disable_for_cache_wrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_disable_for_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_disable
</UL>

<P><STRONG><a name="[13b]"></a>app_qspi_dr_reg_addr_for_cache</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_qspi.o(i.app_qspi_dr_reg_addr_for_cache))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_dr_reg_addr_for_cache_wrapper
</UL>

<P><STRONG><a name="[13a]"></a>app_qspi_dr_reg_addr_for_cache_wrapper</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_qspi_wrapper.o(i.app_qspi_dr_reg_addr_for_cache_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_qspi_dr_reg_addr_for_cache_wrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_dr_reg_addr_for_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_config
</UL>

<P><STRONG><a name="[13c]"></a>app_qspi_flash_program</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, app_qspi.o(i.app_qspi_flash_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_get_fifo_depth
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_start
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_config
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program_wrapper
</UL>

<P><STRONG><a name="[140]"></a>app_qspi_flash_program_wrapper</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, app_qspi_wrapper.o(i.app_qspi_flash_program_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = app_qspi_flash_program_wrapper &rArr; app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_qspi_operation_enter
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_base
</UL>

<P><STRONG><a name="[a2]"></a>app_qspi_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, app_qspi.o(i.app_qspi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_qspi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_init_wrapper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_qspi_wrapper.o(.data)
</UL>
<P><STRONG><a name="[144]"></a>app_qspi_init_wrapper</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_qspi_wrapper.o(i.app_qspi_init_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_qspi_init_wrapper &rArr; app_qspi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[146]"></a>app_qspi_multi_read</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, app_qspi.o(i.app_qspi_multi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = app_qspi_multi_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait_wrapper
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_wrapper
</UL>

<P><STRONG><a name="[148]"></a>app_qspi_multi_read_wrapper</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_qspi_wrapper.o(i.app_qspi_multi_read_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = app_qspi_multi_read_wrapper &rArr; app_qspi_multi_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_qspi_operation_enter
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read
</UL>

<P><STRONG><a name="[149]"></a>app_qspi_std_read</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, app_qspi.o(i.app_qspi_std_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait_wrapper
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read_wrapper
</UL>

<P><STRONG><a name="[14a]"></a>app_qspi_std_read_wrapper</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, app_qspi_wrapper.o(i.app_qspi_std_read_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_qspi_operation_enter
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_wait
</UL>

<P><STRONG><a name="[14b]"></a>app_qspi_std_write</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, app_qspi.o(i.app_qspi_std_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_get_fifo_depth
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_start
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_std_byte_write_dma_config
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_wrapper
</UL>

<P><STRONG><a name="[14c]"></a>app_qspi_std_write_wrapper</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_qspi_wrapper.o(i.app_qspi_std_write_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_qspi_operation_enter
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wakeup
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_deep_power_down
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
</UL>

<P><STRONG><a name="[109]"></a>app_spi_isr</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, app_spi.o(i.app_spi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = app_spi_isr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_empty_isr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_full_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIS_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>app_task</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, task_init.o(i.app_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_task &rArr; FrontTask &rArr; FrontCalcElapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.test_task)
</UL>
<P><STRONG><a name="[5c]"></a>app_timer0_interrupt_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_timer.o(i.app_timer0_interrupt_callback))
<BR>[Address Reference Count : 1]<UL><LI> m_timer.o(i.timerInit)
</UL>
<P><STRONG><a name="[a3]"></a>app_timer_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_timer.o(.data)
</UL>
<P><STRONG><a name="[10c]"></a>app_timer_isr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_isr))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>

<P><STRONG><a name="[257]"></a>app_timer_start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[150]"></a>app_uart_flow_off</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_uart.o(i.app_uart_flow_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_uart_flow_off
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[14f]"></a>app_uart_flow_on</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_uart.o(i.app_uart_flow_on))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[a4]"></a>app_uart_init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, app_uart.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_uart_init &rArr; app_uart_flow_off
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisor
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flow_on
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flow_off
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_uart.o(.data)
</UL>
<P><STRONG><a name="[10d]"></a>app_uart_isr</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, app_uart.o(i.app_uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = app_uart_isr &rArr; uart_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_complete
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>app_uart_read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, app_uart.o(i.app_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = app_uart_read &rArr; app_uart_read_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transfer_sanity_check
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_rx_callback
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart00_rx_callback
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart0
</UL>

<P><STRONG><a name="[159]"></a>app_uart_write</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, app_uart.o(i.app_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = app_uart_write &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start_wrapper
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_fifo_depth
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transfer_sanity_check
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
</UL>

<P><STRONG><a name="[17d]"></a>ble_lp_intr_clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_sleep.o(i.ble_lp_intr_clr))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>

<P><STRONG><a name="[15a]"></a>ble_lp_irq_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_sleep.o(i.ble_lp_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_lp_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_blelp_inrp_en_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>

<P><STRONG><a name="[bf]"></a>ble_lp_isr_mp</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sys_sleep.o(i.ble_lp_isr_mp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_lp_isr_mp &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_blelp_inrp_en_setf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_LP_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>ble_msg_2_app</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_task.o(i.ble_msg_2_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ble_msg_2_app &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_write
</UL>

<P><STRONG><a name="[161]"></a>ble_schedule</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sys_sleep.o(i.ble_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ble_schedule &rArr; ble_soft_wakeup &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_get_all
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_soft_wakeup
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_task
</UL>

<P><STRONG><a name="[163]"></a>ble_soft_wakeup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sys_sleep.o(i.ble_soft_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_soft_wakeup &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_schedule
</UL>

<P><STRONG><a name="[6f]"></a>ble_stack_task</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_task.o(i.ble_stack_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ble_stack_task &rArr; rwip_init &rArr; rf_init &rArr; ble_radiocntl1_pack &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_msg_start_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>bxSuppressTicksAndSleep</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, task_init.o(i.bxSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = bxSuppressTicksAndSleep &rArr; pre_deepsleep_processing_mp &rArr; deepsleep_prepare &rArr; flash_deep_power_down &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_prepare_and_check
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_deepsleep_processing_mp
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_rtc_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[131]"></a>bx_dequeue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bx_ring_queue.o(i.bx_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_isr
</UL>

<P><STRONG><a name="[12c]"></a>bx_enqueue</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bx_ring_queue.o(i.bx_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bx_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_enqueue_position
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_enqueue_nocopy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_calculate
</UL>

<P><STRONG><a name="[171]"></a>bx_enqueue_nocopy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bx_ring_queue.o(i.bx_enqueue_nocopy))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_enqueue
</UL>

<P><STRONG><a name="[170]"></a>bx_enqueue_position</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bx_ring_queue.o(i.bx_enqueue_position))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_enqueue
</UL>

<P><STRONG><a name="[132]"></a>bx_ring_queue_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bx_ring_queue.o(i.bx_ring_queue_empty))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_isr
</UL>

<P><STRONG><a name="[12b]"></a>bx_ring_queue_full</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bx_ring_queue.o(i.bx_ring_queue_full))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_calculate
</UL>

<P><STRONG><a name="[130]"></a>bx_ring_queue_glance</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bx_ring_queue.o(i.bx_ring_queue_glance))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_isr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_calculate_start
</UL>

<P><STRONG><a name="[173]"></a>cache_config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arch_init.o(i.cache_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cache_config &rArr; flash_cache_config &rArr; app_qspi_dr_reg_addr_for_cache_wrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_config
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
</UL>

<P><STRONG><a name="[175]"></a>cache_disable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arch_init.o(i.cache_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cache_disable &rArr; flash_cache_disable &rArr; app_qspi_disable_for_cache_wrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_qspi_operation_enter
</UL>

<P><STRONG><a name="[142]"></a>cache_enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arch_init.o(i.cache_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cache_enable &rArr; flash_cache_enable &rArr; app_qspi_config_for_cache_wrapper &rArr; app_qspi_config_for_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_wrapper
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read_wrapper
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_wrapper
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program_wrapper
</UL>

<P><STRONG><a name="[23d]"></a>cal_patch_bl</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, patch.o(i.cal_patch_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_patch_bl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_llm_end_evt_defer_patch
</UL>

<P><STRONG><a name="[15c]"></a>clk_gate_awo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, clk_gate.o(i.clk_gate_awo))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_with_ble_sleep
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_soft_wakeup
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_isr_mp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[1e7]"></a>clk_gate_clr_all_clk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk_gate.o(i.clk_gate_clr_all_clk))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[172]"></a>clk_gate_cpu_g1</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, clk_gate.o(i.clk_gate_cpu_g1))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = clk_gate_cpu_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_clk_gate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_clk_gate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_clk_gate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_clk_gate
</UL>

<P><STRONG><a name="[178]"></a>clk_gate_per_g0</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, clk_gate.o(i.clk_gate_per_g0))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = clk_gate_per_g0 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_clk_src_cfg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_clk_gate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_clk_gate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_clk_gate
</UL>

<P><STRONG><a name="[179]"></a>clk_gate_per_g1</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, clk_gate.o(i.clk_gate_per_g1))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = clk_gate_per_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_clk_src_cfg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clk_gate
</UL>

<P><STRONG><a name="[23f]"></a>cpu_domain_busy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, periph_mngt.o(i.cpu_domain_busy))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_prepare_and_check
</UL>

<P><STRONG><a name="[bd]"></a>debugPrint</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, m_uart.o(i.debugPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = debugPrint &rArr; app_uart_write &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_server_write_req_ind
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontVerifyAdmin
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontUnlock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontSleep
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuTop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuDeleteUser
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuAddUser
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteNormalUser
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteAllUser
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAwake
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlarm
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalUser
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalRfidUser
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalKeyUser
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalFingerUser
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddAdmin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserSaveConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdminSaveConfig
</UL>

<P><STRONG><a name="[158]"></a>dmac_get_burst_transaction_size_enum</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, app_dmac.o(i.dmac_get_burst_transaction_size_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dmac_get_burst_transaction_size_enum &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read_dma
</UL>

<P><STRONG><a name="[120]"></a>dmac_tfr_isr</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_dmac.o(i.dmac_tfr_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dmac_tfr_isr &rArr; dmac_block_ts_config
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_ch_free
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_block_ts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_isr
</UL>

<P><STRONG><a name="[16b]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[26]"></a>ecc_gen_new_public_key</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ecc_p256.o(i.ecc_gen_new_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ecc_gen_new_public_key &rArr; ecc_generate_key256 &rArr; app_hwecc_calculate_wrapper &rArr; app_hwecc_calculate &rArr; hwecc_calculate_start &rArr; mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[25]"></a>ecc_gen_new_secret_key</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ecc_p256.o(i.ecc_gen_new_secret_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecc_gen_new_secret_key
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_write32p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[24]"></a>ecc_generate_key256</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, ecc_p256.o(i.ecc_generate_key256))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ecc_generate_key256 &rArr; app_hwecc_calculate_wrapper &rArr; app_hwecc_calculate &rArr; hwecc_calculate_start &rArr; mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_calculate_wrapper
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_public_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[71]"></a>ecc_generate_key256_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecc_p256.o(i.ecc_generate_key256_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ecc_generate_key256_callback &rArr; msg2blestack_from_ISR &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg2blestack_from_ISR
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecc_p256.o(.constdata)
</UL>
<P><STRONG><a name="[22b]"></a>ecc_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ecc_p256.o(i.ecc_init))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[bc]"></a>eflash_page_erase</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_flash.o(i.eflash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = eflash_page_erase &rArr; flash_erase &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_flush_all
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserSaveConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserDeleteAllKeyUser
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserDeleteAllAdminUser
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdminSaveConfig
</UL>

<P><STRONG><a name="[e1]"></a>eflash_write</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m_flash.o(i.eflash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = eflash_write &rArr; flash_program &rArr; flash_program_base &rArr; app_qspi_flash_program_wrapper &rArr; app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_flush_all
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteUserData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteAdminData
</UL>

<P><STRONG><a name="[17c]"></a>enable_32m_rc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys_sleep.o(i.enable_32m_rc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_32m_rc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_rtc
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[174]"></a>flash_cache_config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, flash_cache.o(i.flash_cache_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_cache_config &rArr; app_qspi_dr_reg_addr_for_cache_wrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_dr_reg_addr_for_cache_wrapper
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_flush_all
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_config
</UL>

<P><STRONG><a name="[176]"></a>flash_cache_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash_cache.o(i.flash_cache_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_cache_disable &rArr; app_qspi_disable_for_cache_wrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_disable_for_cache_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_disable
</UL>

<P><STRONG><a name="[177]"></a>flash_cache_enable</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, flash_cache.o(i.flash_cache_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flash_cache_enable &rArr; app_qspi_config_for_cache_wrapper &rArr; app_qspi_config_for_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_config_for_cache_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
</UL>

<P><STRONG><a name="[191]"></a>flash_cache_flush_all</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, flash_cache.o(i.flash_cache_flush_all))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_page_erase
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_config
</UL>

<P><STRONG><a name="[17e]"></a>flash_deep_power_down</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash.o(i.flash_deep_power_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = flash_deep_power_down &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[48]"></a>flash_dual_io_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flash.o(i.flash_dual_io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = flash_dual_io_read &rArr; flash_multi_read &rArr; app_qspi_multi_read_wrapper &rArr; app_qspi_multi_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(i.flash_read_func_ptr_get)
</UL>
<P><STRONG><a name="[46]"></a>flash_dual_output_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flash.o(i.flash_dual_output_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = flash_dual_output_read &rArr; flash_multi_read &rArr; app_qspi_multi_read_wrapper &rArr; app_qspi_multi_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(i.flash_read_func_ptr_get)
</UL>
<P><STRONG><a name="[190]"></a>flash_erase</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, flash.o(i.flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = flash_erase &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_wrapper
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_page_erase
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_wrapper
</UL>

<P><STRONG><a name="[194]"></a>flash_multi_read</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, flash.o(i.flash_multi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = flash_multi_read &rArr; app_qspi_multi_read_wrapper &rArr; app_qspi_multi_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_quad_output_read
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_quad_io_read
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_dual_output_read
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_dual_io_read
</UL>

<P><STRONG><a name="[4e]"></a>flash_program</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, flash.o(i.flash_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = flash_program &rArr; flash_program_base &rArr; app_qspi_flash_program_wrapper &rArr; app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_base
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvds_in_ram.o(i.nvds_init)
</UL>
<P><STRONG><a name="[49]"></a>flash_quad_io_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flash.o(i.flash_quad_io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = flash_quad_io_read &rArr; flash_multi_read &rArr; app_qspi_multi_read_wrapper &rArr; app_qspi_multi_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(i.flash_read_func_ptr_get)
</UL>
<P><STRONG><a name="[47]"></a>flash_quad_output_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flash.o(i.flash_quad_output_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = flash_quad_output_read &rArr; flash_multi_read &rArr; app_qspi_multi_read_wrapper &rArr; app_qspi_multi_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_multi_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(i.flash_read_func_ptr_get)
</UL>
<P><STRONG><a name="[45]"></a>flash_read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, flash.o(i.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadUserData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadRfid
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadAdminData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(i.flash_read_func_ptr_get)
</UL>
<P><STRONG><a name="[19a]"></a>flash_read_func_ptr_get</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, flash.o(i.flash_read_func_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_read_func_ptr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
</UL>

<P><STRONG><a name="[19b]"></a>flash_recovery</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_sleep_ram.o(i.flash_recovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = flash_recovery &rArr; flash_wakeup &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wakeup
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_disable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_config
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[19c]"></a>flash_wakeup</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash.o(i.flash_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = flash_wakeup &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
</UL>

<P><STRONG><a name="[2e]"></a>func_ref_list</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jump_table.o(i.func_ref_list))
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[192]"></a>get_real_rtc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_sleep_ram.o(i.get_real_rtc))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_32m_rc
</UL>

<P><STRONG><a name="[19e]"></a>hardwareInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sensor_operation_afs121n.o(i.hardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = hardwareInit &rArr; init_uart0 &rArr; app_uart_read &rArr; app_uart_read_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart0
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[12d]"></a>hwecc_calculate_start</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, app_hwecc.o(i.hwecc_calculate_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = hwecc_calculate_start &rArr; mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_ring_queue_glance
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_isr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_calculate
</UL>

<P><STRONG><a name="[19f]"></a>init_uart0</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, m_uart.o(i.init_uart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = init_uart0 &rArr; app_uart_read &rArr; app_uart_read_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardwareInit
</UL>

<P><STRONG><a name="[c6]"></a>io_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, io_ctrl.o(i.io_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = io_cfg_input &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config_mask
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_dir_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X_AddrRead
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Read_Data_BS81X
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Byte
</UL>

<P><STRONG><a name="[c9]"></a>io_cfg_output</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, io_ctrl.o(i.io_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = io_cfg_output &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config_mask
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_dir_output_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_Mfrc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Read_Data_BS81X
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Speaker_Send_Byte
</UL>

<P><STRONG><a name="[185]"></a>io_dir_read_all</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, io_ctrl.o(i.io_dir_read_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_dir_read_all
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[187]"></a>io_dir_write_all_noie</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, io_ctrl.o(i.io_dir_write_all_noie))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_dir_write_all_noie
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_dir_write
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[f9]"></a>io_ext_int_cfg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, io_ctrl.o(i.io_ext_int_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = io_ext_int_cfg &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_int_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Int_Callback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SensorTouch
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Int_Callback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_KeyTouch
</UL>

<P><STRONG><a name="[fa]"></a>io_ext_int_en</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, io_ctrl.o(i.io_ext_int_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = io_ext_int_en &rArr; ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_int_idx_get
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Int_Callback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SensorTouch
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Int_Callback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_KeyTouch
</UL>

<P><STRONG><a name="[1ab]"></a>io_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, io_ctrl.o(i.io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = io_init &rArr; app_gpio_init &rArr; gpio_int_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[184]"></a>io_out_read_all</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, io_ctrl.o(i.io_out_read_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_out_read_all
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_out_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[c5]"></a>io_pin_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io_ctrl.o(i.io_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_out_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X_AddrRead
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Stop_BS81X
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Start_BS81X
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Read_Data_BS81X
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Byte
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Stop_Condition
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Start_Condition
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Speaker_Send_Byte
</UL>

<P><STRONG><a name="[c8]"></a>io_pin_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, io_ctrl.o(i.io_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_in_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X_AddrRead
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Read_Data_BS81X
</UL>

<P><STRONG><a name="[c7]"></a>io_pin_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io_ctrl.o(i.io_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_out_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_Mfrc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X_AddrRead
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Data_BS81X
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Stop_BS81X
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Start_BS81X
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Read_Data_BS81X
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Write_Byte
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Stop_Condition
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_IIC_Start_Condition
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Speaker_Send_Byte
</UL>

<P><STRONG><a name="[1b0]"></a>io_pin_toggle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io_ctrl.o(i.io_pin_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_pin_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_out_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>

<P><STRONG><a name="[186]"></a>io_write_all</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, io_ctrl.o(i.io_write_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_write_all
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_port_out_write
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[1b5]"></a>lld_sleep_enter</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bx_lld_sleep.o(i.lld_sleep_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_sleep_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_extwkupdsb_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[2c]"></a>lld_sleep_init</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, bx_lld_sleep.o(i.lld_sleep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = lld_sleep_init &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_delay_set
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_extwkupdsb_setf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[1b9]"></a>lld_sleep_wakeup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bx_lld_sleep.o(i.lld_sleep_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = lld_sleep_wakeup &rArr; lld_sleep_compensate &rArr; rwip_sleep_lpcycles_2_us &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_compensate
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_extwkupdsb_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>

<P><STRONG><a name="[23b]"></a>lld_sleep_wakeup_end</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bx_lld_sleep.o(i.lld_sleep_wakeup_end))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>

<P><STRONG><a name="[5a]"></a>llm_end_evt_defer_patch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, llm_end_evt_defer_patch.o(i.llm_end_evt_defer_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llm_end_evt_defer_patch &rArr; llm_util_chk_tst_mode_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_chk_tst_mode_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_end_evt_defer_patch.o(i.set_llm_end_evt_defer_patch)
</UL>
<P><STRONG><a name="[1ba]"></a>llm_util_chk_tst_mode_patch</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tx_test_end.o(i.llm_util_chk_tst_mode_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llm_util_chk_tst_mode_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_end_evt_defer_patch
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = main &rArr; rtos_task_init &rArr; rtos_tasks_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_task_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1a0]"></a>mem_to_reg</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_hwecc.o(i.mem_to_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mem_to_reg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_calculate_start
</UL>

<P><STRONG><a name="[1c0]"></a>modem_dev_calib_in_main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modem.o(i.modem_dev_calib_in_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = modem_dev_calib_in_main &rArr; modem_vcocali_value_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali_value_save
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vco_deviation_cal_start_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
</UL>

<P><STRONG><a name="[15d]"></a>modem_init</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, modem.o(i.modem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_4_setf
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_3_setf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_2_setf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_1_setf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vco_stb_time_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_isr_mp
</UL>

<P><STRONG><a name="[1c2]"></a>modem_vcocali_value_save</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, modem.o(i.modem_vcocali_value_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modem_vcocali_value_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_4_setf
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_3_setf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_2_setf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vcocali_capdev_1_setf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mdm_vco_deviation_cal_start_setf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_dev_calib_in_main
</UL>

<P><STRONG><a name="[c1]"></a>msg2blestack_from_ISR</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_task.o(i.msg2blestack_from_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = msg2blestack_from_ISR &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueEmptyFromISR
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_MAC_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFT_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256_callback
</UL>

<P><STRONG><a name="[1cb]"></a>msg_send_to_ble_task</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, osapp_task.o(i.msg_send_to_ble_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_send
</UL>

<P><STRONG><a name="[1c]"></a>nvds_del</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nvds_in_ram.o(i.nvds_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvds_del &rArr; nvds_tag_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_search
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_invalid_item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[1b]"></a>nvds_get</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nvds_in_ram.o(i.nvds_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvds_get &rArr; nvds_tag_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_search
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[1a]"></a>nvds_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nvds_in_ram.o(i.nvds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nvds_init &rArr; nvds_index_build &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_func_ptr_get
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_index_build
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_data_ver_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[1d]"></a>nvds_put</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nvds_in_ram.o(i.nvds_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nvds_put &rArr; nvds_move_to_another_blk
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write_new_item
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_tag_search
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_move_to_another_blk
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_invalid_item
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get_available_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[228]"></a>os_get_eif_api</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_bridge.o(i.os_get_eif_api))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_eif_get
</UL>

<P><STRONG><a name="[1d3]"></a>osapp_add_svc_req_helper</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, osapp_utils.o(i.osapp_add_svc_req_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = osapp_add_svc_req_helper &rArr; add_svc_req &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_svc_req
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[1d6]"></a>osapp_add_svc_rsp_helper</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, osapp_utils.o(i.osapp_add_svc_rsp_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = osapp_add_svc_rsp_helper &rArr; add_svc_req &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_svc_req
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_add_svc_rsp_helper_handler
</UL>

<P><STRONG><a name="[64]"></a>osapp_add_svc_rsp_helper_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, osapp_utils.o(i.osapp_add_svc_rsp_helper_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = osapp_add_svc_rsp_helper_handler &rArr; osapp_add_svc_rsp_helper &rArr; add_svc_req &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_add_svc_rsp_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>osapp_ahi_msg_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, osapp_task.o(i.osapp_ahi_msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_to_ble_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_msg_build_send
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_rx_callback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_server_write_req_ind
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_server_read_req_ind
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_start_advertising
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_cmp_evt_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_get_dev_info_req_ind_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_conn_req_ind_handler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_device_ready_ind_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_svc_req
</UL>

<P><STRONG><a name="[258]"></a>osapp_get_att_handle_helper</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osapp_utils.o(i.osapp_get_att_handle_helper))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_rx_callback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_server_write_req_ind
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_server_read_req_ind
</UL>

<P><STRONG><a name="[1d9]"></a>osapp_get_svc_helper_ptr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, osapp_utils.o(i.osapp_get_svc_helper_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osapp_get_svc_helper_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_in_svc
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_read_write_req_ind_helper
</UL>

<P><STRONG><a name="[1db]"></a>osapp_mesh_queued_msg_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osapp_task.o(i.osapp_mesh_queued_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = osapp_mesh_queued_msg_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
</UL>

<P><STRONG><a name="[1d7]"></a>osapp_msg_build_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osapp_task.o(i.osapp_msg_build_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = osapp_msg_build_send &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_param_update_req_handler
</UL>

<P><STRONG><a name="[167]"></a>osapp_msg_start_recv</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_bridge.o(i.osapp_msg_start_recv))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_task
</UL>

<P><STRONG><a name="[6a]"></a>osapp_read_req_ind_helper_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osapp_utils.o(i.osapp_read_req_ind_helper_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osapp_read_req_ind_helper_handler &rArr; osapp_read_write_req_ind_helper &rArr; osapp_get_svc_helper_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_read_write_req_ind_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.constdata)
</UL>
<P><STRONG><a name="[1dc]"></a>osapp_read_write_req_ind_helper</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, osapp_utils.o(i.osapp_read_write_req_ind_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osapp_read_write_req_ind_helper &rArr; osapp_get_svc_helper_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_get_svc_helper_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_write_req_ind_helper_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_read_req_ind_helper_handler
</UL>

<P><STRONG><a name="[70]"></a>osapp_task</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, osapp_task.o(i.osapp_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = osapp_task &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_usr_msg_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_mesh_queued_msg_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_rx
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>osapp_usr_msg_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osapp_task.o(i.osapp_usr_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = osapp_usr_msg_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
</UL>

<P><STRONG><a name="[67]"></a>osapp_write_req_ind_helper_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osapp_utils.o(i.osapp_write_req_ind_helper_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osapp_write_req_ind_helper_handler &rArr; osapp_read_write_req_ind_helper &rArr; osapp_get_svc_helper_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_read_write_req_ind_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.constdata)
</UL>
<P><STRONG><a name="[1e0]"></a>patch_adv_int</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adv_int.o(i.patch_adv_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = patch_adv_int &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_alloc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_entrance_exit_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
</UL>

<P><STRONG><a name="[1e1]"></a>patch_alloc</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, patch.o(i.patch_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = patch_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_adv_int
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_llm_end_evt_defer_patch
</UL>

<P><STRONG><a name="[1e2]"></a>patch_entrance_exit_addr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, patch.o(i.patch_entrance_exit_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_adv_int
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_llm_end_evt_defer_patch
</UL>

<P><STRONG><a name="[1e3]"></a>patch_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, patch.o(i.patch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = patch_init &rArr; set_llm_end_evt_defer_patch &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_adv_int
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_llm_end_evt_defer_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_recovery
</UL>

<P><STRONG><a name="[23e]"></a>periph_domain_busy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, periph_mngt.o(i.periph_domain_busy))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_prepare_and_check
</UL>

<P><STRONG><a name="[253]"></a>periph_recovery</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, periph_recovery.o(i.periph_recovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = periph_recovery
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_recovery
</UL>

<P><STRONG><a name="[19]"></a>platform_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, arch_init.o(i.platform_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_awo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[16e]"></a>post_deepsleep_processing_mp</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sys_sleep_ram.o(i.post_deepsleep_processing_mp))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = post_deepsleep_processing_mp &rArr; flash_recovery &rArr; flash_wakeup &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_close_32m_rc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current_startup
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_all
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir_write_all_noie
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_pwm2_fc_h_setf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_o_16m_xtal_en_setf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_rtc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_recovery
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_32m_xtal
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_reset_to_gpio
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_clr_all_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[16d]"></a>pre_deepsleep_processing_mp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_sleep_ram.o(i.pre_deepsleep_processing_mp))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = pre_deepsleep_processing_mp &rArr; deepsleep_prepare &rArr; flash_deep_power_down &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[21]"></a>prf_add_profile</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prf.o(i.prf_add_profile))
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[1f]"></a>prf_cleanup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, prf.o(i.prf_cleanup))
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[20]"></a>prf_create</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, prf.o(i.prf_create))
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[22]"></a>prf_get_id_from_task</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, prf.o(i.prf_get_id_from_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prf_get_id_from_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[23]"></a>prf_get_task_from_id</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, prf.o(i.prf_get_task_from_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prf_get_task_from_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[1e]"></a>prf_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, prf.o(i.prf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_msg_flush
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[1a3]"></a>pshare_funcio_set</STRONG> (Thumb, 810 bytes, Stack size 48 bytes, pshare.o(i.pshare_funcio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pshare_funcio_set &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_spis_en_getf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_spim1_en_getf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_spim0_en_getf
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_func_io_en_r_setf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_ble_mac_dbg_en_getf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pin_cfg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pin_cfg
</UL>

<P><STRONG><a name="[188]"></a>pshare_reset_to_gpio</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pshare.o(i.pshare_reset_to_gpio))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[11e]"></a>pvPortMalloc</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_write
</UL>

<P><STRONG><a name="[200]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[13d]"></a>qspi_get_fifo_depth</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qspi_integration.o(i.qspi_get_fifo_depth))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program
</UL>

<P><STRONG><a name="[217]"></a>rc_calib_end</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rc_calib.o(i.rc_calib_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rc_calib_end &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[247]"></a>rc_calib_start</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rc_calib.o(i.rc_calib_start))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[18a]"></a>recovery_list_add</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, periph_recovery.o(i.recovery_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = recovery_list_add &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_sys_stat
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sys_stat
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_sys_stat
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sys_stat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_sys_stat
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sys_stat
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sys_stat
</UL>

<P><STRONG><a name="[18b]"></a>recovery_list_remove</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, periph_recovery.o(i.recovery_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_sys_stat
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sys_stat
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_sys_stat
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sys_stat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_sys_stat
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sys_stat
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sys_stat
</UL>

<P><STRONG><a name="[220]"></a>reg_pad_voltage_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rf_reg_settings_apollo_00.o(i.reg_pad_voltage_init))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_settings_init_mp
</UL>

<P><STRONG><a name="[182]"></a>reg_pll_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rf_reg_settings_apollo_00.o(i.reg_pll_enable))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
</UL>

<P><STRONG><a name="[21b]"></a>reg_pll_lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rf_reg_settings_apollo_00.o(i.reg_pll_lock))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wait_pll_stable
</UL>

<P><STRONG><a name="[1a1]"></a>reg_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_hwecc.o(i.reg_set))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_calculate_start
</UL>

<P><STRONG><a name="[24e]"></a>reg_set_pll</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, rf_reg_settings_apollo_00.o(i.reg_set_pll))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
</UL>

<P><STRONG><a name="[219]"></a>reg_set_xtal_current</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rf_reg_settings_apollo_00.o(i.reg_set_xtal_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reg_set_xtal_current
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current_startup
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current_normal
</UL>

<P><STRONG><a name="[218]"></a>reg_set_xtal_current_normal</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, rf_reg_settings_apollo_00.o(i.reg_set_xtal_current_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = reg_set_xtal_current_normal &rArr; reg_set_xtal_current
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_32m_xtal
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_settings_init_mp
</UL>

<P><STRONG><a name="[1e6]"></a>reg_set_xtal_current_startup</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, rf_reg_settings_apollo_00.o(i.reg_set_xtal_current_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = reg_set_xtal_current_startup &rArr; reg_set_xtal_current
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[21a]"></a>reg_wait_pll_stable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, rf_reg_settings_apollo_00.o(i.reg_wait_pll_stable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reg_wait_pll_stable
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_pll_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
</UL>

<P><STRONG><a name="[21c]"></a>rf_init</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, rf_apollo.o(i.rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rf_init &rArr; ble_radiocntl1_pack &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_txpwrup0_setf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rxpwrup0_setf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_radiocntl1_pack
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[21f]"></a>rf_reg_settings_init_mp</STRONG> (Thumb, 1252 bytes, Stack size 24 bytes, rf_reg_settings_apollo_00.o(i.rf_reg_settings_init_mp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rf_reg_settings_init_mp &rArr; ftsv_calc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current_normal
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_setPA_0dbm
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_pad_voltage_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftsv_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[221]"></a>rf_setPA_0dbm</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, rf_reg_settings_apollo_00.o(i.rf_setPA_0dbm))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_settings_init_mp
</UL>

<P><STRONG><a name="[222]"></a>rtc_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc_integration.o(i.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rtc_init &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_awo
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[1be]"></a>rtos_task_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, task_init.o(i.rtos_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = rtos_task_init &rArr; rtos_tasks_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_tasks_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>rtt_log</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bx_dbg.o(i.rtt_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_server_write_req_ind
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_server_read_req_ind
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gattc_cmp_evt_handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapm_cmp_evt_handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_param_update_req_handler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_disconnect_ind_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_default_msg_handler
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortOSTick_IRQ
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_usr_msg_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_mesh_queued_msg_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_c
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_print
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_soft_wakeup
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_index_build
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calib_end
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_int_idx_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_sys_stat
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sys_stat
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_sys_stat
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sys_stat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_sys_stat
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_isr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sys_stat
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sys_stat
</UL>

<P><STRONG><a name="[ba]"></a>rwip_assert_c</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bx_dbg.o(i.rwip_assert_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
</UL>

<P><STRONG><a name="[227]"></a>rwip_eif_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, arch_init.o(i.rwip_eif_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rwip_eif_get &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_eif_api
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[165]"></a>rwip_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rwip.o(i.rwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rwip_init &rArr; rf_init &rArr; ble_radiocntl1_pack &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_eif_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_task
</UL>

<P><STRONG><a name="[2a]"></a>rwip_prevent_sleep_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rwip.o(i.rwip_prevent_sleep_clear))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[29]"></a>rwip_prevent_sleep_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rwip.o(i.rwip_prevent_sleep_set))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[2b]"></a>rwip_reset</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, rwip.o(i.rwip_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rwip_reset &rArr; nvds_get &rArr; nvds_tag_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_flush
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[164]"></a>rwip_schedule</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwip.o(i.rwip_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwip_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_schedule
</UL>

<P><STRONG><a name="[236]"></a>rwip_sleep</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, rwip.o(i.rwip_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rwip_sleep &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_enter
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_sleep_check
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_target_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_sleep_check
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_timer_target_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_prepare_and_check
</UL>

<P><STRONG><a name="[1b4]"></a>rwip_sleep_lpcycles_2_us</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rwip.o(i.rwip_sleep_lpcycles_2_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rwip_sleep_lpcycles_2_us &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_compensate
</UL>

<P><STRONG><a name="[1b7]"></a>rwip_us_2_lpcycles</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwip.o(i.rwip_us_2_lpcycles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwip_us_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_delay_set
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_init
</UL>

<P><STRONG><a name="[27]"></a>rwip_wakeup</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rwip.o(i.rwip_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rwip_wakeup &rArr; lld_sleep_wakeup &rArr; lld_sleep_compensate &rArr; rwip_sleep_lpcycles_2_us &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_toggle
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[1b8]"></a>rwip_wakeup_delay_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwip.o(i.rwip_wakeup_delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rwip_wakeup_delay_set &rArr; rwip_us_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init
</UL>

<P><STRONG><a name="[28]"></a>rwip_wakeup_end</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rwip.o(i.rwip_wakeup_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rwip_wakeup_end &rArr; ble_lp_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup_end
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_irq_enable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_intr_clr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_area)
</UL>
<P><STRONG><a name="[1e4]"></a>set_llm_end_evt_defer_patch</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, llm_end_evt_defer_patch.o(i.set_llm_end_evt_defer_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = set_llm_end_evt_defer_patch &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_alloc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_entrance_exit_addr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_patch_bl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
</UL>

<P><STRONG><a name="[16a]"></a>sleep_prepare_and_check</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sys_sleep.o(i.sleep_prepare_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = sleep_prepare_and_check &rArr; rwip_sleep &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_domain_busy
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_domain_busy
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_sleep_check
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[1bd]"></a>soc_initialize</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, arch_init.o(i.soc_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = soc_initialize &rArr; patch_init &rArr; set_llm_end_evt_defer_patch &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_dev_calib_in_main
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[244]"></a>spi_get_fifo_depth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_integration.o(i.spi_get_fifo_depth))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_full_isr
</UL>

<P><STRONG><a name="[1e5]"></a>srst_awo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rst_gen.o(i.srst_awo))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
</UL>

<P><STRONG><a name="[189]"></a>srst_cpu</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rst_gen.o(i.srst_cpu))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_sw_rst
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwecc_sw_rst
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_sw_rst
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_sw_rst
</UL>

<P><STRONG><a name="[10b]"></a>srst_per</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rst_gen.o(i.srst_per))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sw_rst
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sw_rst
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sw_rst
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sw_rst
</UL>

<P><STRONG><a name="[1e9]"></a>switch_to_32m_xtal</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys_sleep.o(i.switch_to_32m_xtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = switch_to_32m_xtal &rArr; reg_set_xtal_current_normal &rArr; reg_set_xtal_current
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rtc_until
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_xtal_current_normal
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[248]"></a>sysctrl_32k_clk_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sysctrl.o(i.sysctrl_32k_clk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysctrl_32k_clk_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[249]"></a>sysctrl_awo_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sysctrl.o(i.sysctrl_awo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sysctrl_awo_init &rArr; sysctrl_awo_power_domain_ctrl_init &rArr; sysctrl_awo_pd_onoff_sw &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_set_sram_retention_vdd
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_power_domain_ctrl_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_modem_clk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[24a]"></a>sysctrl_awo_modem_clk_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysctrl.o(i.sysctrl_awo_modem_clk_init))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_init
</UL>

<P><STRONG><a name="[24d]"></a>sysctrl_awo_pd_onoff_sw</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sysctrl.o(i.sysctrl_awo_pd_onoff_sw))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sysctrl_awo_pd_onoff_sw &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_power_domain_ctrl_init
</UL>

<P><STRONG><a name="[24b]"></a>sysctrl_awo_power_domain_ctrl_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sysctrl.o(i.sysctrl_awo_power_domain_ctrl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sysctrl_awo_power_domain_ctrl_init &rArr; sysctrl_awo_pd_onoff_sw &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_pd_onoff_sw
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_init
</UL>

<P><STRONG><a name="[24c]"></a>sysctrl_awo_set_sram_retention_vdd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctrl.o(i.sysctrl_awo_set_sram_retention_vdd))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_init
</UL>

<P><STRONG><a name="[1ea]"></a>sysctrl_close_32m_rc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sysctrl.o(i.sysctrl_close_32m_rc))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[1a2]"></a>sysctrl_io_config</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, sysctrl.o(i.sysctrl_io_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysctrl_io_config &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_pin_cfg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pin_cfg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_en
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pin_cfg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_cfg
</UL>

<P><STRONG><a name="[1a6]"></a>sysctrl_io_config_mask</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sysctrl.o(i.sysctrl_io_config_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysctrl_io_config_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>

<P><STRONG><a name="[17f]"></a>sysctrl_pwr_pwm_2_sleep_en_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctrl.o(i.sysctrl_pwr_pwm_2_sleep_en_get))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[1eb]"></a>sysctrl_set_ahb_apb_blemac_clk</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sysctrl.o(i.sysctrl_set_ahb_apb_blemac_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sysctrl_set_ahb_apb_blemac_clk &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_pll_enable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wait_pll_stable
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_pll
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_o_clk_sel_hbus1_setf
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_o_clk_sel_hbus0_setf
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_clk_sel_ble_mac_setf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_clk_div_ble_mac_para0_m1_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_setup
</UL>

<P><STRONG><a name="[e4]"></a>systemTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_timer.o(i.systemTick))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontTask
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontVerifyAdmin
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontUnlock
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuTop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuDeleteUser
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuAddUser
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteNormalUser
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteAllUser
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAwake
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlarm
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalUser
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalRfidUser
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalKeyUser
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalFingerUser
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddAdmin
</UL>

<P><STRONG><a name="[1e8]"></a>system_recovery</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sys_sleep.o(i.system_recovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = system_recovery &rArr; patch_init &rArr; set_llm_end_evt_defer_patch &rArr; patch_entrance_exit_addr &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_recovery
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[254]"></a>system_tick_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, task_init.o(i.system_tick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = system_tick_init &rArr; rwip_us_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[59]"></a>test_task</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, task_init.o(i.test_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = test_task &rArr; HardwareInputInit &rArr; FrontInit &rArr; UserInit &rArr; FlashReadUserData &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardwareInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInputInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_bs81x
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_Speaker
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_Sensor
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_Mfrc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_LED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.rtos_task_init)
</UL>
<P><STRONG><a name="[d3]"></a>timerDelayMs</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, m_timer.o(i.timerDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timerDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_LED
</UL>

<P><STRONG><a name="[255]"></a>timerInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_timer.o(i.timerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timerInit &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[1d8]"></a>uart0_rx_callback</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, osapp_uart_server.o(i.uart0_rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = uart0_rx_callback &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_get_att_handle_helper
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gattc_cmp_evt_handler
</UL>

<P><STRONG><a name="[256]"></a>uartInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, m_uart.o(i.uartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = uartInit &rArr; app_uart_read &rArr; app_uart_read_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[157]"></a>uart_get_fifo_depth</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_integration.o(i.uart_get_fifo_depth))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read_dma
</UL>

<P><STRONG><a name="[151]"></a>uart_set_divisor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_uart.o(i.uart_set_divisor))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[1ef]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[260]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, task_init.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[26c]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, task_init.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[215]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task_init.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = vApplicationMallocFailedHook &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[25c]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task_init.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = vApplicationStackOverflowHook &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[1f3]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1ff]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1f1]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1f0]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[169]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_qspi_operation_enter
</UL>

<P><STRONG><a name="[143]"></a>vPortExitCritical</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vPortExitCritical &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_wrapper
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read_wrapper
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_wrapper
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program_wrapper
</UL>

<P><STRONG><a name="[1df]"></a>vPortFree</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virtual_port_read
</UL>

<P><STRONG><a name="[fc]"></a>vPortOSTick_IRQ</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, task_init.o(i.vPortOSTick_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = vPortOSTick_IRQ &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1f4]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[208]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[269]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[20d]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[25f]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vTaskPlaceOnEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[25e]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[226]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_task_init
</UL>

<P><STRONG><a name="[16f]"></a>vTaskStepTick</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vTaskStepTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[195]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_base
</UL>

<P><STRONG><a name="[a8]"></a>vTaskSwitchContext</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vTaskSwitchContext &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[246]"></a>wait_rtc_until</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_sleep_ram.o(i.wait_rtc_until))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_32m_xtal
</UL>

<P><STRONG><a name="[263]"></a>xPortStartScheduler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortStartScheduler &rArr; system_tick_init &rArr; rwip_us_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[25d]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortOSTick_IRQ
</UL>

<P><STRONG><a name="[223]"></a>xQueueGenericCreate</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_task_init
</UL>

<P><STRONG><a name="[1f6]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1fc]"></a>xQueueGenericReset</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[15f]"></a>xQueueGenericSend</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_msg_2_app
</UL>

<P><STRONG><a name="[1c9]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg2blestack_from_ISR
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1c8]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.xQueueIsQueueEmptyFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = xQueueIsQueueEmptyFromISR &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg2blestack_from_ISR
</UL>

<P><STRONG><a name="[166]"></a>xQueueReceive</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_task
</UL>

<P><STRONG><a name="[26a]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[225]"></a>xTaskCreate</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_task_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_tasks_create
</UL>

<P><STRONG><a name="[261]"></a>xTaskCreateStatic</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[268]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[209]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[266]"></a>xTaskIncrementTick</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[20c]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[198]"></a>xTaskResumeAll</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_base
</UL>

<P><STRONG><a name="[262]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[204]"></a>xTimerGenericCommand</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[a5]"></a>flash_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bx_dbg.o(flash_section), UNUSED, KEPT)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[50]"></a>add_svc_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osapp_uart_server.o(i.add_svc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = add_svc_callback &rArr; osapp_start_advertising &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_start_advertising
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(i.osapp_gapm_cmp_evt_handler)
</UL>
<P><STRONG><a name="[60]"></a>osapp_default_msg_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, osapp_uart_server.o(i.osapp_default_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = osapp_default_msg_handler &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>osapp_device_ready_ind_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, osapp_uart_server.o(i.osapp_device_ready_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = osapp_device_ready_ind_handler &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>osapp_gapc_conn_req_ind_handler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, osapp_uart_server.o(i.osapp_gapc_conn_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = osapp_gapc_conn_req_ind_handler &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>osapp_gapc_disconnect_ind_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, osapp_uart_server.o(i.osapp_gapc_disconnect_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = osapp_gapc_disconnect_ind_handler &rArr; osapp_start_advertising &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_start_advertising
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>osapp_gapc_get_dev_info_req_ind_handler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, osapp_uart_server.o(i.osapp_gapc_get_dev_info_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = osapp_gapc_get_dev_info_req_ind_handler &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>osapp_gapc_param_update_req_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, osapp_uart_server.o(i.osapp_gapc_param_update_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = osapp_gapc_param_update_req_handler &rArr; osapp_msg_build_send &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_msg_build_send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>osapp_gapm_cmp_evt_handler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, osapp_uart_server.o(i.osapp_gapm_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = osapp_gapm_cmp_evt_handler &rArr; osapp_add_svc_req_helper &rArr; add_svc_req &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_send
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_add_svc_req_helper
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>osapp_gattc_cmp_evt_handler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, osapp_uart_server.o(i.osapp_gattc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = osapp_gattc_cmp_evt_handler &rArr; uart0_rx_callback &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_rx_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>osapp_start_advertising</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, osapp_uart_server.o(i.osapp_start_advertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = osapp_start_advertising &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_gapc_disconnect_ind_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_svc_callback
</UL>

<P><STRONG><a name="[93]"></a>uart_server_read_req_ind</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, osapp_uart_server.o(i.uart_server_read_req_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = uart_server_read_req_ind &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_get_att_handle_helper
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>uart_server_write_req_ind</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, osapp_uart_server.o(i.uart_server_write_req_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = uart_server_write_req_ind &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_get_att_handle_helper
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osapp_uart_server.o(.data)
</UL>
<P><STRONG><a name="[213]"></a>prvHeapInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[214]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1f7]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1f8]"></a>prvCopyDataToQueue</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1fb]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[202]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[20b]"></a>prvUnlockQueue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1ee]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1f2]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1f9]"></a>prvDeleteTCB</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1fa]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[5e]"></a>prvIdleTask</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = prvIdleTask &rArr; bxSuppressTicksAndSleep &rArr; pre_deepsleep_processing_mp &rArr; deepsleep_prepare &rArr; flash_deep_power_down &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1fd]"></a>prvInitialiseNewTask</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = prvInitialiseNewTask &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[26b]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1f5]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[201]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[203]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[205]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[207]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[206]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[20a]"></a>prvSwitchTimerLists</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[5f]"></a>prvTimerTask</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[51]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = prvTaskExitError &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[1b6]"></a>ble_extwkupdsb_setf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bx_lld_sleep.o(i.ble_extwkupdsb_setf))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_enter
</UL>

<P><STRONG><a name="[1b3]"></a>lld_sleep_compensate</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bx_lld_sleep.o(i.lld_sleep_compensate))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lld_sleep_compensate &rArr; rwip_sleep_lpcycles_2_us &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_lpcycles_2_us
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup
</UL>

<P><STRONG><a name="[6e]"></a>virtual_port_flow_off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_bridge.o(i.virtual_port_flow_off))
<BR>[Address Reference Count : 1]<UL><LI> os_bridge.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>virtual_port_flow_on</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_bridge.o(i.virtual_port_flow_on))
<BR>[Address Reference Count : 1]<UL><LI> os_bridge.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>virtual_port_read</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os_bridge.o(i.virtual_port_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = virtual_port_read &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_bridge.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>virtual_port_write</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, os_bridge.o(i.virtual_port_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = virtual_port_write &rArr; ble_msg_2_app &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_msg_2_app
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_bridge.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>msg_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, osapp_task.o(i.msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_to_ble_task
</UL>

<P><STRONG><a name="[1dd]"></a>osapp_ahi_msg_rx</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, osapp_task.o(i.osapp_ahi_msg_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osapp_ahi_msg_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_task
</UL>

<P><STRONG><a name="[11a]"></a>add_svc_req</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, osapp_utils.o(i.add_svc_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = add_svc_req &rArr; osapp_ahi_msg_send &rArr; msg_send_to_ble_task &rArr; msg_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_ahi_msg_send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_alloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_add_svc_req_helper
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_add_svc_rsp_helper
</UL>

<P><STRONG><a name="[1da]"></a>handle_in_svc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, osapp_utils.o(i.handle_in_svc))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osapp_get_svc_helper_ptr
</UL>

<P><STRONG><a name="[16c]"></a>clr_rtc_intr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, task_init.o(i.clr_rtc_intr))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[224]"></a>rtos_tasks_create</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, task_init.o(i.rtos_tasks_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = rtos_tasks_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_task_init
</UL>

<P><STRONG><a name="[3e]"></a>FrontAddAdmin</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, front.o(i.FrontAddAdmin))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = FrontAddAdmin &rArr; AdminSaveConfig &rArr; FlashWriteAdminData &rArr; eflash_write &rArr; flash_program &rArr; flash_program_base &rArr; app_qspi_flash_program_wrapper &rArr; app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePlay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetKey
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdminSaveConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> front.o(i.FrontMenuAddUser)
</UL>
<P><STRONG><a name="[36]"></a>FrontAddNormalFingerUser</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, front.o(i.FrontAddNormalFingerUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FrontAddNormalFingerUser &rArr; debugPrint &rArr; app_uart_write &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> front.o(i.FrontAddNormalUser)
</UL>
<P><STRONG><a name="[35]"></a>FrontAddNormalKeyUser</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, front.o(i.FrontAddNormalKeyUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = FrontAddNormalKeyUser &rArr; UserSaveConfig &rArr; FlashWriteUserData &rArr; eflash_write &rArr; flash_program &rArr; flash_program_base &rArr; app_qspi_flash_program_wrapper &rArr; app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePlay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetKey
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserSaveConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> front.o(i.FrontAddNormalUser)
</UL>
<P><STRONG><a name="[37]"></a>FrontAddNormalRfidUser</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, front.o(i.FrontAddNormalRfidUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FrontAddNormalRfidUser &rArr; debugPrint &rArr; app_uart_write &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> front.o(i.FrontAddNormalUser)
</UL>
<P><STRONG><a name="[34]"></a>FrontAddNormalUser</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, front.o(i.FrontAddNormalUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = FrontAddNormalUser &rArr; debugPrint &rArr; app_uart_write &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePlay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetKey
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
</UL>
<BR>[Address Reference Count : 4]<UL><LI> front.o(i.FrontAddNormalFingerUser)
<LI> front.o(i.FrontAddNormalKeyUser)
<LI> front.o(i.FrontAddNormalRfidUser)
<LI> front.o(i.FrontMenuAddUser)
</UL>
<P><STRONG><a name="[3a]"></a>FrontAlarm</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, front.o(i.FrontAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FrontAlarm &rArr; debugPrint &rArr; app_uart_write &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetKey
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
</UL>
<BR>[Address Reference Count : 2]<UL><LI> front.o(i.FrontAwake)
<LI> front.o(i.FrontVerifyAdmin)
</UL>
<P><STRONG><a name="[38]"></a>FrontAwake</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, front.o(i.FrontAwake))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = FrontAwake &rArr; UserFindKeyUser &rArr; FlashReadUserData &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePlay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenShowLogo
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetRfid
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetKey
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetFingerTouch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFindRfid
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFindKeyUser
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFindAdmin
</UL>
<BR>[Address Reference Count : 5]<UL><LI> front.o(i.FrontAlarm)
<LI> front.o(i.FrontMenuTop)
<LI> front.o(i.FrontSleep)
<LI> front.o(i.FrontTask)
<LI> front.o(i.FrontVerifyAdmin)
</UL>
<P><STRONG><a name="[e6]"></a>FrontCalcElapsed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, front.o(i.FrontCalcElapsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FrontCalcElapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontTask
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontVerifyAdmin
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontUnlock
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuTop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuDeleteUser
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontMenuAddUser
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteNormalUser
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontDeleteAllUser
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAwake
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlarm
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalUser
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalRfidUser
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalKeyUser
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddNormalFingerUser
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAddAdmin
</UL>

<P><STRONG><a name="[3f]"></a>FrontDeleteAllUser</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, front.o(i.FrontDeleteAllUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = FrontDeleteAllUser &rArr; UserFindAdmin &rArr; FlashReadAdminData &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePlay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetKey
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFindAdmin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserDeleteAllKeyUser
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserDeleteAllAdminUser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> front.o(i.FrontMenuDeleteUser)
</UL>
<P><STRONG><a name="[40]"></a>FrontDeleteNormalUser</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, front.o(i.FrontDeleteNormalUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = FrontDeleteNormalUser &rArr; UserDeleteAllKeyUser &rArr; eflash_page_erase &rArr; flash_erase &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserDeleteAllKeyUser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> front.o(i.FrontMenuDeleteUser)
</UL>
<P><STRONG><a name="[33]"></a>FrontMenuAddUser</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, front.o(i.FrontMenuAddUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = FrontMenuAddUser &rArr; debugPrint &rArr; app_uart_write &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePlay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetKey
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
</UL>
<BR>[Address Reference Count : 3]<UL><LI> front.o(i.FrontAddAdmin)
<LI> front.o(i.FrontAddNormalUser)
<LI> front.o(i.FrontMenuTop)
</UL>
<P><STRONG><a name="[3d]"></a>FrontMenuDeleteUser</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, front.o(i.FrontMenuDeleteUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = FrontMenuDeleteUser &rArr; debugPrint &rArr; app_uart_write &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePlay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetKey
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
</UL>
<BR>[Address Reference Count : 3]<UL><LI> front.o(i.FrontDeleteAllUser)
<LI> front.o(i.FrontDeleteNormalUser)
<LI> front.o(i.FrontMenuTop)
</UL>
<P><STRONG><a name="[3c]"></a>FrontMenuTop</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, front.o(i.FrontMenuTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = FrontMenuTop &rArr; debugPrint &rArr; app_uart_write &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePlay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetKey
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
</UL>
<BR>[Address Reference Count : 4]<UL><LI> front.o(i.FrontAwake)
<LI> front.o(i.FrontMenuAddUser)
<LI> front.o(i.FrontMenuDeleteUser)
<LI> front.o(i.FrontVerifyAdmin)
</UL>
<P><STRONG><a name="[32]"></a>FrontSleep</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, front.o(i.FrontSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FrontSleep &rArr; debugPrint &rArr; app_uart_write &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenClear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetKeyTouch
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetFingerTouch
</UL>
<BR>[Address Reference Count : 12]<UL><LI> front.o(i.FrontAddAdmin)
<LI> front.o(i.FrontAddNormalKeyUser)
<LI> front.o(i.FrontAddNormalUser)
<LI> front.o(i.FrontAlarm)
<LI> front.o(i.FrontAwake)
<LI> front.o(i.FrontInit)
<LI> front.o(i.FrontMenuAddUser)
<LI> front.o(i.FrontMenuDeleteUser)
<LI> front.o(i.FrontMenuTop)
<LI> front.o(i.FrontTask)
<LI> front.o(i.FrontUnlock)
<LI> front.o(i.FrontVerifyAdmin)
</UL>
<P><STRONG><a name="[39]"></a>FrontUnlock</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, front.o(i.FrontUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FrontUnlock &rArr; debugPrint &rArr; app_uart_write &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> front.o(i.FrontAwake)
</UL>
<P><STRONG><a name="[3b]"></a>FrontVerifyAdmin</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, front.o(i.FrontVerifyAdmin))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = FrontVerifyAdmin &rArr; UserFindAdmin &rArr; FlashReadAdminData &rArr; flash_read &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePlay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGetKey
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontCalcElapsed
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFindAdmin
</UL>
<BR>[Address Reference Count : 2]<UL><LI> front.o(i.FrontAwake)
<LI> front.o(i.FrontTask)
</UL>
<P><STRONG><a name="[240]"></a>sys_setup</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, arch_init.o(i.sys_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = sys_setup &rArr; rf_reg_settings_init_mp &rArr; ftsv_calc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_awo_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_32k_clk_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_cpu
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_settings_init_mp
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calib_start
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calib_end
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_reset_to_gpio
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_disable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_clr_all_clk
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_init_wrapper
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_hwecc_init_wrapper
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_init_wrapper
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_initialize
</UL>

<P><STRONG><a name="[18d]"></a>co_write32p</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ecc_p256.o(i.co_write32p))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_secret_key
</UL>

<P><STRONG><a name="[4f]"></a>flash_erase_wrapper</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nvds_in_ram.o(i.flash_erase_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = flash_erase_wrapper &rArr; flash_erase &rArr; flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvds_in_ram.o(i.nvds_init)
</UL>
<P><STRONG><a name="[1cc]"></a>nvds_data_ver_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nvds_in_ram.o(i.nvds_data_ver_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvds_data_ver_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
</UL>

<P><STRONG><a name="[1cf]"></a>nvds_get_available_idx</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nvds_in_ram.o(i.nvds_get_available_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvds_get_available_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_index_build
</UL>

<P><STRONG><a name="[1d0]"></a>nvds_index_build</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nvds_in_ram.o(i.nvds_index_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nvds_index_build &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_invalid_item
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get_available_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
</UL>

<P><STRONG><a name="[1ce]"></a>nvds_invalid_item</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nvds_in_ram.o(i.nvds_invalid_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvds_invalid_item
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_del
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_index_build
</UL>

<P><STRONG><a name="[1d1]"></a>nvds_move_to_another_blk</STRONG> (Thumb, 158 bytes, Stack size 296 bytes, nvds_in_ram.o(i.nvds_move_to_another_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nvds_move_to_another_blk
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>

<P><STRONG><a name="[1cd]"></a>nvds_tag_search</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nvds_in_ram.o(i.nvds_tag_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvds_tag_search
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_del
</UL>

<P><STRONG><a name="[1d2]"></a>nvds_write_new_item</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nvds_in_ram.o(i.nvds_write_new_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvds_write_new_item
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>

<P><STRONG><a name="[160]"></a>ble_radiocntl1_pack</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, rf_apollo.o(i.ble_radiocntl1_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = ble_radiocntl1_pack &rArr; rwip_assert_asm &rArr; rwip_assert_c &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_assert_asm
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[21d]"></a>ble_rxpwrup0_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rf_apollo.o(i.ble_rxpwrup0_setf))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[21e]"></a>ble_txpwrup0_setf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf_apollo.o(i.ble_txpwrup0_setf))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[57]"></a>rf_force_agc_enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_force_agc_enable))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[52]"></a>rf_reg_rd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_reg_rd))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[53]"></a>rf_reg_wr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_reg_wr))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[56]"></a>rf_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_reset))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[58]"></a>rf_rssi_convert</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_rssi_convert))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[55]"></a>rf_sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_sleep))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[54]"></a>rf_txpwr_dbm_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_apollo.o(i.rf_txpwr_dbm_get))
<BR>[Address Reference Count : 1]<UL><LI> rf_apollo.o(i.rf_init)
</UL>
<P><STRONG><a name="[15b]"></a>sysc_awo_blelp_inrp_en_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_sleep.o(i.sysc_awo_blelp_inrp_en_setf))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_isr_mp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_irq_enable
</UL>

<P><STRONG><a name="[17b]"></a>deepsleep_prepare</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, sys_sleep_ram.o(i.deepsleep_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = deepsleep_prepare &rArr; flash_deep_power_down &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_pwr_pwm_2_sleep_en_get
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_pll_enable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_all
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_out_read_all
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir_write_all_noie
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir_read_all
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_deep_power_down
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_pwm2_fc_h_setf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_awo_o_16m_xtal_en_setf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_with_ble_sleep
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_32m_rc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_irq_enable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lp_intr_clr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_reset_to_gpio
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_deepsleep_processing_mp
</UL>

<P><STRONG><a name="[181]"></a>sync_with_ble_sleep</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sys_sleep_ram.o(i.sync_with_ble_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sync_with_ble_sleep &rArr; clk_gate_awo &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_awo
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[183]"></a>sysc_awo_o_16m_xtal_en_setf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_sleep_ram.o(i.sysc_awo_o_16m_xtal_en_setf))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[180]"></a>sysc_awo_pwm2_fc_h_setf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_sleep_ram.o(i.sysc_awo_pwm2_fc_h_setf))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_deepsleep_processing_mp
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_prepare
</UL>

<P><STRONG><a name="[fe]"></a>_DoInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[100]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[102]"></a>_WriteBlocking</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[101]"></a>_WriteNoCheck</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[107]"></a>_PrintInt</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[108]"></a>_PrintUnsigned</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[106]"></a>_StoreChar</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[1c1]"></a>ble_mdm_vco_deviation_cal_start_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vco_deviation_cal_start_setf))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_dev_calib_in_main
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali_value_save
</UL>

<P><STRONG><a name="[1c7]"></a>ble_mdm_vco_stb_time_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vco_stb_time_setf))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_init
</UL>

<P><STRONG><a name="[1c3]"></a>ble_mdm_vcocali_capdev_1_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vcocali_capdev_1_setf))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali_value_save
</UL>

<P><STRONG><a name="[1c4]"></a>ble_mdm_vcocali_capdev_2_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vcocali_capdev_2_setf))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali_value_save
</UL>

<P><STRONG><a name="[1c5]"></a>ble_mdm_vcocali_capdev_3_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vcocali_capdev_3_setf))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali_value_save
</UL>

<P><STRONG><a name="[1c6]"></a>ble_mdm_vcocali_capdev_4_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(i.ble_mdm_vcocali_capdev_4_setf))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_vcocali_value_save
</UL>

<P><STRONG><a name="[210]"></a>sysc_cpu_ble_mac_dbg_en_getf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pshare.o(i.sysc_cpu_ble_mac_dbg_en_getf))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
</UL>

<P><STRONG><a name="[212]"></a>sysc_cpu_func_io_en_r_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pshare.o(i.sysc_cpu_func_io_en_r_setf))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
</UL>

<P><STRONG><a name="[20e]"></a>sysc_cpu_spim0_en_getf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pshare.o(i.sysc_cpu_spim0_en_getf))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
</UL>

<P><STRONG><a name="[211]"></a>sysc_cpu_spim1_en_getf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pshare.o(i.sysc_cpu_spim1_en_getf))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
</UL>

<P><STRONG><a name="[20f]"></a>sysc_cpu_spis_en_getf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pshare.o(i.sysc_cpu_spis_en_getf))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
</UL>

<P><STRONG><a name="[252]"></a>sysc_awo_clk_div_ble_mac_para0_m1_setf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctrl.o(i.sysc_awo_clk_div_ble_mac_para0_m1_setf))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
</UL>

<P><STRONG><a name="[251]"></a>sysc_awo_clk_sel_ble_mac_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysctrl.o(i.sysc_awo_clk_sel_ble_mac_setf))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
</UL>

<P><STRONG><a name="[250]"></a>sysc_awo_o_clk_sel_hbus0_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysctrl.o(i.sysc_awo_o_clk_sel_hbus0_setf))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
</UL>

<P><STRONG><a name="[24f]"></a>sysc_awo_o_clk_sel_hbus1_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysctrl.o(i.sysc_awo_o_clk_sel_hbus1_setf))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_set_ahb_apb_blemac_clk
</UL>

<P><STRONG><a name="[193]"></a>ext_int_idx_get</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, io_ctrl.o(i.ext_int_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ext_int_idx_get &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_en
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_ext_int_cfg
</UL>

<P><STRONG><a name="[19d]"></a>ftsv_calc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rf_reg_settings_apollo_00.o(i.ftsv_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ftsv_calc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reg_settings_init_mp
</UL>

<P><STRONG><a name="[96]"></a>cache_clk_gate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cache_integration.o(i.cache_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = cache_clk_gate &rArr; clk_gate_cpu_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_cpu_g1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cache_integration.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>cache_sys_stat</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cache_integration.o(i.cache_sys_stat))
<BR>[Address Reference Count : 1]<UL><LI> cache_integration.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>dmac_clk_gate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dmac_integration.o(i.dmac_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = dmac_clk_gate &rArr; clk_gate_cpu_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_cpu_g1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmac_integration.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>dmac_intr_op</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dmac_integration.o(i.dmac_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dmac_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmac_integration.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>dmac_sw_rst</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dmac_integration.o(i.dmac_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmac_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_cpu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmac_integration.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>dmac_sys_stat</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dmac_integration.o(i.dmac_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dmac_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmac_integration.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>gpio_clk_gate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio_integration.o(i.gpio_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gpio_clk_gate &rArr; clk_gate_per_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_integration.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>gpio_intr_op</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpio_integration.o(i.gpio_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = gpio_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_integration.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>gpio_sw_rst</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_integration.o(i.gpio_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_per
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_integration.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>gpio_sys_stat</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio_integration.o(i.gpio_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = gpio_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_integration.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>hwecc_clk_gate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hwecc_integration.o(i.hwecc_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = hwecc_clk_gate &rArr; clk_gate_cpu_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_cpu_g1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwecc_integration.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>hwecc_intr_op</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hwecc_integration.o(i.hwecc_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = hwecc_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwecc_integration.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>hwecc_sw_rst</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hwecc_integration.o(i.hwecc_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hwecc_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_cpu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwecc_integration.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>hwecc_sys_stat</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hwecc_integration.o(i.hwecc_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = hwecc_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwecc_integration.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>iic_clk_gate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iic_integration.o(i.iic_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = iic_clk_gate &rArr; clk_gate_per_g0 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_integration.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>iic_clk_src_cfg</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, iic_integration.o(i.iic_clk_src_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = iic_clk_src_cfg &rArr; clk_gate_per_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g1
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_integration.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>iic_intr_op</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, iic_integration.o(i.iic_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = iic_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_integration.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>iic_pin_cfg</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, iic_integration.o(i.iic_pin_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = iic_pin_cfg &rArr; pshare_funcio_set &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_integration.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>iic_sw_rst</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iic_integration.o(i.iic_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_per
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_integration.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>iic_sys_stat</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, iic_integration.o(i.iic_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = iic_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_integration.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>qspi_clk_gate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, qspi_integration.o(i.qspi_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = qspi_clk_gate &rArr; clk_gate_cpu_g1 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_cpu_g1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qspi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>qspi_pin_cfg</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, qspi_integration.o(i.qspi_pin_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = qspi_pin_cfg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_qspi_en_setf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qspi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>qspi_sw_rst</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, qspi_integration.o(i.qspi_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qspi_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_cpu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qspi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>qspi_sys_stat</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, qspi_integration.o(i.qspi_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = qspi_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qspi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>sysc_cpu_qspi_en_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qspi_integration.o(i.sysc_cpu_qspi_en_setf))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_pin_cfg
</UL>

<P><STRONG><a name="[82]"></a>spi_clk_gate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, spi_integration.o(i.spi_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = spi_clk_gate &rArr; clk_gate_per_g0 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>spi_intr_op</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, spi_integration.o(i.spi_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = spi_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>spi_pin_cfg</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, spi_integration.o(i.spi_pin_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = spi_pin_cfg &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_spis_en_setf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_spim1_en_setf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysc_cpu_spim0_en_setf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>spi_sw_rst</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi_integration.o(i.spi_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_per
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>spi_sys_stat</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, spi_integration.o(i.spi_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = spi_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_integration.o(.constdata)
</UL>
<P><STRONG><a name="[242]"></a>sysc_cpu_spim0_en_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_integration.o(i.sysc_cpu_spim0_en_setf))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_cfg
</UL>

<P><STRONG><a name="[241]"></a>sysc_cpu_spim1_en_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_integration.o(i.sysc_cpu_spim1_en_setf))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_cfg
</UL>

<P><STRONG><a name="[243]"></a>sysc_cpu_spis_en_setf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_integration.o(i.sysc_cpu_spis_en_setf))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_cfg
</UL>

<P><STRONG><a name="[88]"></a>timer_clk_gate</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, timer_integration.o(i.timer_clk_gate))
<BR>[Address Reference Count : 1]<UL><LI> timer_integration.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>timer_clk_src_cfg</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timer_integration.o(i.timer_clk_src_cfg))
<BR>[Address Reference Count : 1]<UL><LI> timer_integration.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>timer_intr_op</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timer_integration.o(i.timer_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = timer_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_integration.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>timer_pin_cfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer_integration.o(i.timer_pin_cfg))
<BR>[Address Reference Count : 1]<UL><LI> timer_integration.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>timer_sw_rst</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer_integration.o(i.timer_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_cpu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_integration.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>timer_sys_stat</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, timer_integration.o(i.timer_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = timer_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_integration.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>uart_clk_gate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart_integration.o(i.uart_clk_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = uart_clk_gate &rArr; clk_gate_per_g0 &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_per_g0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_integration.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>uart_clk_src_cfg</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, uart_integration.o(i.uart_clk_src_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_clk_src_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_integration.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>uart_intr_op</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uart_integration.o(i.uart_intr_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = uart_intr_op &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_integration.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>uart_pin_cfg</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, uart_integration.o(i.uart_pin_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = uart_pin_cfg &rArr; pshare_funcio_set &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysctrl_io_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pshare_funcio_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_integration.o(.constdata)
</UL>
<P><STRONG><a name="[25a]"></a>uart_rx_stat_set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart_integration.o(i.uart_rx_stat_set))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
</UL>

<P><STRONG><a name="[8c]"></a>uart_sw_rst</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart_integration.o(i.uart_sw_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_sw_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srst_per
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_integration.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>uart_sys_stat</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, uart_integration.o(i.uart_sys_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = uart_sys_stat &rArr; recovery_list_remove &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_log
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_remove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_list_add
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_stat_set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_stat_set
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_integration.o(.constdata)
</UL>
<P><STRONG><a name="[25b]"></a>uart_tx_stat_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart_integration.o(i.uart_tx_stat_set))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sys_stat
</UL>

<P><STRONG><a name="[124]"></a>dmac_block_ts_config</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, app_dmac.o(i.dmac_block_ts_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dmac_block_ts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_tfr_isr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start
</UL>

<P><STRONG><a name="[123]"></a>dmac_ch_alloc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_dmac.o(i.dmac_ch_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start
</UL>

<P><STRONG><a name="[127]"></a>dmac_ch_free</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_dmac.o(i.dmac_ch_free))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_tfr_isr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait
</UL>

<P><STRONG><a name="[121]"></a>dmac_stat_clean_if_all_transfer_done</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_dmac.o(i.dmac_stat_clean_if_all_transfer_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dmac_stat_clean_if_all_transfer_done
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_isr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait
</UL>

<P><STRONG><a name="[129]"></a>gpio_int_cfg</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, app_gpio.o(i.gpio_int_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_int_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_init
</UL>

<P><STRONG><a name="[1a5]"></a>app_iic_set_data_cmd_pack</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_iic.o(i.app_iic_set_data_cmd_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_iic_set_data_cmd_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_tx_empty_isr
</UL>

<P><STRONG><a name="[133]"></a>iic_clear_all_irq</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, app_iic.o(i.iic_clear_all_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_clear_all_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
</UL>

<P><STRONG><a name="[134]"></a>iic_rx_complete</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_iic.o(i.iic_rx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = iic_rx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
</UL>

<P><STRONG><a name="[1a4]"></a>iic_tx_complete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_iic.o(i.iic_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = iic_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_tx_empty_isr
</UL>

<P><STRONG><a name="[135]"></a>iic_tx_empty_isr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, app_iic.o(i.iic_tx_empty_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = iic_tx_empty_isr &rArr; iic_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_tx_complete
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_set_data_cmd_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_iic_isr
</UL>

<P><STRONG><a name="[156]"></a>app_uart_read_dma</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, app_uart.o(i.app_uart_read_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = app_uart_read_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmac_get_burst_transaction_size_enum
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start_wrapper
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_fifo_depth
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
</UL>

<P><STRONG><a name="[91]"></a>uart_read_dma_callback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_uart.o(i.uart_read_dma_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = uart_read_dma_callback &rArr; uart_rx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>uart_rx_complete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_uart.o(i.uart_rx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = uart_rx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_env_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_isr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_dma_callback
</UL>

<P><STRONG><a name="[259]"></a>uart_rx_env_clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart.o(i.uart_rx_env_clr))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_complete
</UL>

<P><STRONG><a name="[155]"></a>uart_transfer_sanity_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_uart.o(i.uart_transfer_sanity_check))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_write
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
</UL>

<P><STRONG><a name="[153]"></a>uart_tx_complete</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_uart.o(i.uart_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = uart_tx_complete &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_isr
</UL>

<P><STRONG><a name="[92]"></a>uart_write_dma_callback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_uart.o(i.uart_write_dma_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_write_dma_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>flash_operation_wait</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, flash.o(i.flash_operation_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = flash_operation_wait &rArr; app_qspi_std_read_wrapper &rArr; app_qspi_std_read &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_base
</UL>

<P><STRONG><a name="[199]"></a>flash_program_base</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, flash.o(i.flash_program_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = flash_program_base &rArr; app_qspi_flash_program_wrapper &rArr; app_qspi_flash_program &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program_wrapper
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program
</UL>

<P><STRONG><a name="[196]"></a>flash_write_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash.o(i.flash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = flash_write_enable &rArr; app_qspi_std_write_wrapper &rArr; app_qspi_std_write &rArr; qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_base
</UL>

<P><STRONG><a name="[13e]"></a>qspi_std_byte_write_dma_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_qspi.o(i.qspi_std_byte_write_dma_config))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program
</UL>

<P><STRONG><a name="[13f]"></a>qspi_std_byte_write_dma_start</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, app_qspi.o(i.qspi_std_byte_write_dma_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = qspi_std_byte_write_dma_start &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_transfer_wait_wrapper
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dmac_start_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program
</UL>

<P><STRONG><a name="[141]"></a>flash_qspi_operation_enter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_qspi_wrapper.o(i.flash_qspi_operation_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_qspi_operation_enter &rArr; cache_disable &rArr; flash_cache_disable &rArr; app_qspi_disable_for_cache_wrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_write_wrapper
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_std_read_wrapper
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_multi_read_wrapper
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_qspi_flash_program_wrapper
</UL>

<P><STRONG><a name="[245]"></a>spi_rx_done</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_spi.o(i.spi_rx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_rx_done
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_full_isr
</UL>

<P><STRONG><a name="[14d]"></a>spi_rx_full_isr</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, app_spi.o(i.spi_rx_full_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_rx_full_isr &rArr; spi_rx_done
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_fifo_depth
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_done
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
</UL>

<P><STRONG><a name="[14e]"></a>spi_tx_empty_isr</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, app_spi.o(i.spi_tx_empty_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_tx_empty_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_isr
</UL>

<P><STRONG><a name="[44]"></a>dummy_func0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_uart.o(i.dummy_func0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dummy_func0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_uart.o(i.debugPrint)
</UL>
<P><STRONG><a name="[4d]"></a>uart00_rx_callback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, m_uart.o(i.uart00_rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = uart00_rx_callback &rArr; app_uart_read &rArr; app_uart_read_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_uart.o(i.init_uart0)
<LI> m_uart.o(i.uart00_rx_callback)
</UL>
<P><STRONG><a name="[5d]"></a>uart1_rx_callback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, m_uart.o(i.uart1_rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = uart1_rx_callback &rArr; app_uart_read &rArr; app_uart_read_dma &rArr; app_dmac_start_wrapper &rArr; app_dmac_start &rArr; dmac_ch_alloc &rArr; __aeabi_assert &rArr; rtt_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_read
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_uart.o(i.uart1_rx_callback)
<LI> m_uart.o(i.uartInit)
</UL>
<P><STRONG><a name="[c4]"></a>Com_Lock_IIC_Read_Data_BS81X</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, common_lock_bs81x.o(i.Com_Lock_IIC_Read_Data_BS81X))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Com_Lock_IIC_Read_Data_BS81X &rArr; io_cfg_output &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_bs81x
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Int_Callback
</UL>

<P><STRONG><a name="[ca]"></a>Com_Lock_IIC_Start_BS81X</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, common_lock_bs81x.o(i.Com_Lock_IIC_Start_BS81X))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Com_Lock_IIC_Start_BS81X &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_bs81x
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Int_Callback
</UL>

<P><STRONG><a name="[cc]"></a>Com_Lock_IIC_Stop_BS81X</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, common_lock_bs81x.o(i.Com_Lock_IIC_Stop_BS81X))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Com_Lock_IIC_Stop_BS81X &rArr; io_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_bs81x
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Int_Callback
</UL>

<P><STRONG><a name="[cf]"></a>Com_Lock_IIC_Write_Data_BS81X</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, common_lock_bs81x.o(i.Com_Lock_IIC_Write_Data_BS81X))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Com_Lock_IIC_Write_Data_BS81X &rArr; io_cfg_output &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_bs81x
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Int_Callback
</UL>

<P><STRONG><a name="[d0]"></a>Com_Lock_IIC_Write_Data_BS81X_AddrRead</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, common_lock_bs81x.o(i.Com_Lock_IIC_Write_Data_BS81X_AddrRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Com_Lock_IIC_Write_Data_BS81X_AddrRead &rArr; io_cfg_input &rArr; sysctrl_io_config_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bx_delay_asm
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_read
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pin_clear
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Lock_Init_bs81x
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Int_Callback
</UL>

<P><STRONG><a name="[115]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[113]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[118]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[117]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[43]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
