

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Jan 22 13:47:32 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F15354
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	intentry,global,class=CODE,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	psect	text45,local,class=CODE,merge=1,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2
    66                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
    67                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text53,local,class=CODE,merge=1,delta=2
    71                           	psect	text54,local,class=CODE,merge=1,delta=2
    72                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text58,local,class=CODE,merge=1,delta=2
    76                           	psect	text59,local,class=CODE,merge=1,delta=2
    77                           	dabs	1,0x7E,2
    78  0000                     
    79                           ; Version 2.00
    80                           ; Generated 27/05/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16F15354 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  0010                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0016                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  009B                     	;# 
   137  009B                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009E                     	;# 
   141  009F                     	;# 
   142  0119                     	;# 
   143  0119                     	;# 
   144  0119                     	;# 
   145  011A                     	;# 
   146  011A                     	;# 
   147  011A                     	;# 
   148  011B                     	;# 
   149  011B                     	;# 
   150  011B                     	;# 
   151  011B                     	;# 
   152  011B                     	;# 
   153  011C                     	;# 
   154  011C                     	;# 
   155  011C                     	;# 
   156  011D                     	;# 
   157  011D                     	;# 
   158  011D                     	;# 
   159  011E                     	;# 
   160  011E                     	;# 
   161  011E                     	;# 
   162  011F                     	;# 
   163  011F                     	;# 
   164  011F                     	;# 
   165  011F                     	;# 
   166  011F                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169  018E                     	;# 
   170  018F                     	;# 
   171  0190                     	;# 
   172  0191                     	;# 
   173  0192                     	;# 
   174  0196                     	;# 
   175  0197                     	;# 
   176  0198                     	;# 
   177  0199                     	;# 
   178  019A                     	;# 
   179  019B                     	;# 
   180  019C                     	;# 
   181  020C                     	;# 
   182  020C                     	;# 
   183  020D                     	;# 
   184  020E                     	;# 
   185  020F                     	;# 
   186  020F                     	;# 
   187  0210                     	;# 
   188  0210                     	;# 
   189  0211                     	;# 
   190  0211                     	;# 
   191  028C                     	;# 
   192  028C                     	;# 
   193  028D                     	;# 
   194  028D                     	;# 
   195  028E                     	;# 
   196  028F                     	;# 
   197  0290                     	;# 
   198  0291                     	;# 
   199  030C                     	;# 
   200  030C                     	;# 
   201  030D                     	;# 
   202  030E                     	;# 
   203  030F                     	;# 
   204  0310                     	;# 
   205  0310                     	;# 
   206  0311                     	;# 
   207  0312                     	;# 
   208  0313                     	;# 
   209  0314                     	;# 
   210  0314                     	;# 
   211  0315                     	;# 
   212  0316                     	;# 
   213  0318                     	;# 
   214  0318                     	;# 
   215  0319                     	;# 
   216  031A                     	;# 
   217  031C                     	;# 
   218  031C                     	;# 
   219  031D                     	;# 
   220  031E                     	;# 
   221  038C                     	;# 
   222  038C                     	;# 
   223  038D                     	;# 
   224  038E                     	;# 
   225  058C                     	;# 
   226  058C                     	;# 
   227  058D                     	;# 
   228  058E                     	;# 
   229  058F                     	;# 
   230  058F                     	;# 
   231  0590                     	;# 
   232  0591                     	;# 
   233  0592                     	;# 
   234  0593                     	;# 
   235  059C                     	;# 
   236  059C                     	;# 
   237  059D                     	;# 
   238  059D                     	;# 
   239  059E                     	;# 
   240  059F                     	;# 
   241  060C                     	;# 
   242  060D                     	;# 
   243  060E                     	;# 
   244  060F                     	;# 
   245  0610                     	;# 
   246  0611                     	;# 
   247  0612                     	;# 
   248  0613                     	;# 
   249  0614                     	;# 
   250  070C                     	;# 
   251  070D                     	;# 
   252  070E                     	;# 
   253  070F                     	;# 
   254  0710                     	;# 
   255  0711                     	;# 
   256  0712                     	;# 
   257  0713                     	;# 
   258  0716                     	;# 
   259  0717                     	;# 
   260  0718                     	;# 
   261  0719                     	;# 
   262  071A                     	;# 
   263  071B                     	;# 
   264  071C                     	;# 
   265  071D                     	;# 
   266  0796                     	;# 
   267  0797                     	;# 
   268  0798                     	;# 
   269  0799                     	;# 
   270  079A                     	;# 
   271  079B                     	;# 
   272  080C                     	;# 
   273  080D                     	;# 
   274  080E                     	;# 
   275  080F                     	;# 
   276  0810                     	;# 
   277  0811                     	;# 
   278  0812                     	;# 
   279  0813                     	;# 
   280  0814                     	;# 
   281  081A                     	;# 
   282  081A                     	;# 
   283  081B                     	;# 
   284  081C                     	;# 
   285  081C                     	;# 
   286  081D                     	;# 
   287  081E                     	;# 
   288  081F                     	;# 
   289  088C                     	;# 
   290  088D                     	;# 
   291  088E                     	;# 
   292  088F                     	;# 
   293  0890                     	;# 
   294  0891                     	;# 
   295  0892                     	;# 
   296  0893                     	;# 
   297  0895                     	;# 
   298  0896                     	;# 
   299  090C                     	;# 
   300  090E                     	;# 
   301  090F                     	;# 
   302  091F                     	;# 
   303  098F                     	;# 
   304  098F                     	;# 
   305  0990                     	;# 
   306  0991                     	;# 
   307  0992                     	;# 
   308  0993                     	;# 
   309  0994                     	;# 
   310  0995                     	;# 
   311  0996                     	;# 
   312  0997                     	;# 
   313  0A19                     	;# 
   314  0A19                     	;# 
   315  0A1A                     	;# 
   316  0A1A                     	;# 
   317  0A1B                     	;# 
   318  0A1B                     	;# 
   319  0A1B                     	;# 
   320  0A1C                     	;# 
   321  0A1C                     	;# 
   322  0A1D                     	;# 
   323  0A1D                     	;# 
   324  0A1E                     	;# 
   325  0A1E                     	;# 
   326  0A1F                     	;# 
   327  0A1F                     	;# 
   328  0A1F                     	;# 
   329  1E0F                     	;# 
   330  1E10                     	;# 
   331  1E11                     	;# 
   332  1E12                     	;# 
   333  1E13                     	;# 
   334  1E14                     	;# 
   335  1E15                     	;# 
   336  1E16                     	;# 
   337  1E17                     	;# 
   338  1E18                     	;# 
   339  1E19                     	;# 
   340  1E1A                     	;# 
   341  1E1B                     	;# 
   342  1E1C                     	;# 
   343  1E1D                     	;# 
   344  1E1E                     	;# 
   345  1E1F                     	;# 
   346  1E20                     	;# 
   347  1E21                     	;# 
   348  1E22                     	;# 
   349  1E23                     	;# 
   350  1E24                     	;# 
   351  1E25                     	;# 
   352  1E26                     	;# 
   353  1E27                     	;# 
   354  1E28                     	;# 
   355  1E29                     	;# 
   356  1E2A                     	;# 
   357  1E2B                     	;# 
   358  1E2C                     	;# 
   359  1E2D                     	;# 
   360  1E2E                     	;# 
   361  1E2F                     	;# 
   362  1E30                     	;# 
   363  1E31                     	;# 
   364  1E32                     	;# 
   365  1E33                     	;# 
   366  1E34                     	;# 
   367  1E35                     	;# 
   368  1E36                     	;# 
   369  1E37                     	;# 
   370  1E8F                     	;# 
   371  1E90                     	;# 
   372  1E91                     	;# 
   373  1E92                     	;# 
   374  1E93                     	;# 
   375  1E9C                     	;# 
   376  1EA1                     	;# 
   377  1EA2                     	;# 
   378  1EB1                     	;# 
   379  1EBB                     	;# 
   380  1EBC                     	;# 
   381  1EBD                     	;# 
   382  1EBE                     	;# 
   383  1EC3                     	;# 
   384  1EC5                     	;# 
   385  1EC6                     	;# 
   386  1EC7                     	;# 
   387  1EC8                     	;# 
   388  1EC9                     	;# 
   389  1ECA                     	;# 
   390  1ECB                     	;# 
   391  1ECC                     	;# 
   392  1ECD                     	;# 
   393  1ECE                     	;# 
   394  1F10                     	;# 
   395  1F11                     	;# 
   396  1F12                     	;# 
   397  1F13                     	;# 
   398  1F14                     	;# 
   399  1F15                     	;# 
   400  1F16                     	;# 
   401  1F17                     	;# 
   402  1F18                     	;# 
   403  1F19                     	;# 
   404  1F1A                     	;# 
   405  1F1B                     	;# 
   406  1F1C                     	;# 
   407  1F1D                     	;# 
   408  1F1E                     	;# 
   409  1F1F                     	;# 
   410  1F20                     	;# 
   411  1F21                     	;# 
   412  1F22                     	;# 
   413  1F23                     	;# 
   414  1F24                     	;# 
   415  1F25                     	;# 
   416  1F26                     	;# 
   417  1F27                     	;# 
   418  1F38                     	;# 
   419  1F39                     	;# 
   420  1F3A                     	;# 
   421  1F3B                     	;# 
   422  1F3C                     	;# 
   423  1F3D                     	;# 
   424  1F3E                     	;# 
   425  1F3F                     	;# 
   426  1F43                     	;# 
   427  1F44                     	;# 
   428  1F45                     	;# 
   429  1F46                     	;# 
   430  1F47                     	;# 
   431  1F48                     	;# 
   432  1F49                     	;# 
   433  1F4A                     	;# 
   434  1F4E                     	;# 
   435  1F4F                     	;# 
   436  1F50                     	;# 
   437  1F51                     	;# 
   438  1F52                     	;# 
   439  1F53                     	;# 
   440  1F54                     	;# 
   441  1F55                     	;# 
   442  1F65                     	;# 
   443  1F68                     	;# 
   444  1F69                     	;# 
   445  1F6A                     	;# 
   446  1F6B                     	;# 
   447  1FE4                     	;# 
   448  1FE5                     	;# 
   449  1FE6                     	;# 
   450  1FE7                     	;# 
   451  1FE8                     	;# 
   452  1FE8                     	;# 
   453  1FE9                     	;# 
   454  1FEA                     	;# 
   455  1FEA                     	;# 
   456  1FEB                     	;# 
   457  1FED                     	;# 
   458  1FEE                     	;# 
   459  1FEF                     	;# 
   460  0000                     	;# 
   461  0001                     	;# 
   462  0002                     	;# 
   463  0003                     	;# 
   464  0004                     	;# 
   465  0005                     	;# 
   466  0006                     	;# 
   467  0007                     	;# 
   468  0008                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  000D                     	;# 
   474  000E                     	;# 
   475  0010                     	;# 
   476  0012                     	;# 
   477  0013                     	;# 
   478  0014                     	;# 
   479  0016                     	;# 
   480  0018                     	;# 
   481  0019                     	;# 
   482  001A                     	;# 
   483  009B                     	;# 
   484  009B                     	;# 
   485  009C                     	;# 
   486  009D                     	;# 
   487  009E                     	;# 
   488  009F                     	;# 
   489  0119                     	;# 
   490  0119                     	;# 
   491  0119                     	;# 
   492  011A                     	;# 
   493  011A                     	;# 
   494  011A                     	;# 
   495  011B                     	;# 
   496  011B                     	;# 
   497  011B                     	;# 
   498  011B                     	;# 
   499  011B                     	;# 
   500  011C                     	;# 
   501  011C                     	;# 
   502  011C                     	;# 
   503  011D                     	;# 
   504  011D                     	;# 
   505  011D                     	;# 
   506  011E                     	;# 
   507  011E                     	;# 
   508  011E                     	;# 
   509  011F                     	;# 
   510  011F                     	;# 
   511  011F                     	;# 
   512  011F                     	;# 
   513  011F                     	;# 
   514  018C                     	;# 
   515  018D                     	;# 
   516  018E                     	;# 
   517  018F                     	;# 
   518  0190                     	;# 
   519  0191                     	;# 
   520  0192                     	;# 
   521  0196                     	;# 
   522  0197                     	;# 
   523  0198                     	;# 
   524  0199                     	;# 
   525  019A                     	;# 
   526  019B                     	;# 
   527  019C                     	;# 
   528  020C                     	;# 
   529  020C                     	;# 
   530  020D                     	;# 
   531  020E                     	;# 
   532  020F                     	;# 
   533  020F                     	;# 
   534  0210                     	;# 
   535  0210                     	;# 
   536  0211                     	;# 
   537  0211                     	;# 
   538  028C                     	;# 
   539  028C                     	;# 
   540  028D                     	;# 
   541  028D                     	;# 
   542  028E                     	;# 
   543  028F                     	;# 
   544  0290                     	;# 
   545  0291                     	;# 
   546  030C                     	;# 
   547  030C                     	;# 
   548  030D                     	;# 
   549  030E                     	;# 
   550  030F                     	;# 
   551  0310                     	;# 
   552  0310                     	;# 
   553  0311                     	;# 
   554  0312                     	;# 
   555  0313                     	;# 
   556  0314                     	;# 
   557  0314                     	;# 
   558  0315                     	;# 
   559  0316                     	;# 
   560  0318                     	;# 
   561  0318                     	;# 
   562  0319                     	;# 
   563  031A                     	;# 
   564  031C                     	;# 
   565  031C                     	;# 
   566  031D                     	;# 
   567  031E                     	;# 
   568  038C                     	;# 
   569  038C                     	;# 
   570  038D                     	;# 
   571  038E                     	;# 
   572  058C                     	;# 
   573  058C                     	;# 
   574  058D                     	;# 
   575  058E                     	;# 
   576  058F                     	;# 
   577  058F                     	;# 
   578  0590                     	;# 
   579  0591                     	;# 
   580  0592                     	;# 
   581  0593                     	;# 
   582  059C                     	;# 
   583  059C                     	;# 
   584  059D                     	;# 
   585  059D                     	;# 
   586  059E                     	;# 
   587  059F                     	;# 
   588  060C                     	;# 
   589  060D                     	;# 
   590  060E                     	;# 
   591  060F                     	;# 
   592  0610                     	;# 
   593  0611                     	;# 
   594  0612                     	;# 
   595  0613                     	;# 
   596  0614                     	;# 
   597  070C                     	;# 
   598  070D                     	;# 
   599  070E                     	;# 
   600  070F                     	;# 
   601  0710                     	;# 
   602  0711                     	;# 
   603  0712                     	;# 
   604  0713                     	;# 
   605  0716                     	;# 
   606  0717                     	;# 
   607  0718                     	;# 
   608  0719                     	;# 
   609  071A                     	;# 
   610  071B                     	;# 
   611  071C                     	;# 
   612  071D                     	;# 
   613  0796                     	;# 
   614  0797                     	;# 
   615  0798                     	;# 
   616  0799                     	;# 
   617  079A                     	;# 
   618  079B                     	;# 
   619  080C                     	;# 
   620  080D                     	;# 
   621  080E                     	;# 
   622  080F                     	;# 
   623  0810                     	;# 
   624  0811                     	;# 
   625  0812                     	;# 
   626  0813                     	;# 
   627  0814                     	;# 
   628  081A                     	;# 
   629  081A                     	;# 
   630  081B                     	;# 
   631  081C                     	;# 
   632  081C                     	;# 
   633  081D                     	;# 
   634  081E                     	;# 
   635  081F                     	;# 
   636  088C                     	;# 
   637  088D                     	;# 
   638  088E                     	;# 
   639  088F                     	;# 
   640  0890                     	;# 
   641  0891                     	;# 
   642  0892                     	;# 
   643  0893                     	;# 
   644  0895                     	;# 
   645  0896                     	;# 
   646  090C                     	;# 
   647  090E                     	;# 
   648  090F                     	;# 
   649  091F                     	;# 
   650  098F                     	;# 
   651  098F                     	;# 
   652  0990                     	;# 
   653  0991                     	;# 
   654  0992                     	;# 
   655  0993                     	;# 
   656  0994                     	;# 
   657  0995                     	;# 
   658  0996                     	;# 
   659  0997                     	;# 
   660  0A19                     	;# 
   661  0A19                     	;# 
   662  0A1A                     	;# 
   663  0A1A                     	;# 
   664  0A1B                     	;# 
   665  0A1B                     	;# 
   666  0A1B                     	;# 
   667  0A1C                     	;# 
   668  0A1C                     	;# 
   669  0A1D                     	;# 
   670  0A1D                     	;# 
   671  0A1E                     	;# 
   672  0A1E                     	;# 
   673  0A1F                     	;# 
   674  0A1F                     	;# 
   675  0A1F                     	;# 
   676  1E0F                     	;# 
   677  1E10                     	;# 
   678  1E11                     	;# 
   679  1E12                     	;# 
   680  1E13                     	;# 
   681  1E14                     	;# 
   682  1E15                     	;# 
   683  1E16                     	;# 
   684  1E17                     	;# 
   685  1E18                     	;# 
   686  1E19                     	;# 
   687  1E1A                     	;# 
   688  1E1B                     	;# 
   689  1E1C                     	;# 
   690  1E1D                     	;# 
   691  1E1E                     	;# 
   692  1E1F                     	;# 
   693  1E20                     	;# 
   694  1E21                     	;# 
   695  1E22                     	;# 
   696  1E23                     	;# 
   697  1E24                     	;# 
   698  1E25                     	;# 
   699  1E26                     	;# 
   700  1E27                     	;# 
   701  1E28                     	;# 
   702  1E29                     	;# 
   703  1E2A                     	;# 
   704  1E2B                     	;# 
   705  1E2C                     	;# 
   706  1E2D                     	;# 
   707  1E2E                     	;# 
   708  1E2F                     	;# 
   709  1E30                     	;# 
   710  1E31                     	;# 
   711  1E32                     	;# 
   712  1E33                     	;# 
   713  1E34                     	;# 
   714  1E35                     	;# 
   715  1E36                     	;# 
   716  1E37                     	;# 
   717  1E8F                     	;# 
   718  1E90                     	;# 
   719  1E91                     	;# 
   720  1E92                     	;# 
   721  1E93                     	;# 
   722  1E9C                     	;# 
   723  1EA1                     	;# 
   724  1EA2                     	;# 
   725  1EB1                     	;# 
   726  1EBB                     	;# 
   727  1EBC                     	;# 
   728  1EBD                     	;# 
   729  1EBE                     	;# 
   730  1EC3                     	;# 
   731  1EC5                     	;# 
   732  1EC6                     	;# 
   733  1EC7                     	;# 
   734  1EC8                     	;# 
   735  1EC9                     	;# 
   736  1ECA                     	;# 
   737  1ECB                     	;# 
   738  1ECC                     	;# 
   739  1ECD                     	;# 
   740  1ECE                     	;# 
   741  1F10                     	;# 
   742  1F11                     	;# 
   743  1F12                     	;# 
   744  1F13                     	;# 
   745  1F14                     	;# 
   746  1F15                     	;# 
   747  1F16                     	;# 
   748  1F17                     	;# 
   749  1F18                     	;# 
   750  1F19                     	;# 
   751  1F1A                     	;# 
   752  1F1B                     	;# 
   753  1F1C                     	;# 
   754  1F1D                     	;# 
   755  1F1E                     	;# 
   756  1F1F                     	;# 
   757  1F20                     	;# 
   758  1F21                     	;# 
   759  1F22                     	;# 
   760  1F23                     	;# 
   761  1F24                     	;# 
   762  1F25                     	;# 
   763  1F26                     	;# 
   764  1F27                     	;# 
   765  1F38                     	;# 
   766  1F39                     	;# 
   767  1F3A                     	;# 
   768  1F3B                     	;# 
   769  1F3C                     	;# 
   770  1F3D                     	;# 
   771  1F3E                     	;# 
   772  1F3F                     	;# 
   773  1F43                     	;# 
   774  1F44                     	;# 
   775  1F45                     	;# 
   776  1F46                     	;# 
   777  1F47                     	;# 
   778  1F48                     	;# 
   779  1F49                     	;# 
   780  1F4A                     	;# 
   781  1F4E                     	;# 
   782  1F4F                     	;# 
   783  1F50                     	;# 
   784  1F51                     	;# 
   785  1F52                     	;# 
   786  1F53                     	;# 
   787  1F54                     	;# 
   788  1F55                     	;# 
   789  1F65                     	;# 
   790  1F68                     	;# 
   791  1F69                     	;# 
   792  1F6A                     	;# 
   793  1F6B                     	;# 
   794  1FE4                     	;# 
   795  1FE5                     	;# 
   796  1FE6                     	;# 
   797  1FE7                     	;# 
   798  1FE8                     	;# 
   799  1FE8                     	;# 
   800  1FE9                     	;# 
   801  1FEA                     	;# 
   802  1FEA                     	;# 
   803  1FEB                     	;# 
   804  1FED                     	;# 
   805  1FEE                     	;# 
   806  1FEF                     	;# 
   807  0000                     	;# 
   808  0001                     	;# 
   809  0002                     	;# 
   810  0003                     	;# 
   811  0004                     	;# 
   812  0005                     	;# 
   813  0006                     	;# 
   814  0007                     	;# 
   815  0008                     	;# 
   816  0009                     	;# 
   817  000A                     	;# 
   818  000B                     	;# 
   819  000C                     	;# 
   820  000D                     	;# 
   821  000E                     	;# 
   822  0010                     	;# 
   823  0012                     	;# 
   824  0013                     	;# 
   825  0014                     	;# 
   826  0016                     	;# 
   827  0018                     	;# 
   828  0019                     	;# 
   829  001A                     	;# 
   830  009B                     	;# 
   831  009B                     	;# 
   832  009C                     	;# 
   833  009D                     	;# 
   834  009E                     	;# 
   835  009F                     	;# 
   836  0119                     	;# 
   837  0119                     	;# 
   838  0119                     	;# 
   839  011A                     	;# 
   840  011A                     	;# 
   841  011A                     	;# 
   842  011B                     	;# 
   843  011B                     	;# 
   844  011B                     	;# 
   845  011B                     	;# 
   846  011B                     	;# 
   847  011C                     	;# 
   848  011C                     	;# 
   849  011C                     	;# 
   850  011D                     	;# 
   851  011D                     	;# 
   852  011D                     	;# 
   853  011E                     	;# 
   854  011E                     	;# 
   855  011E                     	;# 
   856  011F                     	;# 
   857  011F                     	;# 
   858  011F                     	;# 
   859  011F                     	;# 
   860  011F                     	;# 
   861  018C                     	;# 
   862  018D                     	;# 
   863  018E                     	;# 
   864  018F                     	;# 
   865  0190                     	;# 
   866  0191                     	;# 
   867  0192                     	;# 
   868  0196                     	;# 
   869  0197                     	;# 
   870  0198                     	;# 
   871  0199                     	;# 
   872  019A                     	;# 
   873  019B                     	;# 
   874  019C                     	;# 
   875  020C                     	;# 
   876  020C                     	;# 
   877  020D                     	;# 
   878  020E                     	;# 
   879  020F                     	;# 
   880  020F                     	;# 
   881  0210                     	;# 
   882  0210                     	;# 
   883  0211                     	;# 
   884  0211                     	;# 
   885  028C                     	;# 
   886  028C                     	;# 
   887  028D                     	;# 
   888  028D                     	;# 
   889  028E                     	;# 
   890  028F                     	;# 
   891  0290                     	;# 
   892  0291                     	;# 
   893  030C                     	;# 
   894  030C                     	;# 
   895  030D                     	;# 
   896  030E                     	;# 
   897  030F                     	;# 
   898  0310                     	;# 
   899  0310                     	;# 
   900  0311                     	;# 
   901  0312                     	;# 
   902  0313                     	;# 
   903  0314                     	;# 
   904  0314                     	;# 
   905  0315                     	;# 
   906  0316                     	;# 
   907  0318                     	;# 
   908  0318                     	;# 
   909  0319                     	;# 
   910  031A                     	;# 
   911  031C                     	;# 
   912  031C                     	;# 
   913  031D                     	;# 
   914  031E                     	;# 
   915  038C                     	;# 
   916  038C                     	;# 
   917  038D                     	;# 
   918  038E                     	;# 
   919  058C                     	;# 
   920  058C                     	;# 
   921  058D                     	;# 
   922  058E                     	;# 
   923  058F                     	;# 
   924  058F                     	;# 
   925  0590                     	;# 
   926  0591                     	;# 
   927  0592                     	;# 
   928  0593                     	;# 
   929  059C                     	;# 
   930  059C                     	;# 
   931  059D                     	;# 
   932  059D                     	;# 
   933  059E                     	;# 
   934  059F                     	;# 
   935  060C                     	;# 
   936  060D                     	;# 
   937  060E                     	;# 
   938  060F                     	;# 
   939  0610                     	;# 
   940  0611                     	;# 
   941  0612                     	;# 
   942  0613                     	;# 
   943  0614                     	;# 
   944  070C                     	;# 
   945  070D                     	;# 
   946  070E                     	;# 
   947  070F                     	;# 
   948  0710                     	;# 
   949  0711                     	;# 
   950  0712                     	;# 
   951  0713                     	;# 
   952  0716                     	;# 
   953  0717                     	;# 
   954  0718                     	;# 
   955  0719                     	;# 
   956  071A                     	;# 
   957  071B                     	;# 
   958  071C                     	;# 
   959  071D                     	;# 
   960  0796                     	;# 
   961  0797                     	;# 
   962  0798                     	;# 
   963  0799                     	;# 
   964  079A                     	;# 
   965  079B                     	;# 
   966  080C                     	;# 
   967  080D                     	;# 
   968  080E                     	;# 
   969  080F                     	;# 
   970  0810                     	;# 
   971  0811                     	;# 
   972  0812                     	;# 
   973  0813                     	;# 
   974  0814                     	;# 
   975  081A                     	;# 
   976  081A                     	;# 
   977  081B                     	;# 
   978  081C                     	;# 
   979  081C                     	;# 
   980  081D                     	;# 
   981  081E                     	;# 
   982  081F                     	;# 
   983  088C                     	;# 
   984  088D                     	;# 
   985  088E                     	;# 
   986  088F                     	;# 
   987  0890                     	;# 
   988  0891                     	;# 
   989  0892                     	;# 
   990  0893                     	;# 
   991  0895                     	;# 
   992  0896                     	;# 
   993  090C                     	;# 
   994  090E                     	;# 
   995  090F                     	;# 
   996  091F                     	;# 
   997  098F                     	;# 
   998  098F                     	;# 
   999  0990                     	;# 
  1000  0991                     	;# 
  1001  0992                     	;# 
  1002  0993                     	;# 
  1003  0994                     	;# 
  1004  0995                     	;# 
  1005  0996                     	;# 
  1006  0997                     	;# 
  1007  0A19                     	;# 
  1008  0A19                     	;# 
  1009  0A1A                     	;# 
  1010  0A1A                     	;# 
  1011  0A1B                     	;# 
  1012  0A1B                     	;# 
  1013  0A1B                     	;# 
  1014  0A1C                     	;# 
  1015  0A1C                     	;# 
  1016  0A1D                     	;# 
  1017  0A1D                     	;# 
  1018  0A1E                     	;# 
  1019  0A1E                     	;# 
  1020  0A1F                     	;# 
  1021  0A1F                     	;# 
  1022  0A1F                     	;# 
  1023  1E0F                     	;# 
  1024  1E10                     	;# 
  1025  1E11                     	;# 
  1026  1E12                     	;# 
  1027  1E13                     	;# 
  1028  1E14                     	;# 
  1029  1E15                     	;# 
  1030  1E16                     	;# 
  1031  1E17                     	;# 
  1032  1E18                     	;# 
  1033  1E19                     	;# 
  1034  1E1A                     	;# 
  1035  1E1B                     	;# 
  1036  1E1C                     	;# 
  1037  1E1D                     	;# 
  1038  1E1E                     	;# 
  1039  1E1F                     	;# 
  1040  1E20                     	;# 
  1041  1E21                     	;# 
  1042  1E22                     	;# 
  1043  1E23                     	;# 
  1044  1E24                     	;# 
  1045  1E25                     	;# 
  1046  1E26                     	;# 
  1047  1E27                     	;# 
  1048  1E28                     	;# 
  1049  1E29                     	;# 
  1050  1E2A                     	;# 
  1051  1E2B                     	;# 
  1052  1E2C                     	;# 
  1053  1E2D                     	;# 
  1054  1E2E                     	;# 
  1055  1E2F                     	;# 
  1056  1E30                     	;# 
  1057  1E31                     	;# 
  1058  1E32                     	;# 
  1059  1E33                     	;# 
  1060  1E34                     	;# 
  1061  1E35                     	;# 
  1062  1E36                     	;# 
  1063  1E37                     	;# 
  1064  1E8F                     	;# 
  1065  1E90                     	;# 
  1066  1E91                     	;# 
  1067  1E92                     	;# 
  1068  1E93                     	;# 
  1069  1E9C                     	;# 
  1070  1EA1                     	;# 
  1071  1EA2                     	;# 
  1072  1EB1                     	;# 
  1073  1EBB                     	;# 
  1074  1EBC                     	;# 
  1075  1EBD                     	;# 
  1076  1EBE                     	;# 
  1077  1EC3                     	;# 
  1078  1EC5                     	;# 
  1079  1EC6                     	;# 
  1080  1EC7                     	;# 
  1081  1EC8                     	;# 
  1082  1EC9                     	;# 
  1083  1ECA                     	;# 
  1084  1ECB                     	;# 
  1085  1ECC                     	;# 
  1086  1ECD                     	;# 
  1087  1ECE                     	;# 
  1088  1F10                     	;# 
  1089  1F11                     	;# 
  1090  1F12                     	;# 
  1091  1F13                     	;# 
  1092  1F14                     	;# 
  1093  1F15                     	;# 
  1094  1F16                     	;# 
  1095  1F17                     	;# 
  1096  1F18                     	;# 
  1097  1F19                     	;# 
  1098  1F1A                     	;# 
  1099  1F1B                     	;# 
  1100  1F1C                     	;# 
  1101  1F1D                     	;# 
  1102  1F1E                     	;# 
  1103  1F1F                     	;# 
  1104  1F20                     	;# 
  1105  1F21                     	;# 
  1106  1F22                     	;# 
  1107  1F23                     	;# 
  1108  1F24                     	;# 
  1109  1F25                     	;# 
  1110  1F26                     	;# 
  1111  1F27                     	;# 
  1112  1F38                     	;# 
  1113  1F39                     	;# 
  1114  1F3A                     	;# 
  1115  1F3B                     	;# 
  1116  1F3C                     	;# 
  1117  1F3D                     	;# 
  1118  1F3E                     	;# 
  1119  1F3F                     	;# 
  1120  1F43                     	;# 
  1121  1F44                     	;# 
  1122  1F45                     	;# 
  1123  1F46                     	;# 
  1124  1F47                     	;# 
  1125  1F48                     	;# 
  1126  1F49                     	;# 
  1127  1F4A                     	;# 
  1128  1F4E                     	;# 
  1129  1F4F                     	;# 
  1130  1F50                     	;# 
  1131  1F51                     	;# 
  1132  1F52                     	;# 
  1133  1F53                     	;# 
  1134  1F54                     	;# 
  1135  1F55                     	;# 
  1136  1F65                     	;# 
  1137  1F68                     	;# 
  1138  1F69                     	;# 
  1139  1F6A                     	;# 
  1140  1F6B                     	;# 
  1141  1FE4                     	;# 
  1142  1FE5                     	;# 
  1143  1FE6                     	;# 
  1144  1FE7                     	;# 
  1145  1FE8                     	;# 
  1146  1FE8                     	;# 
  1147  1FE9                     	;# 
  1148  1FEA                     	;# 
  1149  1FEA                     	;# 
  1150  1FEB                     	;# 
  1151  1FED                     	;# 
  1152  1FEE                     	;# 
  1153  1FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000D                     	;# 
  1168  000E                     	;# 
  1169  0010                     	;# 
  1170  0012                     	;# 
  1171  0013                     	;# 
  1172  0014                     	;# 
  1173  0016                     	;# 
  1174  0018                     	;# 
  1175  0019                     	;# 
  1176  001A                     	;# 
  1177  009B                     	;# 
  1178  009B                     	;# 
  1179  009C                     	;# 
  1180  009D                     	;# 
  1181  009E                     	;# 
  1182  009F                     	;# 
  1183  0119                     	;# 
  1184  0119                     	;# 
  1185  0119                     	;# 
  1186  011A                     	;# 
  1187  011A                     	;# 
  1188  011A                     	;# 
  1189  011B                     	;# 
  1190  011B                     	;# 
  1191  011B                     	;# 
  1192  011B                     	;# 
  1193  011B                     	;# 
  1194  011C                     	;# 
  1195  011C                     	;# 
  1196  011C                     	;# 
  1197  011D                     	;# 
  1198  011D                     	;# 
  1199  011D                     	;# 
  1200  011E                     	;# 
  1201  011E                     	;# 
  1202  011E                     	;# 
  1203  011F                     	;# 
  1204  011F                     	;# 
  1205  011F                     	;# 
  1206  011F                     	;# 
  1207  011F                     	;# 
  1208  018C                     	;# 
  1209  018D                     	;# 
  1210  018E                     	;# 
  1211  018F                     	;# 
  1212  0190                     	;# 
  1213  0191                     	;# 
  1214  0192                     	;# 
  1215  0196                     	;# 
  1216  0197                     	;# 
  1217  0198                     	;# 
  1218  0199                     	;# 
  1219  019A                     	;# 
  1220  019B                     	;# 
  1221  019C                     	;# 
  1222  020C                     	;# 
  1223  020C                     	;# 
  1224  020D                     	;# 
  1225  020E                     	;# 
  1226  020F                     	;# 
  1227  020F                     	;# 
  1228  0210                     	;# 
  1229  0210                     	;# 
  1230  0211                     	;# 
  1231  0211                     	;# 
  1232  028C                     	;# 
  1233  028C                     	;# 
  1234  028D                     	;# 
  1235  028D                     	;# 
  1236  028E                     	;# 
  1237  028F                     	;# 
  1238  0290                     	;# 
  1239  0291                     	;# 
  1240  030C                     	;# 
  1241  030C                     	;# 
  1242  030D                     	;# 
  1243  030E                     	;# 
  1244  030F                     	;# 
  1245  0310                     	;# 
  1246  0310                     	;# 
  1247  0311                     	;# 
  1248  0312                     	;# 
  1249  0313                     	;# 
  1250  0314                     	;# 
  1251  0314                     	;# 
  1252  0315                     	;# 
  1253  0316                     	;# 
  1254  0318                     	;# 
  1255  0318                     	;# 
  1256  0319                     	;# 
  1257  031A                     	;# 
  1258  031C                     	;# 
  1259  031C                     	;# 
  1260  031D                     	;# 
  1261  031E                     	;# 
  1262  038C                     	;# 
  1263  038C                     	;# 
  1264  038D                     	;# 
  1265  038E                     	;# 
  1266  058C                     	;# 
  1267  058C                     	;# 
  1268  058D                     	;# 
  1269  058E                     	;# 
  1270  058F                     	;# 
  1271  058F                     	;# 
  1272  0590                     	;# 
  1273  0591                     	;# 
  1274  0592                     	;# 
  1275  0593                     	;# 
  1276  059C                     	;# 
  1277  059C                     	;# 
  1278  059D                     	;# 
  1279  059D                     	;# 
  1280  059E                     	;# 
  1281  059F                     	;# 
  1282  060C                     	;# 
  1283  060D                     	;# 
  1284  060E                     	;# 
  1285  060F                     	;# 
  1286  0610                     	;# 
  1287  0611                     	;# 
  1288  0612                     	;# 
  1289  0613                     	;# 
  1290  0614                     	;# 
  1291  070C                     	;# 
  1292  070D                     	;# 
  1293  070E                     	;# 
  1294  070F                     	;# 
  1295  0710                     	;# 
  1296  0711                     	;# 
  1297  0712                     	;# 
  1298  0713                     	;# 
  1299  0716                     	;# 
  1300  0717                     	;# 
  1301  0718                     	;# 
  1302  0719                     	;# 
  1303  071A                     	;# 
  1304  071B                     	;# 
  1305  071C                     	;# 
  1306  071D                     	;# 
  1307  0796                     	;# 
  1308  0797                     	;# 
  1309  0798                     	;# 
  1310  0799                     	;# 
  1311  079A                     	;# 
  1312  079B                     	;# 
  1313  080C                     	;# 
  1314  080D                     	;# 
  1315  080E                     	;# 
  1316  080F                     	;# 
  1317  0810                     	;# 
  1318  0811                     	;# 
  1319  0812                     	;# 
  1320  0813                     	;# 
  1321  0814                     	;# 
  1322  081A                     	;# 
  1323  081A                     	;# 
  1324  081B                     	;# 
  1325  081C                     	;# 
  1326  081C                     	;# 
  1327  081D                     	;# 
  1328  081E                     	;# 
  1329  081F                     	;# 
  1330  088C                     	;# 
  1331  088D                     	;# 
  1332  088E                     	;# 
  1333  088F                     	;# 
  1334  0890                     	;# 
  1335  0891                     	;# 
  1336  0892                     	;# 
  1337  0893                     	;# 
  1338  0895                     	;# 
  1339  0896                     	;# 
  1340  090C                     	;# 
  1341  090E                     	;# 
  1342  090F                     	;# 
  1343  091F                     	;# 
  1344  098F                     	;# 
  1345  098F                     	;# 
  1346  0990                     	;# 
  1347  0991                     	;# 
  1348  0992                     	;# 
  1349  0993                     	;# 
  1350  0994                     	;# 
  1351  0995                     	;# 
  1352  0996                     	;# 
  1353  0997                     	;# 
  1354  0A19                     	;# 
  1355  0A19                     	;# 
  1356  0A1A                     	;# 
  1357  0A1A                     	;# 
  1358  0A1B                     	;# 
  1359  0A1B                     	;# 
  1360  0A1B                     	;# 
  1361  0A1C                     	;# 
  1362  0A1C                     	;# 
  1363  0A1D                     	;# 
  1364  0A1D                     	;# 
  1365  0A1E                     	;# 
  1366  0A1E                     	;# 
  1367  0A1F                     	;# 
  1368  0A1F                     	;# 
  1369  0A1F                     	;# 
  1370  1E0F                     	;# 
  1371  1E10                     	;# 
  1372  1E11                     	;# 
  1373  1E12                     	;# 
  1374  1E13                     	;# 
  1375  1E14                     	;# 
  1376  1E15                     	;# 
  1377  1E16                     	;# 
  1378  1E17                     	;# 
  1379  1E18                     	;# 
  1380  1E19                     	;# 
  1381  1E1A                     	;# 
  1382  1E1B                     	;# 
  1383  1E1C                     	;# 
  1384  1E1D                     	;# 
  1385  1E1E                     	;# 
  1386  1E1F                     	;# 
  1387  1E20                     	;# 
  1388  1E21                     	;# 
  1389  1E22                     	;# 
  1390  1E23                     	;# 
  1391  1E24                     	;# 
  1392  1E25                     	;# 
  1393  1E26                     	;# 
  1394  1E27                     	;# 
  1395  1E28                     	;# 
  1396  1E29                     	;# 
  1397  1E2A                     	;# 
  1398  1E2B                     	;# 
  1399  1E2C                     	;# 
  1400  1E2D                     	;# 
  1401  1E2E                     	;# 
  1402  1E2F                     	;# 
  1403  1E30                     	;# 
  1404  1E31                     	;# 
  1405  1E32                     	;# 
  1406  1E33                     	;# 
  1407  1E34                     	;# 
  1408  1E35                     	;# 
  1409  1E36                     	;# 
  1410  1E37                     	;# 
  1411  1E8F                     	;# 
  1412  1E90                     	;# 
  1413  1E91                     	;# 
  1414  1E92                     	;# 
  1415  1E93                     	;# 
  1416  1E9C                     	;# 
  1417  1EA1                     	;# 
  1418  1EA2                     	;# 
  1419  1EB1                     	;# 
  1420  1EBB                     	;# 
  1421  1EBC                     	;# 
  1422  1EBD                     	;# 
  1423  1EBE                     	;# 
  1424  1EC3                     	;# 
  1425  1EC5                     	;# 
  1426  1EC6                     	;# 
  1427  1EC7                     	;# 
  1428  1EC8                     	;# 
  1429  1EC9                     	;# 
  1430  1ECA                     	;# 
  1431  1ECB                     	;# 
  1432  1ECC                     	;# 
  1433  1ECD                     	;# 
  1434  1ECE                     	;# 
  1435  1F10                     	;# 
  1436  1F11                     	;# 
  1437  1F12                     	;# 
  1438  1F13                     	;# 
  1439  1F14                     	;# 
  1440  1F15                     	;# 
  1441  1F16                     	;# 
  1442  1F17                     	;# 
  1443  1F18                     	;# 
  1444  1F19                     	;# 
  1445  1F1A                     	;# 
  1446  1F1B                     	;# 
  1447  1F1C                     	;# 
  1448  1F1D                     	;# 
  1449  1F1E                     	;# 
  1450  1F1F                     	;# 
  1451  1F20                     	;# 
  1452  1F21                     	;# 
  1453  1F22                     	;# 
  1454  1F23                     	;# 
  1455  1F24                     	;# 
  1456  1F25                     	;# 
  1457  1F26                     	;# 
  1458  1F27                     	;# 
  1459  1F38                     	;# 
  1460  1F39                     	;# 
  1461  1F3A                     	;# 
  1462  1F3B                     	;# 
  1463  1F3C                     	;# 
  1464  1F3D                     	;# 
  1465  1F3E                     	;# 
  1466  1F3F                     	;# 
  1467  1F43                     	;# 
  1468  1F44                     	;# 
  1469  1F45                     	;# 
  1470  1F46                     	;# 
  1471  1F47                     	;# 
  1472  1F48                     	;# 
  1473  1F49                     	;# 
  1474  1F4A                     	;# 
  1475  1F4E                     	;# 
  1476  1F4F                     	;# 
  1477  1F50                     	;# 
  1478  1F51                     	;# 
  1479  1F52                     	;# 
  1480  1F53                     	;# 
  1481  1F54                     	;# 
  1482  1F55                     	;# 
  1483  1F65                     	;# 
  1484  1F68                     	;# 
  1485  1F69                     	;# 
  1486  1F6A                     	;# 
  1487  1F6B                     	;# 
  1488  1FE4                     	;# 
  1489  1FE5                     	;# 
  1490  1FE6                     	;# 
  1491  1FE7                     	;# 
  1492  1FE8                     	;# 
  1493  1FE8                     	;# 
  1494  1FE9                     	;# 
  1495  1FEA                     	;# 
  1496  1FEA                     	;# 
  1497  1FEB                     	;# 
  1498  1FED                     	;# 
  1499  1FEE                     	;# 
  1500  1FEF                     	;# 
  1501  0000                     	;# 
  1502  0001                     	;# 
  1503  0002                     	;# 
  1504  0003                     	;# 
  1505  0004                     	;# 
  1506  0005                     	;# 
  1507  0006                     	;# 
  1508  0007                     	;# 
  1509  0008                     	;# 
  1510  0009                     	;# 
  1511  000A                     	;# 
  1512  000B                     	;# 
  1513  000C                     	;# 
  1514  000D                     	;# 
  1515  000E                     	;# 
  1516  0010                     	;# 
  1517  0012                     	;# 
  1518  0013                     	;# 
  1519  0014                     	;# 
  1520  0016                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  009B                     	;# 
  1525  009B                     	;# 
  1526  009C                     	;# 
  1527  009D                     	;# 
  1528  009E                     	;# 
  1529  009F                     	;# 
  1530  0119                     	;# 
  1531  0119                     	;# 
  1532  0119                     	;# 
  1533  011A                     	;# 
  1534  011A                     	;# 
  1535  011A                     	;# 
  1536  011B                     	;# 
  1537  011B                     	;# 
  1538  011B                     	;# 
  1539  011B                     	;# 
  1540  011B                     	;# 
  1541  011C                     	;# 
  1542  011C                     	;# 
  1543  011C                     	;# 
  1544  011D                     	;# 
  1545  011D                     	;# 
  1546  011D                     	;# 
  1547  011E                     	;# 
  1548  011E                     	;# 
  1549  011E                     	;# 
  1550  011F                     	;# 
  1551  011F                     	;# 
  1552  011F                     	;# 
  1553  011F                     	;# 
  1554  011F                     	;# 
  1555  018C                     	;# 
  1556  018D                     	;# 
  1557  018E                     	;# 
  1558  018F                     	;# 
  1559  0190                     	;# 
  1560  0191                     	;# 
  1561  0192                     	;# 
  1562  0196                     	;# 
  1563  0197                     	;# 
  1564  0198                     	;# 
  1565  0199                     	;# 
  1566  019A                     	;# 
  1567  019B                     	;# 
  1568  019C                     	;# 
  1569  020C                     	;# 
  1570  020C                     	;# 
  1571  020D                     	;# 
  1572  020E                     	;# 
  1573  020F                     	;# 
  1574  020F                     	;# 
  1575  0210                     	;# 
  1576  0210                     	;# 
  1577  0211                     	;# 
  1578  0211                     	;# 
  1579  028C                     	;# 
  1580  028C                     	;# 
  1581  028D                     	;# 
  1582  028D                     	;# 
  1583  028E                     	;# 
  1584  028F                     	;# 
  1585  0290                     	;# 
  1586  0291                     	;# 
  1587  030C                     	;# 
  1588  030C                     	;# 
  1589  030D                     	;# 
  1590  030E                     	;# 
  1591  030F                     	;# 
  1592  0310                     	;# 
  1593  0310                     	;# 
  1594  0311                     	;# 
  1595  0312                     	;# 
  1596  0313                     	;# 
  1597  0314                     	;# 
  1598  0314                     	;# 
  1599  0315                     	;# 
  1600  0316                     	;# 
  1601  0318                     	;# 
  1602  0318                     	;# 
  1603  0319                     	;# 
  1604  031A                     	;# 
  1605  031C                     	;# 
  1606  031C                     	;# 
  1607  031D                     	;# 
  1608  031E                     	;# 
  1609  038C                     	;# 
  1610  038C                     	;# 
  1611  038D                     	;# 
  1612  038E                     	;# 
  1613  058C                     	;# 
  1614  058C                     	;# 
  1615  058D                     	;# 
  1616  058E                     	;# 
  1617  058F                     	;# 
  1618  058F                     	;# 
  1619  0590                     	;# 
  1620  0591                     	;# 
  1621  0592                     	;# 
  1622  0593                     	;# 
  1623  059C                     	;# 
  1624  059C                     	;# 
  1625  059D                     	;# 
  1626  059D                     	;# 
  1627  059E                     	;# 
  1628  059F                     	;# 
  1629  060C                     	;# 
  1630  060D                     	;# 
  1631  060E                     	;# 
  1632  060F                     	;# 
  1633  0610                     	;# 
  1634  0611                     	;# 
  1635  0612                     	;# 
  1636  0613                     	;# 
  1637  0614                     	;# 
  1638  070C                     	;# 
  1639  070D                     	;# 
  1640  070E                     	;# 
  1641  070F                     	;# 
  1642  0710                     	;# 
  1643  0711                     	;# 
  1644  0712                     	;# 
  1645  0713                     	;# 
  1646  0716                     	;# 
  1647  0717                     	;# 
  1648  0718                     	;# 
  1649  0719                     	;# 
  1650  071A                     	;# 
  1651  071B                     	;# 
  1652  071C                     	;# 
  1653  071D                     	;# 
  1654  0796                     	;# 
  1655  0797                     	;# 
  1656  0798                     	;# 
  1657  0799                     	;# 
  1658  079A                     	;# 
  1659  079B                     	;# 
  1660  080C                     	;# 
  1661  080D                     	;# 
  1662  080E                     	;# 
  1663  080F                     	;# 
  1664  0810                     	;# 
  1665  0811                     	;# 
  1666  0812                     	;# 
  1667  0813                     	;# 
  1668  0814                     	;# 
  1669  081A                     	;# 
  1670  081A                     	;# 
  1671  081B                     	;# 
  1672  081C                     	;# 
  1673  081C                     	;# 
  1674  081D                     	;# 
  1675  081E                     	;# 
  1676  081F                     	;# 
  1677  088C                     	;# 
  1678  088D                     	;# 
  1679  088E                     	;# 
  1680  088F                     	;# 
  1681  0890                     	;# 
  1682  0891                     	;# 
  1683  0892                     	;# 
  1684  0893                     	;# 
  1685  0895                     	;# 
  1686  0896                     	;# 
  1687  090C                     	;# 
  1688  090E                     	;# 
  1689  090F                     	;# 
  1690  091F                     	;# 
  1691  098F                     	;# 
  1692  098F                     	;# 
  1693  0990                     	;# 
  1694  0991                     	;# 
  1695  0992                     	;# 
  1696  0993                     	;# 
  1697  0994                     	;# 
  1698  0995                     	;# 
  1699  0996                     	;# 
  1700  0997                     	;# 
  1701  0A19                     	;# 
  1702  0A19                     	;# 
  1703  0A1A                     	;# 
  1704  0A1A                     	;# 
  1705  0A1B                     	;# 
  1706  0A1B                     	;# 
  1707  0A1B                     	;# 
  1708  0A1C                     	;# 
  1709  0A1C                     	;# 
  1710  0A1D                     	;# 
  1711  0A1D                     	;# 
  1712  0A1E                     	;# 
  1713  0A1E                     	;# 
  1714  0A1F                     	;# 
  1715  0A1F                     	;# 
  1716  0A1F                     	;# 
  1717  1E0F                     	;# 
  1718  1E10                     	;# 
  1719  1E11                     	;# 
  1720  1E12                     	;# 
  1721  1E13                     	;# 
  1722  1E14                     	;# 
  1723  1E15                     	;# 
  1724  1E16                     	;# 
  1725  1E17                     	;# 
  1726  1E18                     	;# 
  1727  1E19                     	;# 
  1728  1E1A                     	;# 
  1729  1E1B                     	;# 
  1730  1E1C                     	;# 
  1731  1E1D                     	;# 
  1732  1E1E                     	;# 
  1733  1E1F                     	;# 
  1734  1E20                     	;# 
  1735  1E21                     	;# 
  1736  1E22                     	;# 
  1737  1E23                     	;# 
  1738  1E24                     	;# 
  1739  1E25                     	;# 
  1740  1E26                     	;# 
  1741  1E27                     	;# 
  1742  1E28                     	;# 
  1743  1E29                     	;# 
  1744  1E2A                     	;# 
  1745  1E2B                     	;# 
  1746  1E2C                     	;# 
  1747  1E2D                     	;# 
  1748  1E2E                     	;# 
  1749  1E2F                     	;# 
  1750  1E30                     	;# 
  1751  1E31                     	;# 
  1752  1E32                     	;# 
  1753  1E33                     	;# 
  1754  1E34                     	;# 
  1755  1E35                     	;# 
  1756  1E36                     	;# 
  1757  1E37                     	;# 
  1758  1E8F                     	;# 
  1759  1E90                     	;# 
  1760  1E91                     	;# 
  1761  1E92                     	;# 
  1762  1E93                     	;# 
  1763  1E9C                     	;# 
  1764  1EA1                     	;# 
  1765  1EA2                     	;# 
  1766  1EB1                     	;# 
  1767  1EBB                     	;# 
  1768  1EBC                     	;# 
  1769  1EBD                     	;# 
  1770  1EBE                     	;# 
  1771  1EC3                     	;# 
  1772  1EC5                     	;# 
  1773  1EC6                     	;# 
  1774  1EC7                     	;# 
  1775  1EC8                     	;# 
  1776  1EC9                     	;# 
  1777  1ECA                     	;# 
  1778  1ECB                     	;# 
  1779  1ECC                     	;# 
  1780  1ECD                     	;# 
  1781  1ECE                     	;# 
  1782  1F10                     	;# 
  1783  1F11                     	;# 
  1784  1F12                     	;# 
  1785  1F13                     	;# 
  1786  1F14                     	;# 
  1787  1F15                     	;# 
  1788  1F16                     	;# 
  1789  1F17                     	;# 
  1790  1F18                     	;# 
  1791  1F19                     	;# 
  1792  1F1A                     	;# 
  1793  1F1B                     	;# 
  1794  1F1C                     	;# 
  1795  1F1D                     	;# 
  1796  1F1E                     	;# 
  1797  1F1F                     	;# 
  1798  1F20                     	;# 
  1799  1F21                     	;# 
  1800  1F22                     	;# 
  1801  1F23                     	;# 
  1802  1F24                     	;# 
  1803  1F25                     	;# 
  1804  1F26                     	;# 
  1805  1F27                     	;# 
  1806  1F38                     	;# 
  1807  1F39                     	;# 
  1808  1F3A                     	;# 
  1809  1F3B                     	;# 
  1810  1F3C                     	;# 
  1811  1F3D                     	;# 
  1812  1F3E                     	;# 
  1813  1F3F                     	;# 
  1814  1F43                     	;# 
  1815  1F44                     	;# 
  1816  1F45                     	;# 
  1817  1F46                     	;# 
  1818  1F47                     	;# 
  1819  1F48                     	;# 
  1820  1F49                     	;# 
  1821  1F4A                     	;# 
  1822  1F4E                     	;# 
  1823  1F4F                     	;# 
  1824  1F50                     	;# 
  1825  1F51                     	;# 
  1826  1F52                     	;# 
  1827  1F53                     	;# 
  1828  1F54                     	;# 
  1829  1F55                     	;# 
  1830  1F65                     	;# 
  1831  1F68                     	;# 
  1832  1F69                     	;# 
  1833  1F6A                     	;# 
  1834  1F6B                     	;# 
  1835  1FE4                     	;# 
  1836  1FE5                     	;# 
  1837  1FE6                     	;# 
  1838  1FE7                     	;# 
  1839  1FE8                     	;# 
  1840  1FE8                     	;# 
  1841  1FE9                     	;# 
  1842  1FEA                     	;# 
  1843  1FEA                     	;# 
  1844  1FEB                     	;# 
  1845  1FED                     	;# 
  1846  1FEE                     	;# 
  1847  1FEF                     	;# 
  1848  0000                     	;# 
  1849  0001                     	;# 
  1850  0002                     	;# 
  1851  0003                     	;# 
  1852  0004                     	;# 
  1853  0005                     	;# 
  1854  0006                     	;# 
  1855  0007                     	;# 
  1856  0008                     	;# 
  1857  0009                     	;# 
  1858  000A                     	;# 
  1859  000B                     	;# 
  1860  000C                     	;# 
  1861  000D                     	;# 
  1862  000E                     	;# 
  1863  0010                     	;# 
  1864  0012                     	;# 
  1865  0013                     	;# 
  1866  0014                     	;# 
  1867  0016                     	;# 
  1868  0018                     	;# 
  1869  0019                     	;# 
  1870  001A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  009F                     	;# 
  1877  0119                     	;# 
  1878  0119                     	;# 
  1879  0119                     	;# 
  1880  011A                     	;# 
  1881  011A                     	;# 
  1882  011A                     	;# 
  1883  011B                     	;# 
  1884  011B                     	;# 
  1885  011B                     	;# 
  1886  011B                     	;# 
  1887  011B                     	;# 
  1888  011C                     	;# 
  1889  011C                     	;# 
  1890  011C                     	;# 
  1891  011D                     	;# 
  1892  011D                     	;# 
  1893  011D                     	;# 
  1894  011E                     	;# 
  1895  011E                     	;# 
  1896  011E                     	;# 
  1897  011F                     	;# 
  1898  011F                     	;# 
  1899  011F                     	;# 
  1900  011F                     	;# 
  1901  011F                     	;# 
  1902  018C                     	;# 
  1903  018D                     	;# 
  1904  018E                     	;# 
  1905  018F                     	;# 
  1906  0190                     	;# 
  1907  0191                     	;# 
  1908  0192                     	;# 
  1909  0196                     	;# 
  1910  0197                     	;# 
  1911  0198                     	;# 
  1912  0199                     	;# 
  1913  019A                     	;# 
  1914  019B                     	;# 
  1915  019C                     	;# 
  1916  020C                     	;# 
  1917  020C                     	;# 
  1918  020D                     	;# 
  1919  020E                     	;# 
  1920  020F                     	;# 
  1921  020F                     	;# 
  1922  0210                     	;# 
  1923  0210                     	;# 
  1924  0211                     	;# 
  1925  0211                     	;# 
  1926  028C                     	;# 
  1927  028C                     	;# 
  1928  028D                     	;# 
  1929  028D                     	;# 
  1930  028E                     	;# 
  1931  028F                     	;# 
  1932  0290                     	;# 
  1933  0291                     	;# 
  1934  030C                     	;# 
  1935  030C                     	;# 
  1936  030D                     	;# 
  1937  030E                     	;# 
  1938  030F                     	;# 
  1939  0310                     	;# 
  1940  0310                     	;# 
  1941  0311                     	;# 
  1942  0312                     	;# 
  1943  0313                     	;# 
  1944  0314                     	;# 
  1945  0314                     	;# 
  1946  0315                     	;# 
  1947  0316                     	;# 
  1948  0318                     	;# 
  1949  0318                     	;# 
  1950  0319                     	;# 
  1951  031A                     	;# 
  1952  031C                     	;# 
  1953  031C                     	;# 
  1954  031D                     	;# 
  1955  031E                     	;# 
  1956  038C                     	;# 
  1957  038C                     	;# 
  1958  038D                     	;# 
  1959  038E                     	;# 
  1960  058C                     	;# 
  1961  058C                     	;# 
  1962  058D                     	;# 
  1963  058E                     	;# 
  1964  058F                     	;# 
  1965  058F                     	;# 
  1966  0590                     	;# 
  1967  0591                     	;# 
  1968  0592                     	;# 
  1969  0593                     	;# 
  1970  059C                     	;# 
  1971  059C                     	;# 
  1972  059D                     	;# 
  1973  059D                     	;# 
  1974  059E                     	;# 
  1975  059F                     	;# 
  1976  060C                     	;# 
  1977  060D                     	;# 
  1978  060E                     	;# 
  1979  060F                     	;# 
  1980  0610                     	;# 
  1981  0611                     	;# 
  1982  0612                     	;# 
  1983  0613                     	;# 
  1984  0614                     	;# 
  1985  070C                     	;# 
  1986  070D                     	;# 
  1987  070E                     	;# 
  1988  070F                     	;# 
  1989  0710                     	;# 
  1990  0711                     	;# 
  1991  0712                     	;# 
  1992  0713                     	;# 
  1993  0716                     	;# 
  1994  0717                     	;# 
  1995  0718                     	;# 
  1996  0719                     	;# 
  1997  071A                     	;# 
  1998  071B                     	;# 
  1999  071C                     	;# 
  2000  071D                     	;# 
  2001  0796                     	;# 
  2002  0797                     	;# 
  2003  0798                     	;# 
  2004  0799                     	;# 
  2005  079A                     	;# 
  2006  079B                     	;# 
  2007  080C                     	;# 
  2008  080D                     	;# 
  2009  080E                     	;# 
  2010  080F                     	;# 
  2011  0810                     	;# 
  2012  0811                     	;# 
  2013  0812                     	;# 
  2014  0813                     	;# 
  2015  0814                     	;# 
  2016  081A                     	;# 
  2017  081A                     	;# 
  2018  081B                     	;# 
  2019  081C                     	;# 
  2020  081C                     	;# 
  2021  081D                     	;# 
  2022  081E                     	;# 
  2023  081F                     	;# 
  2024  088C                     	;# 
  2025  088D                     	;# 
  2026  088E                     	;# 
  2027  088F                     	;# 
  2028  0890                     	;# 
  2029  0891                     	;# 
  2030  0892                     	;# 
  2031  0893                     	;# 
  2032  0895                     	;# 
  2033  0896                     	;# 
  2034  090C                     	;# 
  2035  090E                     	;# 
  2036  090F                     	;# 
  2037  091F                     	;# 
  2038  098F                     	;# 
  2039  098F                     	;# 
  2040  0990                     	;# 
  2041  0991                     	;# 
  2042  0992                     	;# 
  2043  0993                     	;# 
  2044  0994                     	;# 
  2045  0995                     	;# 
  2046  0996                     	;# 
  2047  0997                     	;# 
  2048  0A19                     	;# 
  2049  0A19                     	;# 
  2050  0A1A                     	;# 
  2051  0A1A                     	;# 
  2052  0A1B                     	;# 
  2053  0A1B                     	;# 
  2054  0A1B                     	;# 
  2055  0A1C                     	;# 
  2056  0A1C                     	;# 
  2057  0A1D                     	;# 
  2058  0A1D                     	;# 
  2059  0A1E                     	;# 
  2060  0A1E                     	;# 
  2061  0A1F                     	;# 
  2062  0A1F                     	;# 
  2063  0A1F                     	;# 
  2064  1E0F                     	;# 
  2065  1E10                     	;# 
  2066  1E11                     	;# 
  2067  1E12                     	;# 
  2068  1E13                     	;# 
  2069  1E14                     	;# 
  2070  1E15                     	;# 
  2071  1E16                     	;# 
  2072  1E17                     	;# 
  2073  1E18                     	;# 
  2074  1E19                     	;# 
  2075  1E1A                     	;# 
  2076  1E1B                     	;# 
  2077  1E1C                     	;# 
  2078  1E1D                     	;# 
  2079  1E1E                     	;# 
  2080  1E1F                     	;# 
  2081  1E20                     	;# 
  2082  1E21                     	;# 
  2083  1E22                     	;# 
  2084  1E23                     	;# 
  2085  1E24                     	;# 
  2086  1E25                     	;# 
  2087  1E26                     	;# 
  2088  1E27                     	;# 
  2089  1E28                     	;# 
  2090  1E29                     	;# 
  2091  1E2A                     	;# 
  2092  1E2B                     	;# 
  2093  1E2C                     	;# 
  2094  1E2D                     	;# 
  2095  1E2E                     	;# 
  2096  1E2F                     	;# 
  2097  1E30                     	;# 
  2098  1E31                     	;# 
  2099  1E32                     	;# 
  2100  1E33                     	;# 
  2101  1E34                     	;# 
  2102  1E35                     	;# 
  2103  1E36                     	;# 
  2104  1E37                     	;# 
  2105  1E8F                     	;# 
  2106  1E90                     	;# 
  2107  1E91                     	;# 
  2108  1E92                     	;# 
  2109  1E93                     	;# 
  2110  1E9C                     	;# 
  2111  1EA1                     	;# 
  2112  1EA2                     	;# 
  2113  1EB1                     	;# 
  2114  1EBB                     	;# 
  2115  1EBC                     	;# 
  2116  1EBD                     	;# 
  2117  1EBE                     	;# 
  2118  1EC3                     	;# 
  2119  1EC5                     	;# 
  2120  1EC6                     	;# 
  2121  1EC7                     	;# 
  2122  1EC8                     	;# 
  2123  1EC9                     	;# 
  2124  1ECA                     	;# 
  2125  1ECB                     	;# 
  2126  1ECC                     	;# 
  2127  1ECD                     	;# 
  2128  1ECE                     	;# 
  2129  1F10                     	;# 
  2130  1F11                     	;# 
  2131  1F12                     	;# 
  2132  1F13                     	;# 
  2133  1F14                     	;# 
  2134  1F15                     	;# 
  2135  1F16                     	;# 
  2136  1F17                     	;# 
  2137  1F18                     	;# 
  2138  1F19                     	;# 
  2139  1F1A                     	;# 
  2140  1F1B                     	;# 
  2141  1F1C                     	;# 
  2142  1F1D                     	;# 
  2143  1F1E                     	;# 
  2144  1F1F                     	;# 
  2145  1F20                     	;# 
  2146  1F21                     	;# 
  2147  1F22                     	;# 
  2148  1F23                     	;# 
  2149  1F24                     	;# 
  2150  1F25                     	;# 
  2151  1F26                     	;# 
  2152  1F27                     	;# 
  2153  1F38                     	;# 
  2154  1F39                     	;# 
  2155  1F3A                     	;# 
  2156  1F3B                     	;# 
  2157  1F3C                     	;# 
  2158  1F3D                     	;# 
  2159  1F3E                     	;# 
  2160  1F3F                     	;# 
  2161  1F43                     	;# 
  2162  1F44                     	;# 
  2163  1F45                     	;# 
  2164  1F46                     	;# 
  2165  1F47                     	;# 
  2166  1F48                     	;# 
  2167  1F49                     	;# 
  2168  1F4A                     	;# 
  2169  1F4E                     	;# 
  2170  1F4F                     	;# 
  2171  1F50                     	;# 
  2172  1F51                     	;# 
  2173  1F52                     	;# 
  2174  1F53                     	;# 
  2175  1F54                     	;# 
  2176  1F55                     	;# 
  2177  1F65                     	;# 
  2178  1F68                     	;# 
  2179  1F69                     	;# 
  2180  1F6A                     	;# 
  2181  1F6B                     	;# 
  2182  1FE4                     	;# 
  2183  1FE5                     	;# 
  2184  1FE6                     	;# 
  2185  1FE7                     	;# 
  2186  1FE8                     	;# 
  2187  1FE8                     	;# 
  2188  1FE9                     	;# 
  2189  1FEA                     	;# 
  2190  1FEA                     	;# 
  2191  1FEB                     	;# 
  2192  1FED                     	;# 
  2193  1FEE                     	;# 
  2194  1FEF                     	;# 
  2195  0000                     	;# 
  2196  0001                     	;# 
  2197  0002                     	;# 
  2198  0003                     	;# 
  2199  0004                     	;# 
  2200  0005                     	;# 
  2201  0006                     	;# 
  2202  0007                     	;# 
  2203  0008                     	;# 
  2204  0009                     	;# 
  2205  000A                     	;# 
  2206  000B                     	;# 
  2207  000C                     	;# 
  2208  000D                     	;# 
  2209  000E                     	;# 
  2210  0010                     	;# 
  2211  0012                     	;# 
  2212  0013                     	;# 
  2213  0014                     	;# 
  2214  0016                     	;# 
  2215  0018                     	;# 
  2216  0019                     	;# 
  2217  001A                     	;# 
  2218  009B                     	;# 
  2219  009B                     	;# 
  2220  009C                     	;# 
  2221  009D                     	;# 
  2222  009E                     	;# 
  2223  009F                     	;# 
  2224  0119                     	;# 
  2225  0119                     	;# 
  2226  0119                     	;# 
  2227  011A                     	;# 
  2228  011A                     	;# 
  2229  011A                     	;# 
  2230  011B                     	;# 
  2231  011B                     	;# 
  2232  011B                     	;# 
  2233  011B                     	;# 
  2234  011B                     	;# 
  2235  011C                     	;# 
  2236  011C                     	;# 
  2237  011C                     	;# 
  2238  011D                     	;# 
  2239  011D                     	;# 
  2240  011D                     	;# 
  2241  011E                     	;# 
  2242  011E                     	;# 
  2243  011E                     	;# 
  2244  011F                     	;# 
  2245  011F                     	;# 
  2246  011F                     	;# 
  2247  011F                     	;# 
  2248  011F                     	;# 
  2249  018C                     	;# 
  2250  018D                     	;# 
  2251  018E                     	;# 
  2252  018F                     	;# 
  2253  0190                     	;# 
  2254  0191                     	;# 
  2255  0192                     	;# 
  2256  0196                     	;# 
  2257  0197                     	;# 
  2258  0198                     	;# 
  2259  0199                     	;# 
  2260  019A                     	;# 
  2261  019B                     	;# 
  2262  019C                     	;# 
  2263  020C                     	;# 
  2264  020C                     	;# 
  2265  020D                     	;# 
  2266  020E                     	;# 
  2267  020F                     	;# 
  2268  020F                     	;# 
  2269  0210                     	;# 
  2270  0210                     	;# 
  2271  0211                     	;# 
  2272  0211                     	;# 
  2273  028C                     	;# 
  2274  028C                     	;# 
  2275  028D                     	;# 
  2276  028D                     	;# 
  2277  028E                     	;# 
  2278  028F                     	;# 
  2279  0290                     	;# 
  2280  0291                     	;# 
  2281  030C                     	;# 
  2282  030C                     	;# 
  2283  030D                     	;# 
  2284  030E                     	;# 
  2285  030F                     	;# 
  2286  0310                     	;# 
  2287  0310                     	;# 
  2288  0311                     	;# 
  2289  0312                     	;# 
  2290  0313                     	;# 
  2291  0314                     	;# 
  2292  0314                     	;# 
  2293  0315                     	;# 
  2294  0316                     	;# 
  2295  0318                     	;# 
  2296  0318                     	;# 
  2297  0319                     	;# 
  2298  031A                     	;# 
  2299  031C                     	;# 
  2300  031C                     	;# 
  2301  031D                     	;# 
  2302  031E                     	;# 
  2303  038C                     	;# 
  2304  038C                     	;# 
  2305  038D                     	;# 
  2306  038E                     	;# 
  2307  058C                     	;# 
  2308  058C                     	;# 
  2309  058D                     	;# 
  2310  058E                     	;# 
  2311  058F                     	;# 
  2312  058F                     	;# 
  2313  0590                     	;# 
  2314  0591                     	;# 
  2315  0592                     	;# 
  2316  0593                     	;# 
  2317  059C                     	;# 
  2318  059C                     	;# 
  2319  059D                     	;# 
  2320  059D                     	;# 
  2321  059E                     	;# 
  2322  059F                     	;# 
  2323  060C                     	;# 
  2324  060D                     	;# 
  2325  060E                     	;# 
  2326  060F                     	;# 
  2327  0610                     	;# 
  2328  0611                     	;# 
  2329  0612                     	;# 
  2330  0613                     	;# 
  2331  0614                     	;# 
  2332  070C                     	;# 
  2333  070D                     	;# 
  2334  070E                     	;# 
  2335  070F                     	;# 
  2336  0710                     	;# 
  2337  0711                     	;# 
  2338  0712                     	;# 
  2339  0713                     	;# 
  2340  0716                     	;# 
  2341  0717                     	;# 
  2342  0718                     	;# 
  2343  0719                     	;# 
  2344  071A                     	;# 
  2345  071B                     	;# 
  2346  071C                     	;# 
  2347  071D                     	;# 
  2348  0796                     	;# 
  2349  0797                     	;# 
  2350  0798                     	;# 
  2351  0799                     	;# 
  2352  079A                     	;# 
  2353  079B                     	;# 
  2354  080C                     	;# 
  2355  080D                     	;# 
  2356  080E                     	;# 
  2357  080F                     	;# 
  2358  0810                     	;# 
  2359  0811                     	;# 
  2360  0812                     	;# 
  2361  0813                     	;# 
  2362  0814                     	;# 
  2363  081A                     	;# 
  2364  081A                     	;# 
  2365  081B                     	;# 
  2366  081C                     	;# 
  2367  081C                     	;# 
  2368  081D                     	;# 
  2369  081E                     	;# 
  2370  081F                     	;# 
  2371  088C                     	;# 
  2372  088D                     	;# 
  2373  088E                     	;# 
  2374  088F                     	;# 
  2375  0890                     	;# 
  2376  0891                     	;# 
  2377  0892                     	;# 
  2378  0893                     	;# 
  2379  0895                     	;# 
  2380  0896                     	;# 
  2381  090C                     	;# 
  2382  090E                     	;# 
  2383  090F                     	;# 
  2384  091F                     	;# 
  2385  098F                     	;# 
  2386  098F                     	;# 
  2387  0990                     	;# 
  2388  0991                     	;# 
  2389  0992                     	;# 
  2390  0993                     	;# 
  2391  0994                     	;# 
  2392  0995                     	;# 
  2393  0996                     	;# 
  2394  0997                     	;# 
  2395  0A19                     	;# 
  2396  0A19                     	;# 
  2397  0A1A                     	;# 
  2398  0A1A                     	;# 
  2399  0A1B                     	;# 
  2400  0A1B                     	;# 
  2401  0A1B                     	;# 
  2402  0A1C                     	;# 
  2403  0A1C                     	;# 
  2404  0A1D                     	;# 
  2405  0A1D                     	;# 
  2406  0A1E                     	;# 
  2407  0A1E                     	;# 
  2408  0A1F                     	;# 
  2409  0A1F                     	;# 
  2410  0A1F                     	;# 
  2411  1E0F                     	;# 
  2412  1E10                     	;# 
  2413  1E11                     	;# 
  2414  1E12                     	;# 
  2415  1E13                     	;# 
  2416  1E14                     	;# 
  2417  1E15                     	;# 
  2418  1E16                     	;# 
  2419  1E17                     	;# 
  2420  1E18                     	;# 
  2421  1E19                     	;# 
  2422  1E1A                     	;# 
  2423  1E1B                     	;# 
  2424  1E1C                     	;# 
  2425  1E1D                     	;# 
  2426  1E1E                     	;# 
  2427  1E1F                     	;# 
  2428  1E20                     	;# 
  2429  1E21                     	;# 
  2430  1E22                     	;# 
  2431  1E23                     	;# 
  2432  1E24                     	;# 
  2433  1E25                     	;# 
  2434  1E26                     	;# 
  2435  1E27                     	;# 
  2436  1E28                     	;# 
  2437  1E29                     	;# 
  2438  1E2A                     	;# 
  2439  1E2B                     	;# 
  2440  1E2C                     	;# 
  2441  1E2D                     	;# 
  2442  1E2E                     	;# 
  2443  1E2F                     	;# 
  2444  1E30                     	;# 
  2445  1E31                     	;# 
  2446  1E32                     	;# 
  2447  1E33                     	;# 
  2448  1E34                     	;# 
  2449  1E35                     	;# 
  2450  1E36                     	;# 
  2451  1E37                     	;# 
  2452  1E8F                     	;# 
  2453  1E90                     	;# 
  2454  1E91                     	;# 
  2455  1E92                     	;# 
  2456  1E93                     	;# 
  2457  1E9C                     	;# 
  2458  1EA1                     	;# 
  2459  1EA2                     	;# 
  2460  1EB1                     	;# 
  2461  1EBB                     	;# 
  2462  1EBC                     	;# 
  2463  1EBD                     	;# 
  2464  1EBE                     	;# 
  2465  1EC3                     	;# 
  2466  1EC5                     	;# 
  2467  1EC6                     	;# 
  2468  1EC7                     	;# 
  2469  1EC8                     	;# 
  2470  1EC9                     	;# 
  2471  1ECA                     	;# 
  2472  1ECB                     	;# 
  2473  1ECC                     	;# 
  2474  1ECD                     	;# 
  2475  1ECE                     	;# 
  2476  1F10                     	;# 
  2477  1F11                     	;# 
  2478  1F12                     	;# 
  2479  1F13                     	;# 
  2480  1F14                     	;# 
  2481  1F15                     	;# 
  2482  1F16                     	;# 
  2483  1F17                     	;# 
  2484  1F18                     	;# 
  2485  1F19                     	;# 
  2486  1F1A                     	;# 
  2487  1F1B                     	;# 
  2488  1F1C                     	;# 
  2489  1F1D                     	;# 
  2490  1F1E                     	;# 
  2491  1F1F                     	;# 
  2492  1F20                     	;# 
  2493  1F21                     	;# 
  2494  1F22                     	;# 
  2495  1F23                     	;# 
  2496  1F24                     	;# 
  2497  1F25                     	;# 
  2498  1F26                     	;# 
  2499  1F27                     	;# 
  2500  1F38                     	;# 
  2501  1F39                     	;# 
  2502  1F3A                     	;# 
  2503  1F3B                     	;# 
  2504  1F3C                     	;# 
  2505  1F3D                     	;# 
  2506  1F3E                     	;# 
  2507  1F3F                     	;# 
  2508  1F43                     	;# 
  2509  1F44                     	;# 
  2510  1F45                     	;# 
  2511  1F46                     	;# 
  2512  1F47                     	;# 
  2513  1F48                     	;# 
  2514  1F49                     	;# 
  2515  1F4A                     	;# 
  2516  1F4E                     	;# 
  2517  1F4F                     	;# 
  2518  1F50                     	;# 
  2519  1F51                     	;# 
  2520  1F52                     	;# 
  2521  1F53                     	;# 
  2522  1F54                     	;# 
  2523  1F55                     	;# 
  2524  1F65                     	;# 
  2525  1F68                     	;# 
  2526  1F69                     	;# 
  2527  1F6A                     	;# 
  2528  1F6B                     	;# 
  2529  1FE4                     	;# 
  2530  1FE5                     	;# 
  2531  1FE6                     	;# 
  2532  1FE7                     	;# 
  2533  1FE8                     	;# 
  2534  1FE8                     	;# 
  2535  1FE9                     	;# 
  2536  1FEA                     	;# 
  2537  1FEA                     	;# 
  2538  1FEB                     	;# 
  2539  1FED                     	;# 
  2540  1FEE                     	;# 
  2541  1FEF                     	;# 
  2542  0000                     	;# 
  2543  0001                     	;# 
  2544  0002                     	;# 
  2545  0003                     	;# 
  2546  0004                     	;# 
  2547  0005                     	;# 
  2548  0006                     	;# 
  2549  0007                     	;# 
  2550  0008                     	;# 
  2551  0009                     	;# 
  2552  000A                     	;# 
  2553  000B                     	;# 
  2554  000C                     	;# 
  2555  000D                     	;# 
  2556  000E                     	;# 
  2557  0010                     	;# 
  2558  0012                     	;# 
  2559  0013                     	;# 
  2560  0014                     	;# 
  2561  0016                     	;# 
  2562  0018                     	;# 
  2563  0019                     	;# 
  2564  001A                     	;# 
  2565  009B                     	;# 
  2566  009B                     	;# 
  2567  009C                     	;# 
  2568  009D                     	;# 
  2569  009E                     	;# 
  2570  009F                     	;# 
  2571  0119                     	;# 
  2572  0119                     	;# 
  2573  0119                     	;# 
  2574  011A                     	;# 
  2575  011A                     	;# 
  2576  011A                     	;# 
  2577  011B                     	;# 
  2578  011B                     	;# 
  2579  011B                     	;# 
  2580  011B                     	;# 
  2581  011B                     	;# 
  2582  011C                     	;# 
  2583  011C                     	;# 
  2584  011C                     	;# 
  2585  011D                     	;# 
  2586  011D                     	;# 
  2587  011D                     	;# 
  2588  011E                     	;# 
  2589  011E                     	;# 
  2590  011E                     	;# 
  2591  011F                     	;# 
  2592  011F                     	;# 
  2593  011F                     	;# 
  2594  011F                     	;# 
  2595  011F                     	;# 
  2596  018C                     	;# 
  2597  018D                     	;# 
  2598  018E                     	;# 
  2599  018F                     	;# 
  2600  0190                     	;# 
  2601  0191                     	;# 
  2602  0192                     	;# 
  2603  0196                     	;# 
  2604  0197                     	;# 
  2605  0198                     	;# 
  2606  0199                     	;# 
  2607  019A                     	;# 
  2608  019B                     	;# 
  2609  019C                     	;# 
  2610  020C                     	;# 
  2611  020C                     	;# 
  2612  020D                     	;# 
  2613  020E                     	;# 
  2614  020F                     	;# 
  2615  020F                     	;# 
  2616  0210                     	;# 
  2617  0210                     	;# 
  2618  0211                     	;# 
  2619  0211                     	;# 
  2620  028C                     	;# 
  2621  028C                     	;# 
  2622  028D                     	;# 
  2623  028D                     	;# 
  2624  028E                     	;# 
  2625  028F                     	;# 
  2626  0290                     	;# 
  2627  0291                     	;# 
  2628  030C                     	;# 
  2629  030C                     	;# 
  2630  030D                     	;# 
  2631  030E                     	;# 
  2632  030F                     	;# 
  2633  0310                     	;# 
  2634  0310                     	;# 
  2635  0311                     	;# 
  2636  0312                     	;# 
  2637  0313                     	;# 
  2638  0314                     	;# 
  2639  0314                     	;# 
  2640  0315                     	;# 
  2641  0316                     	;# 
  2642  0318                     	;# 
  2643  0318                     	;# 
  2644  0319                     	;# 
  2645  031A                     	;# 
  2646  031C                     	;# 
  2647  031C                     	;# 
  2648  031D                     	;# 
  2649  031E                     	;# 
  2650  038C                     	;# 
  2651  038C                     	;# 
  2652  038D                     	;# 
  2653  038E                     	;# 
  2654  058C                     	;# 
  2655  058C                     	;# 
  2656  058D                     	;# 
  2657  058E                     	;# 
  2658  058F                     	;# 
  2659  058F                     	;# 
  2660  0590                     	;# 
  2661  0591                     	;# 
  2662  0592                     	;# 
  2663  0593                     	;# 
  2664  059C                     	;# 
  2665  059C                     	;# 
  2666  059D                     	;# 
  2667  059D                     	;# 
  2668  059E                     	;# 
  2669  059F                     	;# 
  2670  060C                     	;# 
  2671  060D                     	;# 
  2672  060E                     	;# 
  2673  060F                     	;# 
  2674  0610                     	;# 
  2675  0611                     	;# 
  2676  0612                     	;# 
  2677  0613                     	;# 
  2678  0614                     	;# 
  2679  070C                     	;# 
  2680  070D                     	;# 
  2681  070E                     	;# 
  2682  070F                     	;# 
  2683  0710                     	;# 
  2684  0711                     	;# 
  2685  0712                     	;# 
  2686  0713                     	;# 
  2687  0716                     	;# 
  2688  0717                     	;# 
  2689  0718                     	;# 
  2690  0719                     	;# 
  2691  071A                     	;# 
  2692  071B                     	;# 
  2693  071C                     	;# 
  2694  071D                     	;# 
  2695  0796                     	;# 
  2696  0797                     	;# 
  2697  0798                     	;# 
  2698  0799                     	;# 
  2699  079A                     	;# 
  2700  079B                     	;# 
  2701  080C                     	;# 
  2702  080D                     	;# 
  2703  080E                     	;# 
  2704  080F                     	;# 
  2705  0810                     	;# 
  2706  0811                     	;# 
  2707  0812                     	;# 
  2708  0813                     	;# 
  2709  0814                     	;# 
  2710  081A                     	;# 
  2711  081A                     	;# 
  2712  081B                     	;# 
  2713  081C                     	;# 
  2714  081C                     	;# 
  2715  081D                     	;# 
  2716  081E                     	;# 
  2717  081F                     	;# 
  2718  088C                     	;# 
  2719  088D                     	;# 
  2720  088E                     	;# 
  2721  088F                     	;# 
  2722  0890                     	;# 
  2723  0891                     	;# 
  2724  0892                     	;# 
  2725  0893                     	;# 
  2726  0895                     	;# 
  2727  0896                     	;# 
  2728  090C                     	;# 
  2729  090E                     	;# 
  2730  090F                     	;# 
  2731  091F                     	;# 
  2732  098F                     	;# 
  2733  098F                     	;# 
  2734  0990                     	;# 
  2735  0991                     	;# 
  2736  0992                     	;# 
  2737  0993                     	;# 
  2738  0994                     	;# 
  2739  0995                     	;# 
  2740  0996                     	;# 
  2741  0997                     	;# 
  2742  0A19                     	;# 
  2743  0A19                     	;# 
  2744  0A1A                     	;# 
  2745  0A1A                     	;# 
  2746  0A1B                     	;# 
  2747  0A1B                     	;# 
  2748  0A1B                     	;# 
  2749  0A1C                     	;# 
  2750  0A1C                     	;# 
  2751  0A1D                     	;# 
  2752  0A1D                     	;# 
  2753  0A1E                     	;# 
  2754  0A1E                     	;# 
  2755  0A1F                     	;# 
  2756  0A1F                     	;# 
  2757  0A1F                     	;# 
  2758  1E0F                     	;# 
  2759  1E10                     	;# 
  2760  1E11                     	;# 
  2761  1E12                     	;# 
  2762  1E13                     	;# 
  2763  1E14                     	;# 
  2764  1E15                     	;# 
  2765  1E16                     	;# 
  2766  1E17                     	;# 
  2767  1E18                     	;# 
  2768  1E19                     	;# 
  2769  1E1A                     	;# 
  2770  1E1B                     	;# 
  2771  1E1C                     	;# 
  2772  1E1D                     	;# 
  2773  1E1E                     	;# 
  2774  1E1F                     	;# 
  2775  1E20                     	;# 
  2776  1E21                     	;# 
  2777  1E22                     	;# 
  2778  1E23                     	;# 
  2779  1E24                     	;# 
  2780  1E25                     	;# 
  2781  1E26                     	;# 
  2782  1E27                     	;# 
  2783  1E28                     	;# 
  2784  1E29                     	;# 
  2785  1E2A                     	;# 
  2786  1E2B                     	;# 
  2787  1E2C                     	;# 
  2788  1E2D                     	;# 
  2789  1E2E                     	;# 
  2790  1E2F                     	;# 
  2791  1E30                     	;# 
  2792  1E31                     	;# 
  2793  1E32                     	;# 
  2794  1E33                     	;# 
  2795  1E34                     	;# 
  2796  1E35                     	;# 
  2797  1E36                     	;# 
  2798  1E37                     	;# 
  2799  1E8F                     	;# 
  2800  1E90                     	;# 
  2801  1E91                     	;# 
  2802  1E92                     	;# 
  2803  1E93                     	;# 
  2804  1E9C                     	;# 
  2805  1EA1                     	;# 
  2806  1EA2                     	;# 
  2807  1EB1                     	;# 
  2808  1EBB                     	;# 
  2809  1EBC                     	;# 
  2810  1EBD                     	;# 
  2811  1EBE                     	;# 
  2812  1EC3                     	;# 
  2813  1EC5                     	;# 
  2814  1EC6                     	;# 
  2815  1EC7                     	;# 
  2816  1EC8                     	;# 
  2817  1EC9                     	;# 
  2818  1ECA                     	;# 
  2819  1ECB                     	;# 
  2820  1ECC                     	;# 
  2821  1ECD                     	;# 
  2822  1ECE                     	;# 
  2823  1F10                     	;# 
  2824  1F11                     	;# 
  2825  1F12                     	;# 
  2826  1F13                     	;# 
  2827  1F14                     	;# 
  2828  1F15                     	;# 
  2829  1F16                     	;# 
  2830  1F17                     	;# 
  2831  1F18                     	;# 
  2832  1F19                     	;# 
  2833  1F1A                     	;# 
  2834  1F1B                     	;# 
  2835  1F1C                     	;# 
  2836  1F1D                     	;# 
  2837  1F1E                     	;# 
  2838  1F1F                     	;# 
  2839  1F20                     	;# 
  2840  1F21                     	;# 
  2841  1F22                     	;# 
  2842  1F23                     	;# 
  2843  1F24                     	;# 
  2844  1F25                     	;# 
  2845  1F26                     	;# 
  2846  1F27                     	;# 
  2847  1F38                     	;# 
  2848  1F39                     	;# 
  2849  1F3A                     	;# 
  2850  1F3B                     	;# 
  2851  1F3C                     	;# 
  2852  1F3D                     	;# 
  2853  1F3E                     	;# 
  2854  1F3F                     	;# 
  2855  1F43                     	;# 
  2856  1F44                     	;# 
  2857  1F45                     	;# 
  2858  1F46                     	;# 
  2859  1F47                     	;# 
  2860  1F48                     	;# 
  2861  1F49                     	;# 
  2862  1F4A                     	;# 
  2863  1F4E                     	;# 
  2864  1F4F                     	;# 
  2865  1F50                     	;# 
  2866  1F51                     	;# 
  2867  1F52                     	;# 
  2868  1F53                     	;# 
  2869  1F54                     	;# 
  2870  1F55                     	;# 
  2871  1F65                     	;# 
  2872  1F68                     	;# 
  2873  1F69                     	;# 
  2874  1F6A                     	;# 
  2875  1F6B                     	;# 
  2876  1FE4                     	;# 
  2877  1FE5                     	;# 
  2878  1FE6                     	;# 
  2879  1FE7                     	;# 
  2880  1FE8                     	;# 
  2881  1FE8                     	;# 
  2882  1FE9                     	;# 
  2883  1FEA                     	;# 
  2884  1FEA                     	;# 
  2885  1FEB                     	;# 
  2886  1FED                     	;# 
  2887  1FEE                     	;# 
  2888  1FEF                     	;# 
  2889  0000                     	;# 
  2890  0001                     	;# 
  2891  0002                     	;# 
  2892  0003                     	;# 
  2893  0004                     	;# 
  2894  0005                     	;# 
  2895  0006                     	;# 
  2896  0007                     	;# 
  2897  0008                     	;# 
  2898  0009                     	;# 
  2899  000A                     	;# 
  2900  000B                     	;# 
  2901  000C                     	;# 
  2902  000D                     	;# 
  2903  000E                     	;# 
  2904  0010                     	;# 
  2905  0012                     	;# 
  2906  0013                     	;# 
  2907  0014                     	;# 
  2908  0016                     	;# 
  2909  0018                     	;# 
  2910  0019                     	;# 
  2911  001A                     	;# 
  2912  009B                     	;# 
  2913  009B                     	;# 
  2914  009C                     	;# 
  2915  009D                     	;# 
  2916  009E                     	;# 
  2917  009F                     	;# 
  2918  0119                     	;# 
  2919  0119                     	;# 
  2920  0119                     	;# 
  2921  011A                     	;# 
  2922  011A                     	;# 
  2923  011A                     	;# 
  2924  011B                     	;# 
  2925  011B                     	;# 
  2926  011B                     	;# 
  2927  011B                     	;# 
  2928  011B                     	;# 
  2929  011C                     	;# 
  2930  011C                     	;# 
  2931  011C                     	;# 
  2932  011D                     	;# 
  2933  011D                     	;# 
  2934  011D                     	;# 
  2935  011E                     	;# 
  2936  011E                     	;# 
  2937  011E                     	;# 
  2938  011F                     	;# 
  2939  011F                     	;# 
  2940  011F                     	;# 
  2941  011F                     	;# 
  2942  011F                     	;# 
  2943  018C                     	;# 
  2944  018D                     	;# 
  2945  018E                     	;# 
  2946  018F                     	;# 
  2947  0190                     	;# 
  2948  0191                     	;# 
  2949  0192                     	;# 
  2950  0196                     	;# 
  2951  0197                     	;# 
  2952  0198                     	;# 
  2953  0199                     	;# 
  2954  019A                     	;# 
  2955  019B                     	;# 
  2956  019C                     	;# 
  2957  020C                     	;# 
  2958  020C                     	;# 
  2959  020D                     	;# 
  2960  020E                     	;# 
  2961  020F                     	;# 
  2962  020F                     	;# 
  2963  0210                     	;# 
  2964  0210                     	;# 
  2965  0211                     	;# 
  2966  0211                     	;# 
  2967  028C                     	;# 
  2968  028C                     	;# 
  2969  028D                     	;# 
  2970  028D                     	;# 
  2971  028E                     	;# 
  2972  028F                     	;# 
  2973  0290                     	;# 
  2974  0291                     	;# 
  2975  030C                     	;# 
  2976  030C                     	;# 
  2977  030D                     	;# 
  2978  030E                     	;# 
  2979  030F                     	;# 
  2980  0310                     	;# 
  2981  0310                     	;# 
  2982  0311                     	;# 
  2983  0312                     	;# 
  2984  0313                     	;# 
  2985  0314                     	;# 
  2986  0314                     	;# 
  2987  0315                     	;# 
  2988  0316                     	;# 
  2989  0318                     	;# 
  2990  0318                     	;# 
  2991  0319                     	;# 
  2992  031A                     	;# 
  2993  031C                     	;# 
  2994  031C                     	;# 
  2995  031D                     	;# 
  2996  031E                     	;# 
  2997  038C                     	;# 
  2998  038C                     	;# 
  2999  038D                     	;# 
  3000  038E                     	;# 
  3001  058C                     	;# 
  3002  058C                     	;# 
  3003  058D                     	;# 
  3004  058E                     	;# 
  3005  058F                     	;# 
  3006  058F                     	;# 
  3007  0590                     	;# 
  3008  0591                     	;# 
  3009  0592                     	;# 
  3010  0593                     	;# 
  3011  059C                     	;# 
  3012  059C                     	;# 
  3013  059D                     	;# 
  3014  059D                     	;# 
  3015  059E                     	;# 
  3016  059F                     	;# 
  3017  060C                     	;# 
  3018  060D                     	;# 
  3019  060E                     	;# 
  3020  060F                     	;# 
  3021  0610                     	;# 
  3022  0611                     	;# 
  3023  0612                     	;# 
  3024  0613                     	;# 
  3025  0614                     	;# 
  3026  070C                     	;# 
  3027  070D                     	;# 
  3028  070E                     	;# 
  3029  070F                     	;# 
  3030  0710                     	;# 
  3031  0711                     	;# 
  3032  0712                     	;# 
  3033  0713                     	;# 
  3034  0716                     	;# 
  3035  0717                     	;# 
  3036  0718                     	;# 
  3037  0719                     	;# 
  3038  071A                     	;# 
  3039  071B                     	;# 
  3040  071C                     	;# 
  3041  071D                     	;# 
  3042  0796                     	;# 
  3043  0797                     	;# 
  3044  0798                     	;# 
  3045  0799                     	;# 
  3046  079A                     	;# 
  3047  079B                     	;# 
  3048  080C                     	;# 
  3049  080D                     	;# 
  3050  080E                     	;# 
  3051  080F                     	;# 
  3052  0810                     	;# 
  3053  0811                     	;# 
  3054  0812                     	;# 
  3055  0813                     	;# 
  3056  0814                     	;# 
  3057  081A                     	;# 
  3058  081A                     	;# 
  3059  081B                     	;# 
  3060  081C                     	;# 
  3061  081C                     	;# 
  3062  081D                     	;# 
  3063  081E                     	;# 
  3064  081F                     	;# 
  3065  088C                     	;# 
  3066  088D                     	;# 
  3067  088E                     	;# 
  3068  088F                     	;# 
  3069  0890                     	;# 
  3070  0891                     	;# 
  3071  0892                     	;# 
  3072  0893                     	;# 
  3073  0895                     	;# 
  3074  0896                     	;# 
  3075  090C                     	;# 
  3076  090E                     	;# 
  3077  090F                     	;# 
  3078  091F                     	;# 
  3079  098F                     	;# 
  3080  098F                     	;# 
  3081  0990                     	;# 
  3082  0991                     	;# 
  3083  0992                     	;# 
  3084  0993                     	;# 
  3085  0994                     	;# 
  3086  0995                     	;# 
  3087  0996                     	;# 
  3088  0997                     	;# 
  3089  0A19                     	;# 
  3090  0A19                     	;# 
  3091  0A1A                     	;# 
  3092  0A1A                     	;# 
  3093  0A1B                     	;# 
  3094  0A1B                     	;# 
  3095  0A1B                     	;# 
  3096  0A1C                     	;# 
  3097  0A1C                     	;# 
  3098  0A1D                     	;# 
  3099  0A1D                     	;# 
  3100  0A1E                     	;# 
  3101  0A1E                     	;# 
  3102  0A1F                     	;# 
  3103  0A1F                     	;# 
  3104  0A1F                     	;# 
  3105  1E0F                     	;# 
  3106  1E10                     	;# 
  3107  1E11                     	;# 
  3108  1E12                     	;# 
  3109  1E13                     	;# 
  3110  1E14                     	;# 
  3111  1E15                     	;# 
  3112  1E16                     	;# 
  3113  1E17                     	;# 
  3114  1E18                     	;# 
  3115  1E19                     	;# 
  3116  1E1A                     	;# 
  3117  1E1B                     	;# 
  3118  1E1C                     	;# 
  3119  1E1D                     	;# 
  3120  1E1E                     	;# 
  3121  1E1F                     	;# 
  3122  1E20                     	;# 
  3123  1E21                     	;# 
  3124  1E22                     	;# 
  3125  1E23                     	;# 
  3126  1E24                     	;# 
  3127  1E25                     	;# 
  3128  1E26                     	;# 
  3129  1E27                     	;# 
  3130  1E28                     	;# 
  3131  1E29                     	;# 
  3132  1E2A                     	;# 
  3133  1E2B                     	;# 
  3134  1E2C                     	;# 
  3135  1E2D                     	;# 
  3136  1E2E                     	;# 
  3137  1E2F                     	;# 
  3138  1E30                     	;# 
  3139  1E31                     	;# 
  3140  1E32                     	;# 
  3141  1E33                     	;# 
  3142  1E34                     	;# 
  3143  1E35                     	;# 
  3144  1E36                     	;# 
  3145  1E37                     	;# 
  3146  1E8F                     	;# 
  3147  1E90                     	;# 
  3148  1E91                     	;# 
  3149  1E92                     	;# 
  3150  1E93                     	;# 
  3151  1E9C                     	;# 
  3152  1EA1                     	;# 
  3153  1EA2                     	;# 
  3154  1EB1                     	;# 
  3155  1EBB                     	;# 
  3156  1EBC                     	;# 
  3157  1EBD                     	;# 
  3158  1EBE                     	;# 
  3159  1EC3                     	;# 
  3160  1EC5                     	;# 
  3161  1EC6                     	;# 
  3162  1EC7                     	;# 
  3163  1EC8                     	;# 
  3164  1EC9                     	;# 
  3165  1ECA                     	;# 
  3166  1ECB                     	;# 
  3167  1ECC                     	;# 
  3168  1ECD                     	;# 
  3169  1ECE                     	;# 
  3170  1F10                     	;# 
  3171  1F11                     	;# 
  3172  1F12                     	;# 
  3173  1F13                     	;# 
  3174  1F14                     	;# 
  3175  1F15                     	;# 
  3176  1F16                     	;# 
  3177  1F17                     	;# 
  3178  1F18                     	;# 
  3179  1F19                     	;# 
  3180  1F1A                     	;# 
  3181  1F1B                     	;# 
  3182  1F1C                     	;# 
  3183  1F1D                     	;# 
  3184  1F1E                     	;# 
  3185  1F1F                     	;# 
  3186  1F20                     	;# 
  3187  1F21                     	;# 
  3188  1F22                     	;# 
  3189  1F23                     	;# 
  3190  1F24                     	;# 
  3191  1F25                     	;# 
  3192  1F26                     	;# 
  3193  1F27                     	;# 
  3194  1F38                     	;# 
  3195  1F39                     	;# 
  3196  1F3A                     	;# 
  3197  1F3B                     	;# 
  3198  1F3C                     	;# 
  3199  1F3D                     	;# 
  3200  1F3E                     	;# 
  3201  1F3F                     	;# 
  3202  1F43                     	;# 
  3203  1F44                     	;# 
  3204  1F45                     	;# 
  3205  1F46                     	;# 
  3206  1F47                     	;# 
  3207  1F48                     	;# 
  3208  1F49                     	;# 
  3209  1F4A                     	;# 
  3210  1F4E                     	;# 
  3211  1F4F                     	;# 
  3212  1F50                     	;# 
  3213  1F51                     	;# 
  3214  1F52                     	;# 
  3215  1F53                     	;# 
  3216  1F54                     	;# 
  3217  1F55                     	;# 
  3218  1F65                     	;# 
  3219  1F68                     	;# 
  3220  1F69                     	;# 
  3221  1F6A                     	;# 
  3222  1F6B                     	;# 
  3223  1FE4                     	;# 
  3224  1FE5                     	;# 
  3225  1FE6                     	;# 
  3226  1FE7                     	;# 
  3227  1FE8                     	;# 
  3228  1FE8                     	;# 
  3229  1FE9                     	;# 
  3230  1FEA                     	;# 
  3231  1FEA                     	;# 
  3232  1FEB                     	;# 
  3233  1FED                     	;# 
  3234  1FEE                     	;# 
  3235  1FEF                     	;# 
  3236                           
  3237                           	psect	idataBANK0
  3238  0003                     __pidataBANK0:	
  3239                           
  3240                           ;initializer for _gu8DoorState
  3241  0003  3401               	retlw	1
  3242                           
  3243                           	psect	idataBANK1
  3244  0002                     __pidataBANK1:	
  3245                           
  3246                           ;initializer for _gu8OldDoorState
  3247  0002  3403               	retlw	3
  3248                           
  3249                           	psect	nvBANK0
  3250  006E                     __pnvBANK0:	
  3251  006E                     _eusartTxBufferRemaining:	
  3252  006E                     	ds	1
  3253  000E                     _PORTCbits	set	14
  3254  000C                     _PORTA	set	12
  3255  000B                     _INTCONbits	set	11
  3256  000D                     _PORTBbits	set	13
  3257  000D                     _PORTB	set	13
  3258  000E                     _PORTC	set	14
  3259  0016                     _TRISE	set	22
  3260  0014                     _TRISC	set	20
  3261  0013                     _TRISB	set	19
  3262  0012                     _TRISA	set	18
  3263  001A                     _LATC	set	26
  3264  0019                     _LATB	set	25
  3265  0018                     _LATA	set	24
  3266  009D                     _ADCON0bits	set	157
  3267  009C                     _ADRESH	set	156
  3268  009B                     _ADRESL	set	155
  3269  009F                     _ADACT	set	159
  3270  009E                     _ADCON1	set	158
  3271  009D                     _ADCON0	set	157
  3272  0119                     _RC1REG	set	281
  3273  011D                     _RC1STAbits	set	285
  3274  011A                     _TX1REG	set	282
  3275  011C                     _SP1BRGH	set	284
  3276  011B                     _SP1BRGL	set	283
  3277  011E                     _TX1STA	set	286
  3278  011D                     _RC1STA	set	285
  3279  011F                     _BAUD1CON	set	287
  3280  059E                     _T0CON0bits	set	1438
  3281  059E                     _T0CON0	set	1438
  3282  059C                     _TMR0L	set	1436
  3283  059D                     _TMR0H	set	1437
  3284  059F                     _T0CON1	set	1439
  3285  070C                     _PIR0bits	set	1804
  3286  070F                     _PIR3bits	set	1807
  3287  0719                     _PIE3bits	set	1817
  3288  0716                     _PIE0bits	set	1814
  3289  079B                     _PMD5	set	1947
  3290  079A                     _PMD4	set	1946
  3291  0799                     _PMD3	set	1945
  3292  0798                     _PMD2	set	1944
  3293  0797                     _PMD1	set	1943
  3294  0796                     _PMD0	set	1942
  3295  0892                     _OSCTUNE	set	2194
  3296  0890                     _OSCSTAT	set	2192
  3297  0893                     _OSCFRQ	set	2195
  3298  0891                     _OSCEN	set	2193
  3299  088F                     _OSCCON3	set	2191
  3300  088D                     _OSCCON1	set	2189
  3301  090C                     _FVRCON	set	2316
  3302  1ECB                     _RX1DTPPSbits	set	7883
  3303  1F55                     _IOCCFbits	set	8021
  3304  1F4A                     _IOCBFbits	set	8010
  3305  1F54                     _IOCCNbits	set	8020
  3306  1F49                     _IOCBNbits	set	8009
  3307  1F26                     _RC6PPS	set	7974
  3308  1F50                     _ODCONC	set	8016
  3309  1F45                     _ODCONB	set	8005
  3310  1F3A                     _ODCONA	set	7994
  3311  1F4F                     _WPUC	set	8015
  3312  1F39                     _WPUA	set	7993
  3313  1F44                     _WPUB	set	8004
  3314  1F65                     _WPUE	set	8037
  3315  1F4E                     _ANSELC	set	8014
  3316  1F43                     _ANSELB	set	8003
  3317  1F38                     _ANSELA	set	7992
  3318                           
  3319                           ; #config settings
  3320  0000                     
  3321                           	psect	cinit
  3322  0045                     start_initialization:	
  3323  0045                     __initialization:	
  3324                           
  3325                           ; Initialize objects allocated to BANK0
  3326  0045  3180  2003  3180   	fcall	__pidataBANK0	;fetch initializer
  3327  0048  00EF               	movwf	__pdataBANK0& (0+127)
  3328                           
  3329                           ; Initialize objects allocated to BANK1
  3330  0049  0141               	movlb	1	; select bank1
  3331  004A  3180  2002  3180   	fcall	__pidataBANK1	;fetch initializer
  3332  004D  00DF               	movwf	__pdataBANK1& (0+127)
  3333                           
  3334                           ; Clear objects allocated to BANK0
  3335  004E  3057               	movlw	low __pbssBANK0
  3336  004F  0084               	movwf	4
  3337  0050  3000               	movlw	high __pbssBANK0
  3338  0051  0085               	movwf	5
  3339  0052  3017               	movlw	23
  3340  0053  318A  2282  3180   	fcall	clear_ram0
  3341                           
  3342                           ; Clear objects allocated to BANK1
  3343  0056  30A0               	movlw	low __pbssBANK1
  3344  0057  0084               	movwf	4
  3345  0058  3000               	movlw	high __pbssBANK1
  3346  0059  0085               	movwf	5
  3347  005A  3021               	movlw	33
  3348  005B  318A  2282  3180   	fcall	clear_ram0
  3349                           
  3350                           ; Clear objects allocated to BANK2
  3351  005E  3020               	movlw	low __pbssBANK2
  3352  005F  0084               	movwf	4
  3353  0060  3001               	movlw	high __pbssBANK2
  3354  0061  0085               	movwf	5
  3355  0062  3028               	movlw	40
  3356  0063  318A  2282         	fcall	clear_ram0
  3357  0065                     end_of_initialization:	
  3358                           ;End of C runtime variable initialization code
  3359                           
  3360  0065                     __end_of__initialization:	
  3361  0065  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3362  0066  0140               	movlb	0
  3363  0067  3181  295F         	ljmp	_main	;jump to C main() function
  3364                           
  3365                           	psect	bssBANK0
  3366  0057                     __pbssBANK0:	
  3367  0057                     _sum_:	
  3368  0057                     	ds	4
  3369  005B                     _sum:	
  3370  005B                     	ds	4
  3371  005F                     _Angle_t:	
  3372  005F                     	ds	3
  3373  0062                     _TMR0_InterruptHandler:	
  3374  0062                     	ds	2
  3375  0064                     _Frist_gyro:	
  3376  0064                     	ds	2
  3377  0066                     _New_gyro:	
  3378  0066                     	ds	2
  3379  0068                     _Sam_cnt:	
  3380  0068                     	ds	1
  3381  0069                     _gu8OperationState:	
  3382  0069                     	ds	1
  3383  006A                     _eusartTempRxTail:	
  3384  006A                     	ds	1
  3385  006B                     _eusartRxHead:	
  3386  006B                     	ds	1
  3387  006C                     _eusartTxTail:	
  3388  006C                     	ds	1
  3389  006D                     _eusartTxHead:	
  3390  006D                     	ds	1
  3391                           
  3392                           	psect	dataBANK0
  3393  006F                     __pdataBANK0:	
  3394  006F                     _gu8DoorState:	
  3395  006F                     	ds	1
  3396                           
  3397                           	psect	bssBANK1
  3398  00A0                     __pbssBANK1:	
  3399  00A0                     _eusartTxBuffer:	
  3400  00A0                     	ds	8
  3401  00A8                     _result_gyro:	
  3402  00A8                     	ds	3
  3403  00AB                     _gu16OpenTimCnt:	
  3404  00AB                     	ds	2
  3405  00AD                     _G_Offset_X:	
  3406  00AD                     	ds	2
  3407  00AF                     _Old_gyro:	
  3408  00AF                     	ds	2
  3409  00B1                     _gu16RstTimCnt:	
  3410  00B1                     	ds	2
  3411  00B3                     _gu8ClosedCnt:	
  3412  00B3                     	ds	1
  3413  00B4                     _gu8DoorClosed:	
  3414  00B4                     	ds	1
  3415  00B5                     _gu8DoorOpened:	
  3416  00B5                     	ds	1
  3417  00B6                     _gu8UartTicnt:	
  3418  00B6                     	ds	1
  3419  00B7                     _eusartFrameDone:	
  3420  00B7                     	ds	1
  3421  00B8                     _eusartTempRxCount:	
  3422  00B8                     	ds	1
  3423  00B9                     _eusartRxCount:	
  3424  00B9                     	ds	1
  3425  00BA                     _eusartRxTail:	
  3426  00BA                     	ds	1
  3427  00BB                     _filter_result:	
  3428  00BB                     	ds	6
  3429                           
  3430                           	psect	dataBANK1
  3431  00DF                     __pdataBANK1:	
  3432  00DF                     _gu8OldDoorState:	
  3433  00DF                     	ds	1
  3434                           
  3435                           	psect	bssBANK2
  3436  0120                     __pbssBANK2:	
  3437  0120                     _eusartTempRxBuffer:	
  3438  0120                     	ds	20
  3439  0134                     _eusartRxBuffer:	
  3440  0134                     	ds	20
  3441                           
  3442                           	psect	clrtext
  3443  0A82                     clear_ram0:	
  3444                           ;	Called with FSR0 containing the base address, and
  3445                           ;	WREG with the size to clear
  3446                           
  3447  0A82  0064               	clrwdt	;clear the watchdog before getting into this loop
  3448  0A83                     clrloop0:	
  3449  0A83  0180               	clrf	0	;clear RAM location pointed to by FSR
  3450  0A84  3101               	addfsr 0,1
  3451  0A85  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3452  0A86  2A83               	goto	clrloop0	;have we reached the end yet?
  3453  0A87  3400               	retlw	0	;all done for this memory range, return
  3454                           
  3455                           	psect	cstackBANK1
  3456  00C1                     __pcstackBANK1:	
  3457  00C1                     ?___ftge:	
  3458  00C1                     ??_PMD_Initialize:	
  3459                           ; 1 bit 
  3460                           
  3461  00C1                     ??_PIN_MANAGER_Initialize:	
  3462                           ; 1 bytes @ 0x0
  3463                           
  3464  00C1                     ??_OSCILLATOR_Initialize:	
  3465                           ; 1 bytes @ 0x0
  3466                           
  3467  00C1                     ??_EUSART_Initialize:	
  3468                           ; 1 bytes @ 0x0
  3469                           
  3470  00C1                     ??_ADC_Initialize:	
  3471                           ; 1 bytes @ 0x0
  3472                           
  3473  00C1                     ??_TMR0_Initialize:	
  3474                           ; 1 bytes @ 0x0
  3475                           
  3476  00C1                     ??_Interrupt_Enable:	
  3477                           ; 1 bytes @ 0x0
  3478                           
  3479  00C1                     ??_TMR0_StartTimer:	
  3480                           ; 1 bytes @ 0x0
  3481                           
  3482  00C1                     ??_ReadRstPIN:	
  3483                           ; 1 bytes @ 0x0
  3484                           
  3485  00C1                     ??_ReadTouchKeyPIN:	
  3486                           ; 1 bytes @ 0x0
  3487                           
  3488  00C1                     ??_EUSART_Read:	
  3489                           ; 1 bytes @ 0x0
  3490                           
  3491  00C1                     ??_EUSART_Write:	
  3492                           ; 1 bytes @ 0x0
  3493                           
  3494  00C1                     ??_Clear_FrameDone:	
  3495                           ; 1 bytes @ 0x0
  3496                           
  3497  00C1                     ??_Com_Lock_IIC_Start:	
  3498                           ; 1 bytes @ 0x0
  3499                           
  3500  00C1                     ??_Com_Lock_IIC_Stop:	
  3501                           ; 1 bytes @ 0x0
  3502                           
  3503  00C1                     ??_Com_Lock_IIC_Write_Data:	
  3504                           ; 1 bytes @ 0x0
  3505                           
  3506  00C1                     ??_Com_Lock_IIC_Read_Data:	
  3507                           ; 1 bytes @ 0x0
  3508                           
  3509  00C1                     ??_ClearAngle:	
  3510                           ; 1 bytes @ 0x0
  3511                           
  3512  00C1                     ??_TMR0_StopTimer:	
  3513                           ; 1 bytes @ 0x0
  3514                           
  3515  00C1                     ?_ADC_GetConversion:	
  3516                           ; 1 bytes @ 0x0
  3517                           
  3518  00C1                     ?___wmul:	
  3519                           ; 2 bytes @ 0x0
  3520                           
  3521  00C1                     ?___aldiv:	
  3522                           ; 2 bytes @ 0x0
  3523                           
  3524  00C1                     ___wmul@multiplier:	
  3525                           ; 4 bytes @ 0x0
  3526                           
  3527  00C1                     ___ftge@ff1:	
  3528                           ; 2 bytes @ 0x0
  3529                           
  3530  00C1                     ___aldiv@divisor:	
  3531                           ; 3 bytes @ 0x0
  3532                           
  3533                           
  3534                           ; 4 bytes @ 0x0
  3535  00C1                     	ds	1
  3536  00C2                     EUSART_Read@bitChk:	
  3537  00C2                     EUSART_Write@txData:	
  3538                           ; 1 bytes @ 0x1
  3539                           
  3540  00C2                     Com_Lock_IIC_Write_Data@dat:	
  3541                           ; 1 bytes @ 0x1
  3542                           
  3543  00C2                     Com_Lock_IIC_Read_Data@ack:	
  3544                           ; 1 bytes @ 0x1
  3545                           
  3546                           
  3547                           ; 1 bytes @ 0x1
  3548  00C2                     	ds	1
  3549  00C3                     ??_ADC_GetConversion:	
  3550  00C3                     Com_Lock_IIC_Write_Data@retVal:	
  3551                           ; 1 bytes @ 0x2
  3552                           
  3553  00C3                     Com_Lock_IIC_Read_Data@retVal:	
  3554                           ; 1 bytes @ 0x2
  3555                           
  3556  00C3                     ___wmul@multiplicand:	
  3557                           ; 1 bytes @ 0x2
  3558                           
  3559                           
  3560                           ; 2 bytes @ 0x2
  3561  00C3                     	ds	1
  3562  00C4                     ADC_GetConversion@channel:	
  3563  00C4                     Com_Lock_IIC_Write_Data@i:	
  3564                           ; 1 bytes @ 0x3
  3565                           
  3566  00C4                     Com_Lock_IIC_Read_Data@i:	
  3567                           ; 2 bytes @ 0x3
  3568                           
  3569  00C4                     ___ftge@ff2:	
  3570                           ; 2 bytes @ 0x3
  3571                           
  3572                           
  3573                           ; 3 bytes @ 0x3
  3574  00C4                     	ds	1
  3575  00C5                     ??___wmul:	
  3576  00C5                     ___wmul@product:	
  3577                           ; 1 bytes @ 0x4
  3578                           
  3579  00C5                     ___aldiv@dividend:	
  3580                           ; 2 bytes @ 0x4
  3581                           
  3582                           
  3583                           ; 4 bytes @ 0x4
  3584  00C5                     	ds	1
  3585  00C6                     ?_Com_Lock_MPU_Write_Command:	
  3586  00C6                     ??_Com_Lock_MPU_RD_Reg:	
  3587                           ; 1 bytes @ 0x5
  3588                           
  3589  00C6                     Com_Lock_MPU_Write_Command@data:	
  3590                           ; 1 bytes @ 0x5
  3591                           
  3592                           
  3593                           ; 1 bytes @ 0x5
  3594  00C6                     	ds	1
  3595  00C7                     ??_Com_Lock_MPU_Write_Command:	
  3596  00C7                     ??___ftge:	
  3597                           ; 1 bytes @ 0x6
  3598                           
  3599  00C7                     ?___lwdiv:	
  3600                           ; 1 bytes @ 0x6
  3601                           
  3602  00C7                     Com_Lock_MPU_Write_Command@reg:	
  3603                           ; 2 bytes @ 0x6
  3604                           
  3605  00C7                     Com_Lock_MPU_RD_Reg@addr:	
  3606                           ; 1 bytes @ 0x6
  3607                           
  3608  00C7                     ___lwdiv@divisor:	
  3609                           ; 1 bytes @ 0x6
  3610                           
  3611                           
  3612                           ; 2 bytes @ 0x6
  3613  00C7                     	ds	1
  3614  00C8                     Com_Lock_MPU_RD_Reg@temp:	
  3615                           
  3616                           ; 1 bytes @ 0x7
  3617  00C8                     	ds	1
  3618  00C9                     ??___aldiv:	
  3619  00C9                     ?_Get6500Data:	
  3620                           ; 1 bytes @ 0x8
  3621                           
  3622  00C9                     ___lwdiv@dividend:	
  3623                           ; 2 bytes @ 0x8
  3624                           
  3625                           
  3626                           ; 2 bytes @ 0x8
  3627  00C9                     	ds	1
  3628  00CA                     ??_CheckDoorOpened:	
  3629  00CA                     ??_CheckDoorClosed:	
  3630                           ; 1 bytes @ 0x9
  3631                           
  3632  00CA                     ___aldiv@counter:	
  3633                           ; 1 bytes @ 0x9
  3634                           
  3635                           
  3636                           ; 1 bytes @ 0x9
  3637  00CA                     	ds	1
  3638  00CB                     ??_Get6500Data:	
  3639  00CB                     ??___lwdiv:	
  3640                           ; 1 bytes @ 0xA
  3641                           
  3642  00CB                     ___aldiv@sign:	
  3643                           ; 1 bytes @ 0xA
  3644                           
  3645                           
  3646                           ; 1 bytes @ 0xA
  3647  00CB                     	ds	1
  3648  00CC                     ___lwdiv@quotient:	
  3649  00CC                     ___aldiv@quotient:	
  3650                           ; 2 bytes @ 0xB
  3651                           
  3652                           
  3653                           ; 4 bytes @ 0xB
  3654  00CC                     	ds	2
  3655  00CE                     ___lwdiv@counter:	
  3656                           
  3657                           ; 1 bytes @ 0xD
  3658  00CE                     	ds	1
  3659  00CF                     ??_ADC_Get_Vol:	
  3660                           
  3661                           ; 1 bytes @ 0xE
  3662  00CF                     	ds	1
  3663  00D0                     Get6500Data@H:	
  3664  00D0                     ADC_Get_Vol@adcdata:	
  3665                           ; 1 bytes @ 0xF
  3666                           
  3667                           
  3668                           ; 2 bytes @ 0xF
  3669  00D0                     	ds	1
  3670  00D1                     Get6500Data@L:	
  3671                           
  3672                           ; 1 bytes @ 0x10
  3673  00D1                     	ds	1
  3674  00D2                     Get6500Data@REG_Address:	
  3675  00D2                     ADC_Get_Vol@voldata:	
  3676                           ; 1 bytes @ 0x11
  3677                           
  3678                           
  3679                           ; 2 bytes @ 0x11
  3680  00D2                     	ds	1
  3681  00D3                     ??_Read_Offset:	
  3682                           
  3683                           ; 1 bytes @ 0x12
  3684  00D3                     	ds	1
  3685  00D4                     ADC_Get_Vol@vol:	
  3686                           
  3687                           ; 1 bytes @ 0x13
  3688  00D4                     	ds	1
  3689  00D5                     ??_EUSART_Write_Frame:	
  3690                           
  3691                           ; 1 bytes @ 0x14
  3692  00D5                     	ds	1
  3693  00D6                     EUSART_Write_Frame@cmd:	
  3694                           
  3695                           ; 1 bytes @ 0x15
  3696  00D6                     	ds	1
  3697  00D7                     EUSART_Write_Frame@u8cnt:	
  3698  00D7                     Read_Offset@G_Temp_X:	
  3699                           ; 1 bytes @ 0x16
  3700                           
  3701                           
  3702                           ; 4 bytes @ 0x16
  3703  00D7                     	ds	1
  3704  00D8                     ??_UART_Task:	
  3705                           
  3706                           ; 1 bytes @ 0x17
  3707  00D8                     	ds	3
  3708  00DB                     Read_Offset@cnt:	
  3709                           
  3710                           ; 1 bytes @ 0x1A
  3711  00DB                     	ds	1
  3712  00DC                     ??_Init_MPU6500:	
  3713                           
  3714                           ; 1 bytes @ 0x1B
  3715  00DC                     	ds	2
  3716  00DE                     ??_SYSTEM_Initialize:	
  3717  00DE                     ??_main:	
  3718                           ; 1 bytes @ 0x1D
  3719                           
  3720                           
  3721                           ; 1 bytes @ 0x1D
  3722  00DE                     	ds	1
  3723                           
  3724                           	psect	cstackCOMMON
  3725  0070                     __pcstackCOMMON:	
  3726  0070                     ?i1___ftge:	
  3727  0070                     ?_PMD_Initialize:	
  3728                           ; 1 bit 
  3729                           
  3730  0070                     ?_PIN_MANAGER_Initialize:	
  3731                           ; 1 bytes @ 0x0
  3732                           
  3733  0070                     ?_OSCILLATOR_Initialize:	
  3734                           ; 1 bytes @ 0x0
  3735                           
  3736  0070                     ?_EUSART_Initialize:	
  3737                           ; 1 bytes @ 0x0
  3738                           
  3739  0070                     ?_ADC_Initialize:	
  3740                           ; 1 bytes @ 0x0
  3741                           
  3742  0070                     ?_Init_MPU6500:	
  3743                           ; 1 bytes @ 0x0
  3744                           
  3745  0070                     ?_TMR0_Initialize:	
  3746                           ; 1 bytes @ 0x0
  3747                           
  3748  0070                     ?_Interrupt_Enable:	
  3749                           ; 1 bytes @ 0x0
  3750                           
  3751  0070                     ?_ADC_Get_Vol:	
  3752                           ; 1 bytes @ 0x0
  3753                           
  3754  0070                     ?_TMR0_StartTimer:	
  3755                           ; 1 bytes @ 0x0
  3756                           
  3757  0070                     ?_TMR0_ISR:	
  3758                           ; 1 bytes @ 0x0
  3759                           
  3760  0070                     ?_TMR0_Task:	
  3761                           ; 1 bytes @ 0x0
  3762                           
  3763  0070                     ?_SYSTEM_Initialize:	
  3764                           ; 1 bytes @ 0x0
  3765                           
  3766  0070                     ?_ReadRstPIN:	
  3767                           ; 1 bytes @ 0x0
  3768                           
  3769  0070                     ?_ReadTouchKeyPIN:	
  3770                           ; 1 bytes @ 0x0
  3771                           
  3772  0070                     ?_EUSART_Read:	
  3773                           ; 1 bytes @ 0x0
  3774                           
  3775  0070                     ?_EUSART_Write:	
  3776                           ; 1 bytes @ 0x0
  3777                           
  3778  0070                     ?_EUSART_Write_Frame:	
  3779                           ; 1 bytes @ 0x0
  3780                           
  3781  0070                     ?_UART_Task:	
  3782                           ; 1 bytes @ 0x0
  3783                           
  3784  0070                     ?_Clear_FrameDone:	
  3785                           ; 1 bytes @ 0x0
  3786                           
  3787  0070                     ?_EUSART_Transmit_ISR:	
  3788                           ; 1 bytes @ 0x0
  3789                           
  3790  0070                     ??_EUSART_Transmit_ISR:	
  3791                           ; 1 bytes @ 0x0
  3792                           
  3793  0070                     ?_EUSART_Receive_ISR:	
  3794                           ; 1 bytes @ 0x0
  3795                           
  3796  0070                     ??_EUSART_Receive_ISR:	
  3797                           ; 1 bytes @ 0x0
  3798                           
  3799  0070                     ?_INTERRUPT_InterruptManager:	
  3800                           ; 1 bytes @ 0x0
  3801                           
  3802  0070                     ?_Com_Lock_IIC_Start:	
  3803                           ; 1 bytes @ 0x0
  3804                           
  3805  0070                     ?_Com_Lock_IIC_Stop:	
  3806                           ; 1 bytes @ 0x0
  3807                           
  3808  0070                     ?_Com_Lock_IIC_Write_Data:	
  3809                           ; 1 bytes @ 0x0
  3810                           
  3811  0070                     ?_Com_Lock_IIC_Read_Data:	
  3812                           ; 1 bytes @ 0x0
  3813                           
  3814  0070                     ?_Com_Lock_MPU_RD_Reg:	
  3815                           ; 1 bytes @ 0x0
  3816                           
  3817  0070                     ?_Read_Offset:	
  3818                           ; 1 bytes @ 0x0
  3819                           
  3820  0070                     ?_ClearAngle:	
  3821                           ; 1 bytes @ 0x0
  3822                           
  3823  0070                     ?_CheckDoorOpened:	
  3824                           ; 1 bytes @ 0x0
  3825                           
  3826  0070                     ?_CheckDoorClosed:	
  3827                           ; 1 bytes @ 0x0
  3828                           
  3829  0070                     ?_TMR0_StopTimer:	
  3830                           ; 1 bytes @ 0x0
  3831                           
  3832  0070                     ?_main:	
  3833                           ; 1 bytes @ 0x0
  3834                           
  3835  0070                     ?i1_EUSART_Write:	
  3836                           ; 1 bytes @ 0x0
  3837                           
  3838  0070                     ??i1_EUSART_Write:	
  3839                           ; 1 bytes @ 0x0
  3840                           
  3841  0070                     ?i1_Com_Lock_IIC_Start:	
  3842                           ; 1 bytes @ 0x0
  3843                           
  3844  0070                     ??i1_Com_Lock_IIC_Start:	
  3845                           ; 1 bytes @ 0x0
  3846                           
  3847  0070                     ?i1_Com_Lock_IIC_Stop:	
  3848                           ; 1 bytes @ 0x0
  3849                           
  3850  0070                     ??i1_Com_Lock_IIC_Stop:	
  3851                           ; 1 bytes @ 0x0
  3852                           
  3853  0070                     ?i1_Com_Lock_IIC_Write_Data:	
  3854                           ; 1 bytes @ 0x0
  3855                           
  3856  0070                     ??i1_Com_Lock_IIC_Write_Data:	
  3857                           ; 1 bytes @ 0x0
  3858                           
  3859  0070                     ?i1_Com_Lock_IIC_Read_Data:	
  3860                           ; 1 bytes @ 0x0
  3861                           
  3862  0070                     ??i1_Com_Lock_IIC_Read_Data:	
  3863                           ; 1 bytes @ 0x0
  3864                           
  3865  0070                     ?i1_Com_Lock_MPU_RD_Reg:	
  3866                           ; 1 bytes @ 0x0
  3867                           
  3868  0070                     ?i1_TMR0_StartTimer:	
  3869                           ; 1 bytes @ 0x0
  3870                           
  3871  0070                     ??i1_TMR0_StartTimer:	
  3872                           ; 1 bytes @ 0x0
  3873                           
  3874  0070                     ?_abs:	
  3875                           ; 1 bytes @ 0x0
  3876                           
  3877  0070                     ?___ftpack:	
  3878                           ; 2 bytes @ 0x0
  3879                           
  3880  0070                     ?___fttol:	
  3881                           ; 3 bytes @ 0x0
  3882                           
  3883  0070                     abs@a:	
  3884                           ; 4 bytes @ 0x0
  3885                           
  3886  0070                     ___ftpack@arg:	
  3887                           ; 2 bytes @ 0x0
  3888                           
  3889  0070                     ___fttol@f1:	
  3890                           ; 3 bytes @ 0x0
  3891                           
  3892  0070                     i1___ftge@ff1:	
  3893                           ; 3 bytes @ 0x0
  3894                           
  3895                           
  3896                           ; 3 bytes @ 0x0
  3897  0070                     	ds	1
  3898  0071                     EUSART_Receive_ISR@dumread:	
  3899  0071                     i1EUSART_Write@txData:	
  3900                           ; 1 bytes @ 0x1
  3901                           
  3902  0071                     i1Com_Lock_IIC_Write_Data@dat:	
  3903                           ; 1 bytes @ 0x1
  3904                           
  3905  0071                     i1Com_Lock_IIC_Read_Data@ack:	
  3906                           ; 1 bytes @ 0x1
  3907                           
  3908                           
  3909                           ; 1 bytes @ 0x1
  3910  0071                     	ds	1
  3911  0072                     ??_abs:	
  3912  0072                     i1Com_Lock_IIC_Write_Data@retVal:	
  3913                           ; 1 bytes @ 0x2
  3914                           
  3915  0072                     i1Com_Lock_IIC_Read_Data@retVal:	
  3916                           ; 1 bytes @ 0x2
  3917                           
  3918                           
  3919                           ; 1 bytes @ 0x2
  3920  0072                     	ds	1
  3921  0073                     ___ftpack@exp:	
  3922  0073                     i1Com_Lock_IIC_Write_Data@i:	
  3923                           ; 1 bytes @ 0x3
  3924                           
  3925  0073                     i1Com_Lock_IIC_Read_Data@i:	
  3926                           ; 2 bytes @ 0x3
  3927                           
  3928  0073                     i1___ftge@ff2:	
  3929                           ; 2 bytes @ 0x3
  3930                           
  3931                           
  3932                           ; 3 bytes @ 0x3
  3933  0073                     	ds	1
  3934  0074                     ??___fttol:	
  3935  0074                     ___ftpack@sign:	
  3936                           ; 1 bytes @ 0x4
  3937                           
  3938                           
  3939                           ; 1 bytes @ 0x4
  3940  0074                     	ds	1
  3941  0075                     ??___ftpack:	
  3942  0075                     ??i1_Com_Lock_MPU_RD_Reg:	
  3943                           ; 1 bytes @ 0x5
  3944                           
  3945                           
  3946                           ; 1 bytes @ 0x5
  3947  0075                     	ds	1
  3948  0076                     ??i1___ftge:	
  3949  0076                     i1Com_Lock_MPU_RD_Reg@addr:	
  3950                           ; 1 bytes @ 0x6
  3951                           
  3952                           
  3953                           ; 1 bytes @ 0x6
  3954  0076                     	ds	1
  3955  0077                     i1Com_Lock_MPU_RD_Reg@temp:	
  3956                           
  3957                           ; 1 bytes @ 0x7
  3958  0077                     	ds	1
  3959  0078                     ?i1_Get6500Data:	
  3960  0078                     ?___awtoft:	
  3961                           ; 2 bytes @ 0x8
  3962                           
  3963  0078                     ?___ftmul:	
  3964                           ; 3 bytes @ 0x8
  3965                           
  3966  0078                     ___fttol@sign1:	
  3967                           ; 3 bytes @ 0x8
  3968                           
  3969  0078                     ___awtoft@c:	
  3970                           ; 1 bytes @ 0x8
  3971                           
  3972  0078                     ___ftmul@f1:	
  3973                           ; 2 bytes @ 0x8
  3974                           
  3975                           
  3976                           ; 3 bytes @ 0x8
  3977  0078                     	ds	1
  3978  0079                     ___fttol@lval:	
  3979                           
  3980                           ; 4 bytes @ 0x9
  3981  0079                     	ds	1
  3982  007A                     i1Get6500Data@H:	
  3983                           
  3984                           ; 1 bytes @ 0xA
  3985  007A                     	ds	1
  3986  007B                     ??___awtoft:	
  3987  007B                     i1Get6500Data@L:	
  3988                           ; 1 bytes @ 0xB
  3989                           
  3990  007B                     ___ftmul@f2:	
  3991                           ; 1 bytes @ 0xB
  3992                           
  3993                           
  3994                           ; 3 bytes @ 0xB
  3995  007B                     	ds	1
  3996  007C                     i1Get6500Data@REG_Address:	
  3997                           
  3998                           ; 1 bytes @ 0xC
  3999  007C                     	ds	1
  4000  007D                     ___awtoft@sign:	
  4001  007D                     ___fttol@exp1:	
  4002                           ; 1 bytes @ 0xD
  4003                           
  4004                           
  4005                           ; 1 bytes @ 0xD
  4006  007D                     	ds	1
  4007  007E                     ??_INTERRUPT_InterruptManager:	
  4008  007E                     ??_AngleCalcu:	
  4009                           ; 1 bytes @ 0xE
  4010                           
  4011  007E                     ??___ftneg:	
  4012                           ; 1 bytes @ 0xE
  4013                           
  4014                           
  4015                           	psect	cstackBANK0
  4016  0020                     __pcstackBANK0:	
  4017                           ; 1 bytes @ 0xE
  4018                           
  4019  0020                     ??___ftmul:	
  4020  0020                     ??i1_Get6500Data:	
  4021                           ; 1 bytes @ 0x0
  4022                           
  4023  0020                     ?___ftneg:	
  4024                           ; 1 bytes @ 0x0
  4025                           
  4026  0020                     ___ftneg@f1:	
  4027                           ; 3 bytes @ 0x0
  4028                           
  4029                           
  4030                           ; 3 bytes @ 0x0
  4031  0020                     	ds	4
  4032  0024                     ___ftmul@exp:	
  4033                           
  4034                           ; 1 bytes @ 0x4
  4035  0024                     	ds	1
  4036  0025                     ___ftmul@f3_as_product:	
  4037                           
  4038                           ; 3 bytes @ 0x5
  4039  0025                     	ds	3
  4040  0028                     ___ftmul@cntr:	
  4041                           
  4042                           ; 1 bytes @ 0x8
  4043  0028                     	ds	1
  4044  0029                     ___ftmul@sign:	
  4045                           
  4046                           ; 1 bytes @ 0x9
  4047  0029                     	ds	1
  4048  002A                     ?___ftadd:	
  4049  002A                     ___ftadd@f1:	
  4050                           ; 3 bytes @ 0xA
  4051                           
  4052                           
  4053                           ; 3 bytes @ 0xA
  4054  002A                     	ds	3
  4055  002D                     ___ftadd@f2:	
  4056                           
  4057                           ; 3 bytes @ 0xD
  4058  002D                     	ds	3
  4059  0030                     ??___ftadd:	
  4060                           
  4061                           ; 1 bytes @ 0x10
  4062  0030                     	ds	4
  4063  0034                     ___ftadd@sign:	
  4064                           
  4065                           ; 1 bytes @ 0x14
  4066  0034                     	ds	1
  4067  0035                     ___ftadd@exp2:	
  4068                           
  4069                           ; 1 bytes @ 0x15
  4070  0035                     	ds	1
  4071  0036                     ___ftadd@exp1:	
  4072                           
  4073                           ; 1 bytes @ 0x16
  4074  0036                     	ds	1
  4075  0037                     ?_AngleCalcu:	
  4076  0037                     ?___ftdiv:	
  4077                           ; 1 bytes @ 0x17
  4078                           
  4079  0037                     AngleCalcu@angle_m:	
  4080                           ; 3 bytes @ 0x17
  4081                           
  4082  0037                     ___ftdiv@f2:	
  4083                           ; 3 bytes @ 0x17
  4084                           
  4085                           
  4086                           ; 3 bytes @ 0x17
  4087  0037                     	ds	3
  4088  003A                     AngleCalcu@gyro_m:	
  4089  003A                     ___ftdiv@f1:	
  4090                           ; 3 bytes @ 0x1A
  4091                           
  4092                           
  4093                           ; 3 bytes @ 0x1A
  4094  003A                     	ds	3
  4095  003D                     ??___ftdiv:	
  4096  003D                     AngleCalcu@p:	
  4097                           ; 1 bytes @ 0x1D
  4098                           
  4099                           
  4100                           ; 1 bytes @ 0x1D
  4101  003D                     	ds	4
  4102  0041                     ___ftdiv@cntr:	
  4103                           
  4104                           ; 1 bytes @ 0x21
  4105  0041                     	ds	1
  4106  0042                     ___ftdiv@f3:	
  4107                           
  4108                           ; 3 bytes @ 0x22
  4109  0042                     	ds	3
  4110  0045                     ___ftdiv@exp:	
  4111                           
  4112                           ; 1 bytes @ 0x25
  4113  0045                     	ds	1
  4114  0046                     ___ftdiv@sign:	
  4115                           
  4116                           ; 1 bytes @ 0x26
  4117  0046                     	ds	1
  4118  0047                     ?_Mpu6500GyroAngle:	
  4119                           
  4120                           ; 3 bytes @ 0x27
  4121  0047                     	ds	3
  4122  004A                     ??_Mpu6500GyroAngle:	
  4123                           
  4124                           ; 1 bytes @ 0x2A
  4125  004A                     	ds	3
  4126  004D                     Mpu6500GyroAngle@dir:	
  4127                           
  4128                           ; 1 bytes @ 0x2D
  4129  004D                     	ds	1
  4130  004E                     Mpu6500GyroAngle@gyro_angle:	
  4131                           
  4132                           ; 3 bytes @ 0x2E
  4133  004E                     	ds	3
  4134  0051                     ??_TMR0_Task:	
  4135                           
  4136                           ; 1 bytes @ 0x31
  4137  0051                     	ds	5
  4138  0056                     ??_TMR0_ISR:	
  4139                           
  4140                           ; 1 bytes @ 0x36
  4141  0056                     	ds	1
  4142                           
  4143                           	psect	maintext
  4144  015F                     __pmaintext:	
  4145 ;;
  4146 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4147 ;;
  4148 ;; *************** function _main *****************
  4149 ;; Defined at:
  4150 ;;		line 65 in file "main.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;		None
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;		None
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  1    wreg      void 
  4157 ;; Registers used:
  4158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4159 ;; Tracked objects:
  4160 ;;		On entry : B3F/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4164 ;;      Params:         0       0       0       0       0       0       0       0
  4165 ;;      Locals:         0       0       0       0       0       0       0       0
  4166 ;;      Temps:          0       0       1       0       0       0       0       0
  4167 ;;      Totals:         0       0       1       0       0       0       0       0
  4168 ;;Total ram usage:        1 bytes
  4169 ;; Hardware stack levels required when called:   13
  4170 ;; This function calls:
  4171 ;;		_CheckDoorClosed
  4172 ;;		_CheckDoorOpened
  4173 ;;		_ClearAngle
  4174 ;;		_Clear_FrameDone
  4175 ;;		_EUSART_Read
  4176 ;;		_EUSART_Write
  4177 ;;		_ReadRstPIN
  4178 ;;		_ReadTouchKeyPIN
  4179 ;;		_SYSTEM_Initialize
  4180 ;;		_TMR0_StartTimer
  4181 ;;		_TMR0_StopTimer
  4182 ;;		_UART_Task
  4183 ;; This function is called by:
  4184 ;;		Startup code after reset
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           
  4189                           ;psect for function _main
  4190  015F                     _main:	
  4191                           
  4192                           ;main.c: 69: SYSTEM_Initialize();
  4193                           
  4194                           ;incstack = 0
  4195                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4196  015F  318B  2356  3181   	fcall	_SYSTEM_Initialize
  4197                           
  4198                           ;main.c: 72: {;main.c: 73: switch(gu8DoorState)
  4199                           
  4200                           ;main.c: 71: while (1)
  4201  0162  2A3A               	goto	l3439
  4202  0163                     l3331:	
  4203                           ;main.c: 74: {;main.c: 75: case 1:
  4204                           
  4205                           
  4206                           ;main.c: 77: if(gu8OperationState == 0x00)
  4207  0163  0140               	movlb	0	; select bank0
  4208  0164  0869               	movf	_gu8OperationState,w
  4209  0165  1D03               	btfss	3,2
  4210  0166  296A               	goto	l3335
  4211                           
  4212                           ;main.c: 78: {;main.c: 79: TMR0_StopTimer();
  4213  0167  318A  2275  3181   	fcall	_TMR0_StopTimer
  4214  016A                     l3335:	
  4215                           
  4216                           ;main.c: 90: };main.c: 91: gu8OldDoorState = 1;
  4217  016A  0141               	movlb	1	; select bank1
  4218  016B  01DF               	clrf	_gu8OldDoorState^(0+128)
  4219  016C  0ADF               	incf	_gu8OldDoorState^(0+128),f
  4220                           
  4221                           ;main.c: 92: gu8DoorState = 2;
  4222  016D  3002               	movlw	2
  4223  016E  00DE               	movwf	??_main^(0+128)
  4224  016F  085E               	movf	??_main^(0+128),w
  4225  0170  0140               	movlb	0	; select bank0
  4226  0171  00EF               	movwf	_gu8DoorState
  4227                           
  4228                           ;main.c: 93: break;
  4229  0172  2A3A               	goto	l3439
  4230  0173                     l3339:	
  4231                           ;main.c: 94: case 0:
  4232                           
  4233                           
  4234                           ;main.c: 95: if(CheckDoorOpened())
  4235  0173  318D  255A  3181   	fcall	_CheckDoorOpened
  4236  0176  3A00               	xorlw	0
  4237  0177  1903               	skipnz
  4238  0178  298C               	goto	l3351
  4239                           
  4240                           ;main.c: 96: {;main.c: 97: if(CheckDoorClosed())
  4241  0179  318F  272A  3181   	fcall	_CheckDoorClosed
  4242  017C  3A00               	xorlw	0
  4243  017D  1903               	skipnz
  4244  017E  298C               	goto	l3351
  4245                           
  4246                           ;main.c: 98: {;main.c: 100: EUSART_Write(0x22);
  4247  017F  3022               	movlw	34
  4248  0180  318C  24D2  3181   	fcall	_EUSART_Write
  4249                           
  4250                           ;main.c: 101: EUSART_Write(0x77);
  4251  0183  3077               	movlw	119
  4252  0184  318C  24D2  3181   	fcall	_EUSART_Write
  4253                           
  4254                           ;main.c: 102: gu16OpenTimCnt = 0;
  4255  0187  0141               	movlb	1	; select bank1
  4256  0188  01AB               	clrf	_gu16OpenTimCnt^(0+128)
  4257  0189  01AC               	clrf	(_gu16OpenTimCnt+1)^(0+128)
  4258                           
  4259                           ;main.c: 103: gu8OldDoorState = 0;
  4260  018A  01DF               	clrf	_gu8OldDoorState^(0+128)
  4261  018B  2A37               	goto	l3435
  4262  018C                     l3351:	
  4263                           ;main.c: 105: break;
  4264                           
  4265                           ;main.c: 104: gu8DoorState = 1;
  4266                           
  4267                           
  4268                           ;main.c: 106: };main.c: 107: };main.c: 108: if(gu16OpenTimCnt >= 18000)
  4269  018C  3046               	movlw	70
  4270  018D  0141               	movlb	1	; select bank1
  4271  018E  022C               	subwf	(_gu16OpenTimCnt+1)^(0+128),w
  4272  018F  3050               	movlw	80
  4273  0190  1903               	skipnz
  4274  0191  022B               	subwf	_gu16OpenTimCnt^(0+128),w
  4275  0192  1C03               	skipc
  4276  0193  299F               	goto	l3357
  4277                           
  4278                           ;main.c: 109: {;main.c: 111: EUSART_Write(0x22);
  4279  0194  3022               	movlw	34
  4280  0195  318C  24D2  3181   	fcall	_EUSART_Write
  4281                           
  4282                           ;main.c: 112: EUSART_Write(0x44);
  4283  0198  3044               	movlw	68
  4284  0199  318C  24D2  3181   	fcall	_EUSART_Write
  4285                           
  4286                           ;main.c: 113: gu16OpenTimCnt = 0;
  4287  019C  0141               	movlb	1	; select bank1
  4288  019D  01AB               	clrf	_gu16OpenTimCnt^(0+128)
  4289  019E  01AC               	clrf	(_gu16OpenTimCnt+1)^(0+128)
  4290  019F                     l3357:	
  4291                           ;main.c: 114: };main.c: 116: case 2:
  4292                           
  4293                           
  4294                           ;main.c: 117: if(gu8OperationState&0x04)
  4295  019F  0140               	movlb	0	; select bank0
  4296  01A0  1D69               	btfss	_gu8OperationState,2
  4297  01A1  29C1               	goto	l3373
  4298                           
  4299                           ;main.c: 118: {;main.c: 119: if(ReadRstPIN())
  4300  01A2  318A  2288  3181   	fcall	_ReadRstPIN
  4301  01A5  3A00               	xorlw	0
  4302  01A6  1D03               	btfss	3,2
  4303  01A7  29B8               	goto	L1
  4304                           
  4305                           ;main.c: 124: else;main.c: 125: {;main.c: 126: if(gu16RstTimCnt >= 300)
  4306                           
  4307                           ;main.c: 123: }
  4308                           
  4309                           ;main.c: 122: gu16RstTimCnt = 0;
  4310                           
  4311                           ;main.c: 120: {;main.c: 121: gu8OperationState &=~0x04;
  4312  01A8  3001               	movlw	1
  4313  01A9  0141               	movlb	1	; select bank1
  4314  01AA  0232               	subwf	(_gu16RstTimCnt+1)^(0+128),w
  4315  01AB  302C               	movlw	44
  4316  01AC  1903               	skipnz
  4317  01AD  0231               	subwf	_gu16RstTimCnt^(0+128),w
  4318  01AE  1C03               	skipc
  4319  01AF  29C1               	goto	l3373
  4320                           
  4321                           ;main.c: 127: {;main.c: 129: EUSART_Write(0x22);
  4322  01B0  3022               	movlw	34
  4323  01B1  318C  24D2  3181   	fcall	_EUSART_Write
  4324                           
  4325                           ;main.c: 130: EUSART_Write(0x88);
  4326  01B4  3088               	movlw	136
  4327  01B5  318C  24D2  3181   	fcall	_EUSART_Write
  4328  01B8                     L1:	
  4329                           
  4330                           ;main.c: 131: gu8OperationState &=~0x04;
  4331  01B8  30FB               	movlw	251
  4332  01B9  0141               	movlb	1	; select bank1
  4333  01BA  00DE               	movwf	??_main^(0+128)
  4334  01BB  085E               	movf	??_main^(0+128),w
  4335  01BC  0140               	movlb	0	; select bank0
  4336  01BD  05E9               	andwf	_gu8OperationState,f
  4337                           
  4338                           ;main.c: 132: gu16RstTimCnt = 0;
  4339  01BE  0141               	movlb	1	; select bank1
  4340  01BF  01B1               	clrf	_gu16RstTimCnt^(0+128)
  4341  01C0  01B2               	clrf	(_gu16RstTimCnt+1)^(0+128)
  4342  01C1                     l3373:	
  4343                           
  4344                           ;main.c: 133: };main.c: 134: };main.c: 135: };main.c: 136: if(gu8OperationState&0x08)
  4345  01C1  0140               	movlb	0	; select bank0
  4346  01C2  1DE9               	btfss	_gu8OperationState,3
  4347  01C3  29D6               	goto	l3381
  4348                           
  4349                           ;main.c: 137: {;main.c: 138: if(gu8OldDoorState != 1)
  4350  01C4  0141               	movlb	1	; select bank1
  4351  01C5  035F               	decf	_gu8OldDoorState^(0+128),w
  4352  01C6  1903               	btfsc	3,2
  4353  01C7  29D0               	goto	l3379
  4354                           
  4355                           ;main.c: 139: {;main.c: 140: EUSART_Write(0x22);
  4356  01C8  3022               	movlw	34
  4357  01C9  318C  24D2  3181   	fcall	_EUSART_Write
  4358                           
  4359                           ;main.c: 141: EUSART_Write(0x55);
  4360  01CC  3055               	movlw	85
  4361  01CD  318C  24D2  3181   	fcall	_EUSART_Write
  4362  01D0                     l3379:	
  4363                           
  4364                           ;main.c: 143: };main.c: 144: gu8OperationState &= ~0x08;
  4365  01D0  30F7               	movlw	247
  4366  01D1  0141               	movlb	1	; select bank1
  4367  01D2  00DE               	movwf	??_main^(0+128)
  4368  01D3  085E               	movf	??_main^(0+128),w
  4369  01D4  0140               	movlb	0	; select bank0
  4370  01D5  05E9               	andwf	_gu8OperationState,f
  4371  01D6                     l3381:	
  4372                           
  4373                           ;main.c: 145: };main.c: 146: if(gu8OperationState&0x03)
  4374  01D6  0869               	movf	_gu8OperationState,w
  4375  01D7  3903               	andlw	3
  4376  01D8  1903               	btfsc	3,2
  4377  01D9  2A06               	goto	l3407
  4378                           
  4379                           ;main.c: 147: {;main.c: 148: if(ReadTouchKeyPIN() == 2)
  4380  01DA  318A  22CF  3181   	fcall	_ReadTouchKeyPIN
  4381  01DD  3A02               	xorlw	2
  4382  01DE  1903               	btfsc	3,2
  4383  01DF  2A00               	goto	l3405
  4384                           
  4385                           ;main.c: 152: else if(ReadTouchKeyPIN() == 0)
  4386                           
  4387                           ;main.c: 151: }
  4388                           
  4389                           ;main.c: 149: {;main.c: 150: gu8OperationState &= 0xFC;
  4390  01E0  318A  22CF  3181   	fcall	_ReadTouchKeyPIN
  4391  01E3  3A00               	xorlw	0
  4392  01E4  1D03               	skipz
  4393  01E5  2A06               	goto	l3407
  4394                           
  4395                           ;main.c: 153: {;main.c: 154: if(gu8DoorState == 2)
  4396  01E6  3002               	movlw	2
  4397  01E7  0140               	movlb	0	; select bank0
  4398  01E8  066F               	xorwf	_gu8DoorState,w
  4399  01E9  1D03               	btfss	3,2
  4400  01EA  29FC               	goto	l3401
  4401                           
  4402                           ;main.c: 155: {;main.c: 156: gu16OpenTimCnt = 0;
  4403  01EB  0141               	movlb	1	; select bank1
  4404  01EC  01AB               	clrf	_gu16OpenTimCnt^(0+128)
  4405  01ED  01AC               	clrf	(_gu16OpenTimCnt+1)^(0+128)
  4406                           
  4407                           ;main.c: 157: ClearAngle();
  4408  01EE  318A  22A0  3181   	fcall	_ClearAngle
  4409                           
  4410                           ;main.c: 158: TMR0_StartTimer();
  4411  01F1  318A  227D  3181   	fcall	_TMR0_StartTimer
  4412                           
  4413                           ;main.c: 159: EUSART_Write(0x22);
  4414  01F4  3022               	movlw	34
  4415  01F5  318C  24D2  3181   	fcall	_EUSART_Write
  4416                           
  4417                           ;main.c: 160: EUSART_Write(0x66);
  4418  01F8  3066               	movlw	102
  4419  01F9  318C  24D2  3181   	fcall	_EUSART_Write
  4420  01FC                     l3401:	
  4421                           
  4422                           ;main.c: 162: };main.c: 163: gu8OldDoorState = 0;
  4423  01FC  0141               	movlb	1	; select bank1
  4424  01FD  01DF               	clrf	_gu8OldDoorState^(0+128)
  4425                           
  4426                           ;main.c: 164: gu8DoorState = 0;
  4427  01FE  0140               	movlb	0	; select bank0
  4428  01FF  01EF               	clrf	_gu8DoorState
  4429  0200                     l3405:	
  4430                           
  4431                           ;main.c: 165: gu8OperationState &= 0xFC;
  4432  0200  30FC               	movlw	252
  4433  0201  0141               	movlb	1	; select bank1
  4434  0202  00DE               	movwf	??_main^(0+128)
  4435  0203  085E               	movf	??_main^(0+128),w
  4436  0204  0140               	movlb	0	; select bank0
  4437  0205  05E9               	andwf	_gu8OperationState,f
  4438  0206                     l3407:	
  4439                           
  4440                           ;main.c: 166: };main.c: 167: };main.c: 168: if(gu8OperationState&0x10)
  4441  0206  0140               	movlb	0	; select bank0
  4442  0207  1E69               	btfss	_gu8OperationState,4
  4443  0208  2A2F               	goto	l3431
  4444                           
  4445                           ;main.c: 169: {;main.c: 170: if(EUSART_Read())
  4446  0209  3186  2618  3181   	fcall	_EUSART_Read
  4447  020C  3A00               	xorlw	0
  4448  020D  1903               	skipnz
  4449  020E  2A20               	goto	l3423
  4450                           
  4451                           ;main.c: 171: {;main.c: 172: UART_Task();
  4452  020F  318B  232D  3181   	fcall	_UART_Task
  4453                           
  4454                           ;main.c: 173: Clear_FrameDone();
  4455  0212  3187  27FC  3181   	fcall	_Clear_FrameDone
  4456                           
  4457                           ;main.c: 174: gu8UartTicnt = 0;
  4458  0215  0141               	movlb	1	; select bank1
  4459  0216  01B6               	clrf	_gu8UartTicnt^(0+128)
  4460                           
  4461                           ;main.c: 175: EUSART_Write(0x22);
  4462  0217  3022               	movlw	34
  4463  0218  318C  24D2  3181   	fcall	_EUSART_Write
  4464                           
  4465                           ;main.c: 176: EUSART_Write(0x99);
  4466  021B  3099               	movlw	153
  4467  021C  318C  24D2  3181   	fcall	_EUSART_Write
  4468  021F  2A29               	goto	l3429
  4469  0220                     l3423:	
  4470                           ;main.c: 178: }
  4471                           
  4472                           ;main.c: 177: gu8OperationState &=~0x10;
  4473                           
  4474                           
  4475                           ;main.c: 179: else;main.c: 180: {;main.c: 181: if(gu8UartTicnt >= 10)
  4476  0220  300A               	movlw	10
  4477  0221  0141               	movlb	1	; select bank1
  4478  0222  0236               	subwf	_gu8UartTicnt^(0+128),w
  4479  0223  1C03               	skipc
  4480  0224  2A2F               	goto	l3431
  4481                           
  4482                           ;main.c: 182: {;main.c: 183: gu8UartTicnt = 0;
  4483  0225  01B6               	clrf	_gu8UartTicnt^(0+128)
  4484                           
  4485                           ;main.c: 184: Clear_FrameDone();
  4486  0226  3187  27FC  3181   	fcall	_Clear_FrameDone
  4487  0229                     l3429:	
  4488                           
  4489                           ;main.c: 187: gu8OperationState &=~0x10;
  4490  0229  30EF               	movlw	239
  4491  022A  0141               	movlb	1	; select bank1
  4492  022B  00DE               	movwf	??_main^(0+128)
  4493  022C  085E               	movf	??_main^(0+128),w
  4494  022D  0140               	movlb	0	; select bank0
  4495  022E  05E9               	andwf	_gu8OperationState,f
  4496  022F                     l3431:	
  4497                           
  4498                           ;main.c: 188: };main.c: 189: };main.c: 190: };main.c: 191: if(gu8OperationState == 0x00)
  4499  022F  0140               	movlb	0	; select bank0
  4500  0230  0869               	movf	_gu8OperationState,w
  4501  0231  1D03               	btfss	3,2
  4502  0232  2A3A               	goto	l3439
  4503                           
  4504                           ;main.c: 192: {;main.c: 193: if(gu8OldDoorState == 1)
  4505  0233  0141               	movlb	1	; select bank1
  4506  0234  035F               	decf	_gu8OldDoorState^(0+128),w
  4507  0235  1D03               	btfss	3,2
  4508  0236  2A3A               	goto	l3439
  4509  0237                     l3435:	
  4510                           
  4511                           ;main.c: 194: {;main.c: 196: gu8DoorState = 1;
  4512  0237  0140               	movlb	0	; select bank0
  4513  0238  01EF               	clrf	_gu8DoorState
  4514  0239  0AEF               	incf	_gu8DoorState,f
  4515  023A                     l3439:	
  4516                           ;main.c: 203: }
  4517                           
  4518                           ;main.c: 202: break;
  4519                           
  4520                           ;main.c: 201: default:
  4521                           
  4522                           ;main.c: 197: };main.c: 198: };main.c: 199: break;
  4523                           
  4524  023A  0140               	movlb	0	; select bank0
  4525  023B  086F               	movf	_gu8DoorState,w
  4526                           
  4527                           ; Switch size 1, requested type "space"
  4528                           ; Number of cases is 3, Range of values is 0 to 2
  4529                           ; switch strategies available:
  4530                           ; Name         Instructions Cycles
  4531                           ; simple_byte           10     6 (average)
  4532                           ; direct_byte           12     6 (fixed)
  4533                           ; jumptable            260     6 (fixed)
  4534                           ;	Chosen strategy is simple_byte
  4535  023C  3A00               	xorlw	0	; case 0
  4536  023D  1903               	skipnz
  4537  023E  2973               	goto	l3339
  4538  023F  3A01               	xorlw	1	; case 1
  4539  0240  1903               	skipnz
  4540  0241  2963               	goto	l3331
  4541  0242  3A03               	xorlw	3	; case 2
  4542  0243  1903               	skipnz
  4543  0244  299F               	goto	l3357
  4544  0245  2A3A               	goto	l3439
  4545  0246  2A3A               	goto	l3439
  4546  0247                     __end_of_main:	
  4547                           
  4548                           	psect	text1
  4549  0B2D                     __ptext1:	
  4550 ;; *************** function _UART_Task *****************
  4551 ;; Defined at:
  4552 ;;		line 237 in file "src/eusart.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;		None
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;		None
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  1    wreg      void 
  4559 ;; Registers used:
  4560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4566 ;;      Params:         0       0       0       0       0       0       0       0
  4567 ;;      Locals:         0       0       0       0       0       0       0       0
  4568 ;;      Temps:          0       0       0       0       0       0       0       0
  4569 ;;      Totals:         0       0       0       0       0       0       0       0
  4570 ;;Total ram usage:        0 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:   10
  4573 ;; This function calls:
  4574 ;;		_EUSART_Write_Frame
  4575 ;; This function is called by:
  4576 ;;		_main
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           
  4581                           ;psect for function _UART_Task
  4582  0B2D                     _UART_Task:	
  4583                           
  4584                           ;eusart.c: 239: switch(eusartTempRxBuffer[1])
  4585                           
  4586                           ;incstack = 0
  4587                           ; Regs used in _UART_Task: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4588  0B2D  2B36               	goto	l3173
  4589  0B2E                     l3167:	
  4590                           ;eusart.c: 240: {;eusart.c: 241: case 0x01:
  4591                           
  4592                           
  4593                           ;eusart.c: 243: EUSART_Write_Frame(0x01);
  4594  0B2E  3001               	movlw	1
  4595  0B2F  318E  2670         	fcall	_EUSART_Write_Frame
  4596                           
  4597                           ;eusart.c: 244: break;
  4598  0B31  0008               	return
  4599  0B32                     l3169:	
  4600                           ;eusart.c: 245: case 0x02:
  4601                           
  4602                           
  4603                           ;eusart.c: 246: EUSART_Write_Frame(0x02);
  4604  0B32  3002               	movlw	2
  4605  0B33  318E  2670         	fcall	_EUSART_Write_Frame
  4606                           
  4607                           ;eusart.c: 252: }
  4608                           
  4609                           ;eusart.c: 249: break;
  4610                           
  4611                           ;eusart.c: 248: default:
  4612                           
  4613                           ;eusart.c: 247: break;
  4614  0B35  0008               	return
  4615  0B36                     l3173:	
  4616  0B36  0142               	movlb	2	; select bank2
  4617  0B37  0821               	movf	(_eusartTempRxBuffer^(0+256)+1),w
  4618                           
  4619                           ; Switch size 1, requested type "space"
  4620                           ; Number of cases is 2, Range of values is 1 to 2
  4621                           ; switch strategies available:
  4622                           ; Name         Instructions Cycles
  4623                           ; simple_byte            7     4 (average)
  4624                           ; direct_byte           13     9 (fixed)
  4625                           ; jumptable            263     9 (fixed)
  4626                           ;	Chosen strategy is simple_byte
  4627  0B38  3A01               	xorlw	1	; case 1
  4628  0B39  1903               	skipnz
  4629  0B3A  2B2E               	goto	l3167
  4630  0B3B  3A03               	xorlw	3	; case 2
  4631  0B3C  1903               	skipnz
  4632  0B3D  2B32               	goto	l3169
  4633  0B3E  2B3F               	goto	l207
  4634  0B3F                     l207:	
  4635  0B3F  0008               	return
  4636  0B40                     __end_of_UART_Task:	
  4637                           
  4638                           	psect	text2
  4639  0E70                     __ptext2:	
  4640 ;; *************** function _EUSART_Write_Frame *****************
  4641 ;; Defined at:
  4642 ;;		line 212 in file "src/eusart.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;  cmd             1    wreg     unsigned char 
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;  cmd             1   21[BANK1 ] unsigned char 
  4647 ;;  u8cnt           1   22[BANK1 ] unsigned char 
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4657 ;;      Params:         0       0       0       0       0       0       0       0
  4658 ;;      Locals:         0       0       2       0       0       0       0       0
  4659 ;;      Temps:          0       0       1       0       0       0       0       0
  4660 ;;      Totals:         0       0       3       0       0       0       0       0
  4661 ;;Total ram usage:        3 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    9
  4664 ;; This function calls:
  4665 ;;		_ADC_Get_Vol
  4666 ;;		_EUSART_Write
  4667 ;; This function is called by:
  4668 ;;		_UART_Task
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           
  4673                           ;psect for function _EUSART_Write_Frame
  4674  0E70                     _EUSART_Write_Frame:	
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in _EUSART_Write_Frame: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4678                           ;EUSART_Write_Frame@cmd stored from wreg
  4679  0E70  0141               	movlb	1	; select bank1
  4680  0E71  00D6               	movwf	EUSART_Write_Frame@cmd^(0+128)
  4681                           
  4682                           ;eusart.c: 214: uint8_t u8cnt;;eusart.c: 215: eusartTxBuffer[0] = 0xF5;
  4683  0E72  30F5               	movlw	245
  4684  0E73  00D5               	movwf	??_EUSART_Write_Frame^(0+128)
  4685  0E74  0855               	movf	??_EUSART_Write_Frame^(0+128),w
  4686  0E75  00A0               	movwf	_eusartTxBuffer^(0+128)
  4687                           
  4688                           ;eusart.c: 216: switch(cmd)
  4689  0E76  2E87               	goto	l3007
  4690  0E77                     l193:	
  4691                           ;eusart.c: 217: {;eusart.c: 218: case 0x01:
  4692                           
  4693                           
  4694                           ;eusart.c: 219: eusartTxBuffer[1] = 0x01;
  4695  0E77  01A1               	clrf	(_eusartTxBuffer^(0+128)+1)
  4696  0E78  0AA1               	incf	(_eusartTxBuffer^(0+128)+1),f
  4697                           
  4698                           ;eusart.c: 220: eusartTxBuffer[2] = 0x00;
  4699  0E79  01A2               	clrf	(_eusartTxBuffer^(0+128)+2)
  4700                           
  4701                           ;eusart.c: 221: break;
  4702  0E7A  2E8F               	goto	l3009
  4703  0E7B                     l3001:	
  4704                           ;eusart.c: 222: case 0x02:
  4705                           
  4706                           
  4707                           ;eusart.c: 223: eusartTxBuffer[1] = 0x02;
  4708  0E7B  3002               	movlw	2
  4709  0E7C  00D5               	movwf	??_EUSART_Write_Frame^(0+128)
  4710  0E7D  0855               	movf	??_EUSART_Write_Frame^(0+128),w
  4711  0E7E  00A1               	movwf	(_eusartTxBuffer^(0+128)+1)
  4712                           
  4713                           ;eusart.c: 224: eusartTxBuffer[2] = ADC_Get_Vol();
  4714  0E7F  318D  252B  318E   	fcall	_ADC_Get_Vol
  4715  0E82  0141               	movlb	1	; select bank1
  4716  0E83  00D5               	movwf	??_EUSART_Write_Frame^(0+128)
  4717  0E84  0855               	movf	??_EUSART_Write_Frame^(0+128),w
  4718  0E85  00A2               	movwf	(_eusartTxBuffer^(0+128)+2)
  4719                           
  4720                           ;eusart.c: 228: }
  4721                           
  4722                           ;eusart.c: 227: break;
  4723                           
  4724                           ;eusart.c: 226: default:
  4725                           
  4726                           ;eusart.c: 225: break;
  4727  0E86  2E8F               	goto	l3009
  4728  0E87                     l3007:	
  4729  0E87  0856               	movf	EUSART_Write_Frame@cmd^(0+128),w
  4730                           
  4731                           ; Switch size 1, requested type "space"
  4732                           ; Number of cases is 2, Range of values is 1 to 2
  4733                           ; switch strategies available:
  4734                           ; Name         Instructions Cycles
  4735                           ; simple_byte            7     4 (average)
  4736                           ; direct_byte           13     9 (fixed)
  4737                           ; jumptable            263     9 (fixed)
  4738                           ;	Chosen strategy is simple_byte
  4739  0E88  3A01               	xorlw	1	; case 1
  4740  0E89  1903               	skipnz
  4741  0E8A  2E77               	goto	l193
  4742  0E8B  3A03               	xorlw	3	; case 2
  4743  0E8C  1903               	skipnz
  4744  0E8D  2E7B               	goto	l3001
  4745  0E8E  2E8F               	goto	l3009
  4746  0E8F                     l3009:	
  4747                           
  4748                           ;eusart.c: 229: eusartTxBuffer[3] = eusartTxBuffer[0] ^ eusartTxBuffer[1] ^ eusartTxBuff
      +                          er[2];
  4749  0E8F  0821               	movf	(_eusartTxBuffer^(0+128)+1),w
  4750  0E90  0622               	xorwf	(_eusartTxBuffer^(0+128)+2),w
  4751  0E91  0620               	xorwf	_eusartTxBuffer^(0+128),w
  4752  0E92  00D5               	movwf	??_EUSART_Write_Frame^(0+128)
  4753  0E93  0855               	movf	??_EUSART_Write_Frame^(0+128),w
  4754  0E94  00A3               	movwf	(_eusartTxBuffer^(0+128)+3)
  4755                           
  4756                           ;eusart.c: 230: eusartTxBuffer[4] = 0x5F;
  4757  0E95  305F               	movlw	95
  4758  0E96  00D5               	movwf	??_EUSART_Write_Frame^(0+128)
  4759  0E97  0855               	movf	??_EUSART_Write_Frame^(0+128),w
  4760  0E98  00A4               	movwf	(_eusartTxBuffer^(0+128)+4)
  4761                           
  4762                           ;eusart.c: 231: for(u8cnt = 0; u8cnt< 5;u8cnt++)
  4763  0E99  01D7               	clrf	EUSART_Write_Frame@u8cnt^(0+128)
  4764  0E9A                     L2:	
  4765  0E9A  3005               	movlw	5
  4766  0E9B  0257               	subwf	EUSART_Write_Frame@u8cnt^(0+128),w
  4767  0E9C  1803               	btfsc	3,0
  4768  0E9D  0008               	return
  4769                           
  4770                           ;eusart.c: 232: {;eusart.c: 233: EUSART_Write(eusartTxBuffer[u8cnt]);
  4771  0E9E  0857               	movf	EUSART_Write_Frame@u8cnt^(0+128),w
  4772  0E9F  3EA0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4773  0EA0  0086               	movwf	6
  4774  0EA1  0187               	clrf	7
  4775  0EA2  0801               	movf	1,w
  4776  0EA3  318C  24D2  318E   	fcall	_EUSART_Write
  4777  0EA6  3001               	movlw	1
  4778  0EA7  0141               	movlb	1	; select bank1
  4779  0EA8  00D5               	movwf	??_EUSART_Write_Frame^(0+128)
  4780  0EA9  0855               	movf	??_EUSART_Write_Frame^(0+128),w
  4781  0EAA  07D7               	addwf	EUSART_Write_Frame@u8cnt^(0+128),f
  4782  0EAB  2E9A               	goto	L2
  4783  0EAC                     __end_of_EUSART_Write_Frame:	
  4784                           ;eusart.c: 234: };eusart.c: 235: return;
  4785                           
  4786                           
  4787                           	psect	text3
  4788  0D2B                     __ptext3:	
  4789 ;; *************** function _ADC_Get_Vol *****************
  4790 ;; Defined at:
  4791 ;;		line 137 in file "src/adc.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;		None
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;  voldata         2   17[BANK1 ] unsigned int 
  4796 ;;  adcdata         2   15[BANK1 ] unsigned int 
  4797 ;;  vol             1   19[BANK1 ] unsigned char 
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      unsigned char 
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0, pclath, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4807 ;;      Params:         0       0       0       0       0       0       0       0
  4808 ;;      Locals:         0       0       5       0       0       0       0       0
  4809 ;;      Temps:          0       0       1       0       0       0       0       0
  4810 ;;      Totals:         0       0       6       0       0       0       0       0
  4811 ;;Total ram usage:        6 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    8
  4814 ;; This function calls:
  4815 ;;		_ADC_GetConversion
  4816 ;;		___lwdiv
  4817 ;;		___wmul
  4818 ;; This function is called by:
  4819 ;;		_EUSART_Write_Frame
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           
  4824                           ;psect for function _ADC_Get_Vol
  4825  0D2B                     _ADC_Get_Vol:	
  4826                           
  4827                           ;adc.c: 139: adc_result_t adcdata,voldata;;adc.c: 140: uint8_t vol;;adc.c: 142: adcdata 
      +                          = ADC_GetConversion(channel_FVR_BUF2);
  4828                           
  4829                           ;incstack = 0
  4830                           ; Regs used in _ADC_Get_Vol: [wreg+status,2+status,0+pclath+cstack]
  4831  0D2B  303F               	movlw	63
  4832  0D2C  318B  236E  318D   	fcall	_ADC_GetConversion
  4833  0D2F  0141               	movlb	1	; select bank1
  4834  0D30  0842               	movf	(?_ADC_GetConversion+1)^(0+128),w
  4835  0D31  00D1               	movwf	(ADC_Get_Vol@adcdata+1)^(0+128)
  4836  0D32  0841               	movf	?_ADC_GetConversion^(0+128),w
  4837  0D33  00D0               	movwf	ADC_Get_Vol@adcdata^(0+128)
  4838                           
  4839                           ;adc.c: 145: voldata = ADC_GetConversion(0x08);
  4840  0D34  3008               	movlw	8
  4841  0D35  318B  236E  318D   	fcall	_ADC_GetConversion
  4842  0D38  0141               	movlb	1	; select bank1
  4843  0D39  0842               	movf	(?_ADC_GetConversion+1)^(0+128),w
  4844  0D3A  00D3               	movwf	(ADC_Get_Vol@voldata+1)^(0+128)
  4845  0D3B  0841               	movf	?_ADC_GetConversion^(0+128),w
  4846  0D3C  00D2               	movwf	ADC_Get_Vol@voldata^(0+128)
  4847                           
  4848                           ;adc.c: 146: vol = voldata*205/adcdata;
  4849  0D3D  0851               	movf	(ADC_Get_Vol@adcdata+1)^(0+128),w
  4850  0D3E  00C8               	movwf	(___lwdiv@divisor+1)^(0+128)
  4851  0D3F  0850               	movf	ADC_Get_Vol@adcdata^(0+128),w
  4852  0D40  00C7               	movwf	___lwdiv@divisor^(0+128)
  4853  0D41  0853               	movf	(ADC_Get_Vol@voldata+1)^(0+128),w
  4854  0D42  00C2               	movwf	(___wmul@multiplier+1)^(0+128)
  4855  0D43  0852               	movf	ADC_Get_Vol@voldata^(0+128),w
  4856  0D44  00C1               	movwf	___wmul@multiplier^(0+128)
  4857  0D45  30CD               	movlw	205
  4858  0D46  00C3               	movwf	___wmul@multiplicand^(0+128)
  4859  0D47  3000               	movlw	0
  4860  0D48  00C4               	movwf	(___wmul@multiplicand^(0+128)+1)
  4861  0D49  318B  2387  318D   	fcall	___wmul
  4862  0D4C  0141               	movlb	1	; select bank1
  4863  0D4D  0842               	movf	(?___wmul+1)^(0+128),w
  4864  0D4E  00CA               	movwf	(___lwdiv@dividend+1)^(0+128)
  4865  0D4F  0841               	movf	?___wmul^(0+128),w
  4866  0D50  00C9               	movwf	___lwdiv@dividend^(0+128)
  4867  0D51  318D  25C4         	fcall	___lwdiv
  4868  0D53  0141               	movlb	1	; select bank1
  4869  0D54  0847               	movf	?___lwdiv^(0+128),w
  4870  0D55  00CF               	movwf	??_ADC_Get_Vol^(0+128)
  4871  0D56  084F               	movf	??_ADC_Get_Vol^(0+128),w
  4872  0D57  00D4               	movwf	ADC_Get_Vol@vol^(0+128)
  4873                           
  4874                           ;adc.c: 151: return vol;
  4875  0D58  0854               	movf	ADC_Get_Vol@vol^(0+128),w
  4876  0D59  0008               	return
  4877  0D5A                     __end_of_ADC_Get_Vol:	
  4878                           
  4879                           	psect	text4
  4880  0B87                     __ptext4:	
  4881 ;; *************** function ___wmul *****************
  4882 ;; Defined at:
  4883 ;;		line 15 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;  multiplier      2    0[BANK1 ] unsigned int 
  4886 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  product         2    4[BANK1 ] unsigned int 
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  2    0[BANK1 ] unsigned int 
  4891 ;; Registers used:
  4892 ;;		wreg, status,2, status,0
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4898 ;;      Params:         0       0       4       0       0       0       0       0
  4899 ;;      Locals:         0       0       2       0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0       0
  4901 ;;      Totals:         0       0       6       0       0       0       0       0
  4902 ;;Total ram usage:        6 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    7
  4905 ;; This function calls:
  4906 ;;		Nothing
  4907 ;; This function is called by:
  4908 ;;		_ADC_Get_Vol
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           
  4913                           ;psect for function ___wmul
  4914  0B87                     ___wmul:	
  4915                           
  4916                           ;incstack = 0
  4917                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4918  0B87  0141               	movlb	1	; select bank1
  4919  0B88  01C5               	clrf	___wmul@product^(0+128)
  4920  0B89  01C6               	clrf	(___wmul@product+1)^(0+128)
  4921  0B8A                     l2463:	
  4922  0B8A  1C41               	btfss	___wmul@multiplier^(0+128),0
  4923  0B8B  2B90               	goto	l557
  4924  0B8C  0843               	movf	___wmul@multiplicand^(0+128),w
  4925  0B8D  07C5               	addwf	___wmul@product^(0+128),f
  4926  0B8E  0844               	movf	(___wmul@multiplicand+1)^(0+128),w
  4927  0B8F  3DC6               	addwfc	(___wmul@product+1)^(0+128),f
  4928  0B90                     l557:	
  4929  0B90  3001               	movlw	1
  4930  0B91                     u2075:	
  4931  0B91  35C3               	lslf	___wmul@multiplicand^(0+128),f
  4932  0B92  0DC4               	rlf	(___wmul@multiplicand+1)^(0+128),f
  4933  0B93  0B89               	decfsz	9,f
  4934  0B94  2B91               	goto	u2075
  4935  0B95  3001               	movlw	1
  4936  0B96                     u2085:	
  4937  0B96  36C2               	lsrf	(___wmul@multiplier+1)^(0+128),f
  4938  0B97  0CC1               	rrf	___wmul@multiplier^(0+128),f
  4939  0B98  0B89               	decfsz	9,f
  4940  0B99  2B96               	goto	u2085
  4941  0B9A  0841               	movf	___wmul@multiplier^(0+128),w
  4942  0B9B  0442               	iorwf	(___wmul@multiplier+1)^(0+128),w
  4943  0B9C  1D03               	btfss	3,2
  4944  0B9D  2B8A               	goto	l2463
  4945  0B9E  0846               	movf	(___wmul@product+1)^(0+128),w
  4946  0B9F  00C2               	movwf	(?___wmul+1)^(0+128)
  4947  0BA0  0845               	movf	___wmul@product^(0+128),w
  4948  0BA1  00C1               	movwf	?___wmul^(0+128)
  4949  0BA2  0008               	return
  4950  0BA3                     __end_of___wmul:	
  4951                           
  4952                           	psect	text5
  4953  0DC4                     __ptext5:	
  4954 ;; *************** function ___lwdiv *****************
  4955 ;; Defined at:
  4956 ;;		line 5 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;  divisor         2    6[BANK1 ] unsigned int 
  4959 ;;  dividend        2    8[BANK1 ] unsigned int 
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  quotient        2   11[BANK1 ] unsigned int 
  4962 ;;  counter         1   13[BANK1 ] unsigned char 
  4963 ;; Return value:  Size  Location     Type
  4964 ;;                  2    6[BANK1 ] unsigned int 
  4965 ;; Registers used:
  4966 ;;		wreg, status,2, status,0
  4967 ;; Tracked objects:
  4968 ;;		On entry : 0/0
  4969 ;;		On exit  : 0/0
  4970 ;;		Unchanged: 0/0
  4971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4972 ;;      Params:         0       0       4       0       0       0       0       0
  4973 ;;      Locals:         0       0       3       0       0       0       0       0
  4974 ;;      Temps:          0       0       1       0       0       0       0       0
  4975 ;;      Totals:         0       0       8       0       0       0       0       0
  4976 ;;Total ram usage:        8 bytes
  4977 ;; Hardware stack levels used:    1
  4978 ;; Hardware stack levels required when called:    7
  4979 ;; This function calls:
  4980 ;;		Nothing
  4981 ;; This function is called by:
  4982 ;;		_ADC_Get_Vol
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           
  4987                           ;psect for function ___lwdiv
  4988  0DC4                     ___lwdiv:	
  4989                           
  4990                           ;incstack = 0
  4991                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4992  0DC4  0141               	movlb	1	; select bank1
  4993  0DC5  01CC               	clrf	___lwdiv@quotient^(0+128)
  4994  0DC6  01CD               	clrf	(___lwdiv@quotient+1)^(0+128)
  4995  0DC7  0847               	movf	___lwdiv@divisor^(0+128),w
  4996  0DC8  0448               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  4997  0DC9  1903               	btfsc	3,2
  4998  0DCA  2DF4               	goto	l2719
  4999  0DCB  01CE               	clrf	___lwdiv@counter^(0+128)
  5000  0DCC  0ACE               	incf	___lwdiv@counter^(0+128),f
  5001  0DCD                     l2707:	
  5002  0DCD  1BC8               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  5003  0DCE  2DD9               	goto	l2709
  5004  0DCF  3001               	movlw	1
  5005  0DD0                     u2665:	
  5006  0DD0  35C7               	lslf	___lwdiv@divisor^(0+128),f
  5007  0DD1  0DC8               	rlf	(___lwdiv@divisor+1)^(0+128),f
  5008  0DD2  0B89               	decfsz	9,f
  5009  0DD3  2DD0               	goto	u2665
  5010  0DD4  3001               	movlw	1
  5011  0DD5  00CB               	movwf	??___lwdiv^(0+128)
  5012  0DD6  084B               	movf	??___lwdiv^(0+128),w
  5013  0DD7  07CE               	addwf	___lwdiv@counter^(0+128),f
  5014  0DD8  2DCD               	goto	l2707
  5015  0DD9                     l2709:	
  5016  0DD9  3001               	movlw	1
  5017  0DDA                     u2685:	
  5018  0DDA  35CC               	lslf	___lwdiv@quotient^(0+128),f
  5019  0DDB  0DCD               	rlf	(___lwdiv@quotient+1)^(0+128),f
  5020  0DDC  0B89               	decfsz	9,f
  5021  0DDD  2DDA               	goto	u2685
  5022  0DDE  0848               	movf	(___lwdiv@divisor+1)^(0+128),w
  5023  0DDF  024A               	subwf	(___lwdiv@dividend+1)^(0+128),w
  5024  0DE0  1D03               	skipz
  5025  0DE1  2DE4               	goto	u2695
  5026  0DE2  0847               	movf	___lwdiv@divisor^(0+128),w
  5027  0DE3  0249               	subwf	___lwdiv@dividend^(0+128),w
  5028  0DE4                     u2695:	
  5029  0DE4  1C03               	skipc
  5030  0DE5  2DEB               	goto	l2715
  5031  0DE6  0847               	movf	___lwdiv@divisor^(0+128),w
  5032  0DE7  02C9               	subwf	___lwdiv@dividend^(0+128),f
  5033  0DE8  0848               	movf	(___lwdiv@divisor+1)^(0+128),w
  5034  0DE9  3BCA               	subwfb	(___lwdiv@dividend+1)^(0+128),f
  5035  0DEA  144C               	bsf	___lwdiv@quotient^(0+128),0
  5036  0DEB                     l2715:	
  5037  0DEB  3001               	movlw	1
  5038  0DEC                     u2705:	
  5039  0DEC  36C8               	lsrf	(___lwdiv@divisor+1)^(0+128),f
  5040  0DED  0CC7               	rrf	___lwdiv@divisor^(0+128),f
  5041  0DEE  0B89               	decfsz	9,f
  5042  0DEF  2DEC               	goto	u2705
  5043  0DF0  3001               	movlw	1
  5044  0DF1  02CE               	subwf	___lwdiv@counter^(0+128),f
  5045  0DF2  1D03               	btfss	3,2
  5046  0DF3  2DD9               	goto	l2709
  5047  0DF4                     l2719:	
  5048  0DF4  084D               	movf	(___lwdiv@quotient+1)^(0+128),w
  5049  0DF5  00C8               	movwf	(?___lwdiv+1)^(0+128)
  5050  0DF6  084C               	movf	___lwdiv@quotient^(0+128),w
  5051  0DF7  00C7               	movwf	?___lwdiv^(0+128)
  5052  0DF8  0008               	return
  5053  0DF9                     __end_of___lwdiv:	
  5054                           
  5055                           	psect	text6
  5056  0B6E                     __ptext6:	
  5057 ;; *************** function _ADC_GetConversion *****************
  5058 ;; Defined at:
  5059 ;;		line 114 in file "src/adc.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;  channel         1    wreg     enum E7175
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  channel         1    3[BANK1 ] enum E7175
  5064 ;; Return value:  Size  Location     Type
  5065 ;;                  2    0[BANK1 ] unsigned int 
  5066 ;; Registers used:
  5067 ;;		wreg, status,2, status,0
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/0
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5073 ;;      Params:         0       0       2       0       0       0       0       0
  5074 ;;      Locals:         0       0       1       0       0       0       0       0
  5075 ;;      Temps:          0       0       1       0       0       0       0       0
  5076 ;;      Totals:         0       0       4       0       0       0       0       0
  5077 ;;Total ram usage:        4 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; Hardware stack levels required when called:    7
  5080 ;; This function calls:
  5081 ;;		Nothing
  5082 ;; This function is called by:
  5083 ;;		_ADC_Get_Vol
  5084 ;;		_ADC_Test
  5085 ;; This function uses a non-reentrant model
  5086 ;;
  5087                           
  5088                           
  5089                           ;psect for function _ADC_GetConversion
  5090  0B6E                     _ADC_GetConversion:	
  5091                           
  5092                           ;incstack = 0
  5093                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  5094                           ;ADC_GetConversion@channel stored from wreg
  5095  0B6E  0141               	movlb	1	; select bank1
  5096  0B6F  00C4               	movwf	ADC_GetConversion@channel^(0+128)
  5097                           
  5098                           ;adc.c: 117: ADCON0bits.CHS = channel;
  5099  0B70  0844               	movf	ADC_GetConversion@channel^(0+128),w
  5100  0B71  00C3               	movwf	??_ADC_GetConversion^(0+128)
  5101  0B72  0DC3               	rlf	??_ADC_GetConversion^(0+128),f
  5102  0B73  0DC3               	rlf	??_ADC_GetConversion^(0+128),f
  5103  0B74  081D               	movf	29,w	;volatile
  5104  0B75  0643               	xorwf	??_ADC_GetConversion^(0+128),w
  5105  0B76  3903               	andlw	-253
  5106  0B77  0643               	xorwf	??_ADC_GetConversion^(0+128),w
  5107  0B78  009D               	movwf	29	;volatile
  5108                           
  5109                           ;adc.c: 120: ADCON0bits.ADON = 1;
  5110  0B79  141D               	bsf	29,0	;volatile
  5111                           
  5112                           ;adc.c: 122: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5113  0B7A  3003               	movlw	3
  5114  0B7B                     u3637:	
  5115  0B7B  0B89               	decfsz	9,f
  5116  0B7C  2B7B               	goto	u3637
  5117  0B7D  0000               	nop
  5118                           
  5119                           ;adc.c: 125: ADCON0bits.GO = 1;
  5120  0B7E  0141               	movlb	1	; select bank1
  5121  0B7F  149D               	bsf	29,1	;volatile
  5122  0B80                     l288:	
  5123                           ;adc.c: 129: {
  5124                           
  5125                           ;adc.c: 128: while (ADCON0bits.GO)
  5126                           
  5127  0B80  189D               	btfsc	29,1	;volatile
  5128  0B81  2B80               	goto	l288
  5129                           
  5130                           ;adc.c: 130: };adc.c: 132: return ((ADRESH << 8) + ADRESL);
  5131  0B82  081C               	movf	28,w	;volatile
  5132  0B83  00C2               	movwf	(?_ADC_GetConversion+1)^(0+128)
  5133  0B84  081B               	movf	27,w	;volatile
  5134  0B85  00C1               	movwf	?_ADC_GetConversion^(0+128)
  5135  0B86  0008               	return
  5136  0B87                     __end_of_ADC_GetConversion:	
  5137                           
  5138                           	psect	text7
  5139  0A75                     __ptext7:	
  5140 ;; *************** function _TMR0_StopTimer *****************
  5141 ;; Defined at:
  5142 ;;		line 103 in file "src/tmr0.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;		None
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;		None
  5147 ;; Return value:  Size  Location     Type
  5148 ;;                  1    wreg      void 
  5149 ;; Registers used:
  5150 ;;		None
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5156 ;;      Params:         0       0       0       0       0       0       0       0
  5157 ;;      Locals:         0       0       0       0       0       0       0       0
  5158 ;;      Temps:          0       0       0       0       0       0       0       0
  5159 ;;      Totals:         0       0       0       0       0       0       0       0
  5160 ;;Total ram usage:        0 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; Hardware stack levels required when called:    7
  5163 ;; This function calls:
  5164 ;;		Nothing
  5165 ;; This function is called by:
  5166 ;;		_main
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           
  5171                           ;psect for function _TMR0_StopTimer
  5172  0A75                     _TMR0_StopTimer:	
  5173                           
  5174                           ;tmr0.c: 106: T0CON0bits.T0EN = 0;
  5175                           
  5176                           ;incstack = 0
  5177                           ; Regs used in _TMR0_StopTimer: []
  5178  0A75  014B               	movlb	11	; select bank11
  5179  0A76  139E               	bcf	30,7	;volatile
  5180  0A77  0008               	return
  5181  0A78                     __end_of_TMR0_StopTimer:	
  5182                           
  5183                           	psect	text8
  5184  0A7D                     __ptext8:	
  5185 ;; *************** function _TMR0_StartTimer *****************
  5186 ;; Defined at:
  5187 ;;		line 94 in file "src/tmr0.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;		None
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;		None
  5192 ;; Return value:  Size  Location     Type
  5193 ;;                  1    wreg      void 
  5194 ;; Registers used:
  5195 ;;		None
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : 0/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5201 ;;      Params:         0       0       0       0       0       0       0       0
  5202 ;;      Locals:         0       0       0       0       0       0       0       0
  5203 ;;      Temps:          0       0       0       0       0       0       0       0
  5204 ;;      Totals:         0       0       0       0       0       0       0       0
  5205 ;;Total ram usage:        0 bytes
  5206 ;; Hardware stack levels used:    1
  5207 ;; Hardware stack levels required when called:    7
  5208 ;; This function calls:
  5209 ;;		Nothing
  5210 ;; This function is called by:
  5211 ;;		_main
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           
  5216                           ;psect for function _TMR0_StartTimer
  5217  0A7D                     _TMR0_StartTimer:	
  5218                           
  5219                           ;tmr0.c: 97: if(T0CON0bits.T0EN == 0)
  5220                           
  5221                           ;incstack = 0
  5222                           ; Regs used in _TMR0_StartTimer: []
  5223  0A7D  014B               	movlb	11	; select bank11
  5224  0A7E  1B9E               	btfsc	30,7	;volatile
  5225  0A7F  0008               	return
  5226                           
  5227                           ;tmr0.c: 98: {;tmr0.c: 99: T0CON0bits.T0EN = 1;
  5228  0A80  179E               	bsf	30,7	;volatile
  5229  0A81  0008               	return
  5230  0A82                     __end_of_TMR0_StartTimer:	
  5231                           
  5232                           	psect	text9
  5233  0B56                     __ptext9:	
  5234 ;; *************** function _SYSTEM_Initialize *****************
  5235 ;; Defined at:
  5236 ;;		line 93 in file "src/mcc.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;		None
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;		None
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  1    wreg      void 
  5243 ;; Registers used:
  5244 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5250 ;;      Params:         0       0       0       0       0       0       0       0
  5251 ;;      Locals:         0       0       0       0       0       0       0       0
  5252 ;;      Temps:          0       0       0       0       0       0       0       0
  5253 ;;      Totals:         0       0       0       0       0       0       0       0
  5254 ;;Total ram usage:        0 bytes
  5255 ;; Hardware stack levels used:    1
  5256 ;; Hardware stack levels required when called:   12
  5257 ;; This function calls:
  5258 ;;		_ADC_Initialize
  5259 ;;		_EUSART_Initialize
  5260 ;;		_Init_MPU6500
  5261 ;;		_Interrupt_Enable
  5262 ;;		_OSCILLATOR_Initialize
  5263 ;;		_PIN_MANAGER_Initialize
  5264 ;;		_PMD_Initialize
  5265 ;;		_TMR0_Initialize
  5266 ;; This function is called by:
  5267 ;;		_main
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           
  5272                           ;psect for function _SYSTEM_Initialize
  5273  0B56                     _SYSTEM_Initialize:	
  5274                           
  5275                           ;mcc.c: 95: PMD_Initialize();
  5276                           
  5277                           ;incstack = 0
  5278                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5279  0B56  318A  228F  318B   	fcall	_PMD_Initialize
  5280                           
  5281                           ;mcc.c: 96: PIN_MANAGER_Initialize();
  5282  0B59  318D  258F  318B   	fcall	_PIN_MANAGER_Initialize
  5283                           
  5284                           ;mcc.c: 97: OSCILLATOR_Initialize();
  5285  0B5C  318A  22AA  318B   	fcall	_OSCILLATOR_Initialize
  5286                           
  5287                           ;mcc.c: 98: EUSART_Initialize();
  5288  0B5F  318B  23C0  318B   	fcall	_EUSART_Initialize
  5289                           
  5290                           ;mcc.c: 103: ADC_Initialize();
  5291  0B62  318A  22DD  318B   	fcall	_ADC_Initialize
  5292                           
  5293                           ;mcc.c: 104: Init_MPU6500();
  5294  0B65  318F  27B5  318B   	fcall	_Init_MPU6500
  5295                           
  5296                           ;mcc.c: 105: TMR0_Initialize();
  5297  0B68  318A  22B4  318B   	fcall	_TMR0_Initialize
  5298                           
  5299                           ;mcc.c: 106: Interrupt_Enable();
  5300  0B6B  318A  2272         	fcall	_Interrupt_Enable
  5301  0B6D  0008               	return
  5302  0B6E                     __end_of_SYSTEM_Initialize:	
  5303                           
  5304                           	psect	text10
  5305  0AB4                     __ptext10:	
  5306 ;; *************** function _TMR0_Initialize *****************
  5307 ;; Defined at:
  5308 ;;		line 70 in file "src/tmr0.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;		None
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;		None
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  1    wreg      void 
  5315 ;; Registers used:
  5316 ;;		wreg, status,2
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5322 ;;      Params:         0       0       0       0       0       0       0       0
  5323 ;;      Locals:         0       0       0       0       0       0       0       0
  5324 ;;      Temps:          0       0       0       0       0       0       0       0
  5325 ;;      Totals:         0       0       0       0       0       0       0       0
  5326 ;;Total ram usage:        0 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:    7
  5329 ;; This function calls:
  5330 ;;		Nothing
  5331 ;; This function is called by:
  5332 ;;		_SYSTEM_Initialize
  5333 ;; This function uses a non-reentrant model
  5334 ;;
  5335                           
  5336                           
  5337                           ;psect for function _TMR0_Initialize
  5338  0AB4                     _TMR0_Initialize:	
  5339                           
  5340                           ;tmr0.c: 75: T0CON1 = 0x7B;
  5341                           
  5342                           ;incstack = 0
  5343                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  5344  0AB4  307B               	movlw	123
  5345  0AB5  014B               	movlb	11	; select bank11
  5346  0AB6  009F               	movwf	31	;volatile
  5347                           
  5348                           ;tmr0.c: 78: TMR0H = 158;
  5349  0AB7  309E               	movlw	158
  5350  0AB8  009D               	movwf	29	;volatile
  5351                           
  5352                           ;tmr0.c: 81: TMR0L = 0x00;
  5353  0AB9  019C               	clrf	28	;volatile
  5354                           
  5355                           ;tmr0.c: 84: PIR0bits.TMR0IF = 0;
  5356  0ABA  014E               	movlb	14	; select bank14
  5357  0ABB  128C               	bcf	12,5	;volatile
  5358                           
  5359                           ;tmr0.c: 87: PIE0bits.TMR0IE = 1;
  5360  0ABC  1696               	bsf	22,5	;volatile
  5361                           
  5362                           ;tmr0.c: 91: T0CON0 = 0x80;
  5363  0ABD  3080               	movlw	128
  5364  0ABE  014B               	movlb	11	; select bank11
  5365  0ABF  009E               	movwf	30	;volatile
  5366  0AC0  0008               	return
  5367  0AC1                     __end_of_TMR0_Initialize:	
  5368                           
  5369                           	psect	text11
  5370  0A8F                     __ptext11:	
  5371 ;; *************** function _PMD_Initialize *****************
  5372 ;; Defined at:
  5373 ;;		line 128 in file "src/mcc.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;		None
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;		None
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  1    wreg      void 
  5380 ;; Registers used:
  5381 ;;		status,2
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5387 ;;      Params:         0       0       0       0       0       0       0       0
  5388 ;;      Locals:         0       0       0       0       0       0       0       0
  5389 ;;      Temps:          0       0       0       0       0       0       0       0
  5390 ;;      Totals:         0       0       0       0       0       0       0       0
  5391 ;;Total ram usage:        0 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:    7
  5394 ;; This function calls:
  5395 ;;		Nothing
  5396 ;; This function is called by:
  5397 ;;		_SYSTEM_Initialize
  5398 ;; This function uses a non-reentrant model
  5399 ;;
  5400                           
  5401                           
  5402                           ;psect for function _PMD_Initialize
  5403  0A8F                     _PMD_Initialize:	
  5404                           
  5405                           ;mcc.c: 131: PMD0 = 0x00;
  5406                           
  5407                           ;incstack = 0
  5408                           ; Regs used in _PMD_Initialize: [status,2]
  5409  0A8F  014F               	movlb	15	; select bank15
  5410  0A90  0196               	clrf	22	;volatile
  5411                           
  5412                           ;mcc.c: 133: PMD1 = 0x00;
  5413  0A91  0197               	clrf	23	;volatile
  5414                           
  5415                           ;mcc.c: 135: PMD2 = 0x00;
  5416  0A92  0198               	clrf	24	;volatile
  5417                           
  5418                           ;mcc.c: 137: PMD3 = 0x00;
  5419  0A93  0199               	clrf	25	;volatile
  5420                           
  5421                           ;mcc.c: 139: PMD4 = 0x00;
  5422  0A94  019A               	clrf	26	;volatile
  5423                           
  5424                           ;mcc.c: 141: PMD5 = 0x00;
  5425  0A95  019B               	clrf	27	;volatile
  5426  0A96  0008               	return
  5427  0A97                     __end_of_PMD_Initialize:	
  5428                           
  5429                           	psect	text12
  5430  0D8F                     __ptext12:	
  5431 ;; *************** function _PIN_MANAGER_Initialize *****************
  5432 ;; Defined at:
  5433 ;;		line 50 in file "src/gpio.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;		None
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;		None
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      void 
  5440 ;; Registers used:
  5441 ;;		wreg, status,2, status,0
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5447 ;;      Params:         0       0       0       0       0       0       0       0
  5448 ;;      Locals:         0       0       0       0       0       0       0       0
  5449 ;;      Temps:          0       0       1       0       0       0       0       0
  5450 ;;      Totals:         0       0       1       0       0       0       0       0
  5451 ;;Total ram usage:        1 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:    7
  5454 ;; This function calls:
  5455 ;;		Nothing
  5456 ;; This function is called by:
  5457 ;;		_SYSTEM_Initialize
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           
  5462                           ;psect for function _PIN_MANAGER_Initialize
  5463  0D8F                     _PIN_MANAGER_Initialize:	
  5464                           
  5465                           ;gpio.c: 55: LATA = 0x00;
  5466                           
  5467                           ;incstack = 0
  5468                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5469  0D8F  0140               	movlb	0	; select bank0
  5470  0D90  0198               	clrf	24	;volatile
  5471                           
  5472                           ;gpio.c: 56: LATB = 0x00;
  5473  0D91  0199               	clrf	25	;volatile
  5474                           
  5475                           ;gpio.c: 57: LATC = 0x00;
  5476  0D92  019A               	clrf	26	;volatile
  5477                           
  5478                           ;gpio.c: 62: TRISA = 0x00;
  5479  0D93  0192               	clrf	18	;volatile
  5480                           
  5481                           ;gpio.c: 64: TRISB = 0x27;
  5482  0D94  3027               	movlw	39
  5483  0D95  0093               	movwf	19	;volatile
  5484                           
  5485                           ;gpio.c: 66: TRISC = 0xA1;
  5486  0D96  30A1               	movlw	161
  5487  0D97  0094               	movwf	20	;volatile
  5488                           
  5489                           ;gpio.c: 68: TRISE = 0x00;
  5490  0D98  0196               	clrf	22	;volatile
  5491                           
  5492                           ;gpio.c: 74: ANSELA = 0x00;
  5493  0D99  017E               	movlb	62	; select bank62
  5494  0D9A  01B8               	clrf	56	;volatile
  5495                           
  5496                           ;gpio.c: 76: ANSELB = 0x01;
  5497  0D9B  3001               	movlw	1
  5498  0D9C  00C3               	movwf	67	;volatile
  5499                           
  5500                           ;gpio.c: 78: ANSELC = 0x00;
  5501  0D9D  01CE               	clrf	78	;volatile
  5502                           
  5503                           ;gpio.c: 83: WPUE = 0x00;
  5504  0D9E  01E5               	clrf	101	;volatile
  5505                           
  5506                           ;gpio.c: 84: WPUB = 0x26;
  5507  0D9F  3026               	movlw	38
  5508  0DA0  00C4               	movwf	68	;volatile
  5509                           
  5510                           ;gpio.c: 85: WPUA = 0x00;
  5511  0DA1  01B9               	clrf	57	;volatile
  5512                           
  5513                           ;gpio.c: 86: WPUC = 0x01;
  5514  0DA2  3001               	movlw	1
  5515  0DA3  00CF               	movwf	79	;volatile
  5516                           
  5517                           ;gpio.c: 91: ODCONA = 0x00;
  5518  0DA4  01BA               	clrf	58	;volatile
  5519                           
  5520                           ;gpio.c: 92: ODCONB = 0x00;
  5521  0DA5  01C5               	clrf	69	;volatile
  5522                           
  5523                           ;gpio.c: 93: ODCONC = 0x00;
  5524  0DA6  01D0               	clrf	80	;volatile
  5525                           
  5526                           ;gpio.c: 98: RX1DTPPSbits.RX1DTPPS = 0x17;
  5527  0DA7  017D               	movlb	61	; select bank61
  5528  0DA8  084B               	movf	75,w	;volatile
  5529  0DA9  39C0               	andlw	-64
  5530  0DAA  3817               	iorlw	23
  5531  0DAB  00CB               	movwf	75	;volatile
  5532                           
  5533                           ;gpio.c: 100: RC6PPS = 0x0F;
  5534  0DAC  300F               	movlw	15
  5535  0DAD  017E               	movlb	62	; select bank62
  5536  0DAE  00A6               	movwf	38	;volatile
  5537                           
  5538                           ;gpio.c: 102: PORTC |= 0x04;
  5539  0DAF  0140               	movlb	0	; select bank0
  5540  0DB0  150E               	bsf	14,2	;volatile
  5541                           
  5542                           ;gpio.c: 105: PORTB |= 0x18;
  5543  0DB1  3018               	movlw	24
  5544  0DB2  0141               	movlb	1	; select bank1
  5545  0DB3  00C1               	movwf	??_PIN_MANAGER_Initialize^(0+128)
  5546  0DB4  0841               	movf	??_PIN_MANAGER_Initialize^(0+128),w
  5547  0DB5  0140               	movlb	0	; select bank0
  5548  0DB6  048D               	iorwf	13,f	;volatile
  5549                           
  5550                           ;gpio.c: 108: ODCONC |= 0x18;
  5551  0DB7  3018               	movlw	24
  5552  0DB8  0141               	movlb	1	; select bank1
  5553  0DB9  00C1               	movwf	??_PIN_MANAGER_Initialize^(0+128)
  5554  0DBA  0841               	movf	??_PIN_MANAGER_Initialize^(0+128),w
  5555  0DBB  017E               	movlb	62	; select bank62
  5556  0DBC  04D0               	iorwf	80,f	;volatile
  5557                           
  5558                           ;gpio.c: 121: IOCBNbits.IOCBN1 = 1;
  5559  0DBD  14C9               	bsf	73,1	;volatile
  5560                           
  5561                           ;gpio.c: 122: IOCBNbits.IOCBN2 = 1;
  5562  0DBE  1549               	bsf	73,2	;volatile
  5563                           
  5564                           ;gpio.c: 123: IOCBNbits.IOCBN5 = 1;
  5565  0DBF  16C9               	bsf	73,5	;volatile
  5566                           
  5567                           ;gpio.c: 124: IOCCNbits.IOCCN0 = 1;
  5568  0DC0  1454               	bsf	84,0	;volatile
  5569                           
  5570                           ;gpio.c: 129: PIE0bits.IOCIE = 1;
  5571  0DC1  014E               	movlb	14	; select bank14
  5572  0DC2  1616               	bsf	22,4	;volatile
  5573  0DC3  0008               	return
  5574  0DC4                     __end_of_PIN_MANAGER_Initialize:	
  5575                           
  5576                           	psect	text13
  5577  0AAA                     __ptext13:	
  5578 ;; *************** function _OSCILLATOR_Initialize *****************
  5579 ;; Defined at:
  5580 ;;		line 112 in file "src/mcc.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;		None
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;		None
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  1    wreg      void 
  5587 ;; Registers used:
  5588 ;;		wreg, status,2
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5594 ;;      Params:         0       0       0       0       0       0       0       0
  5595 ;;      Locals:         0       0       0       0       0       0       0       0
  5596 ;;      Temps:          0       0       0       0       0       0       0       0
  5597 ;;      Totals:         0       0       0       0       0       0       0       0
  5598 ;;Total ram usage:        0 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    7
  5601 ;; This function calls:
  5602 ;;		Nothing
  5603 ;; This function is called by:
  5604 ;;		_SYSTEM_Initialize
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           
  5609                           ;psect for function _OSCILLATOR_Initialize
  5610  0AAA                     _OSCILLATOR_Initialize:	
  5611                           
  5612                           ;mcc.c: 115: OSCCON1 = 0x60;
  5613                           
  5614                           ;incstack = 0
  5615                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5616  0AAA  3060               	movlw	96
  5617  0AAB  0151               	movlb	17	; select bank17
  5618  0AAC  008D               	movwf	13	;volatile
  5619                           
  5620                           ;mcc.c: 117: OSCCON3 = 0x00;
  5621  0AAD  018F               	clrf	15	;volatile
  5622                           
  5623                           ;mcc.c: 119: OSCEN = 0x00;
  5624  0AAE  0191               	clrf	17	;volatile
  5625                           
  5626                           ;mcc.c: 121: OSCFRQ = 0x06;
  5627  0AAF  3006               	movlw	6
  5628  0AB0  0093               	movwf	19	;volatile
  5629                           
  5630                           ;mcc.c: 123: OSCSTAT = 0x00;
  5631  0AB1  0190               	clrf	16	;volatile
  5632                           
  5633                           ;mcc.c: 125: OSCTUNE = 0x00;
  5634  0AB2  0192               	clrf	18	;volatile
  5635  0AB3  0008               	return
  5636  0AB4                     __end_of_OSCILLATOR_Initialize:	
  5637                           
  5638                           	psect	text14
  5639  0A72                     __ptext14:	
  5640 ;; *************** function _Interrupt_Enable *****************
  5641 ;; Defined at:
  5642 ;;		line 102 in file "src/interrupt_manager.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;		None
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;		None
  5647 ;; Return value:  Size  Location     Type
  5648 ;;                  1    wreg      void 
  5649 ;; Registers used:
  5650 ;;		None
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5656 ;;      Params:         0       0       0       0       0       0       0       0
  5657 ;;      Locals:         0       0       0       0       0       0       0       0
  5658 ;;      Temps:          0       0       0       0       0       0       0       0
  5659 ;;      Totals:         0       0       0       0       0       0       0       0
  5660 ;;Total ram usage:        0 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; Hardware stack levels required when called:    7
  5663 ;; This function calls:
  5664 ;;		Nothing
  5665 ;; This function is called by:
  5666 ;;		_SYSTEM_Initialize
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           
  5671                           ;psect for function _Interrupt_Enable
  5672  0A72                     _Interrupt_Enable:	
  5673                           
  5674                           ;interrupt_manager.c: 104: (INTCONbits.GIE = 1);
  5675                           
  5676                           ;incstack = 0
  5677                           ; Regs used in _Interrupt_Enable: []
  5678  0A72  178B               	bsf	11,7	;volatile
  5679                           
  5680                           ;interrupt_manager.c: 105: (INTCONbits.PEIE = 1);
  5681  0A73  170B               	bsf	11,6	;volatile
  5682  0A74  0008               	return
  5683  0A75                     __end_of_Interrupt_Enable:	
  5684                           
  5685                           	psect	text15
  5686  0FB5                     __ptext15:	
  5687 ;; *************** function _Init_MPU6500 *****************
  5688 ;; Defined at:
  5689 ;;		line 281 in file "src/mpu_iic.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;		None
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  1    wreg      void 
  5696 ;; Registers used:
  5697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5703 ;;      Params:         0       0       0       0       0       0       0       0
  5704 ;;      Locals:         0       0       0       0       0       0       0       0
  5705 ;;      Temps:          0       0       2       0       0       0       0       0
  5706 ;;      Totals:         0       0       2       0       0       0       0       0
  5707 ;;Total ram usage:        2 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:   11
  5710 ;; This function calls:
  5711 ;;		_Com_Lock_MPU_RD_Reg
  5712 ;;		_Com_Lock_MPU_Write_Command
  5713 ;;		_Read_Offset
  5714 ;; This function is called by:
  5715 ;;		_SYSTEM_Initialize
  5716 ;; This function uses a non-reentrant model
  5717 ;;
  5718                           
  5719                           
  5720                           ;psect for function _Init_MPU6500
  5721  0FB5                     _Init_MPU6500:	
  5722                           
  5723                           ;mpu_iic.c: 283: _delay((unsigned long)((200)*(8000000/1000.0)));
  5724                           
  5725                           ;incstack = 0
  5726                           ; Regs used in _Init_MPU6500: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5727  0FB5  3009               	movlw	9
  5728  0FB6  0141               	movlb	1	; select bank1
  5729  0FB7  00DD               	movwf	(??_Init_MPU6500^(0+128)+1)
  5730  0FB8  301E               	movlw	30
  5731  0FB9  00DC               	movwf	??_Init_MPU6500^(0+128)
  5732  0FBA  30E4               	movlw	228
  5733  0FBB                     u3647:	
  5734  0FBB  0B89               	decfsz	9,f
  5735  0FBC  2FBB               	goto	u3647
  5736  0FBD  0BDC               	decfsz	??_Init_MPU6500^(0+128),f
  5737  0FBE  2FBB               	goto	u3647
  5738  0FBF  0BDD               	decfsz	(??_Init_MPU6500^(0+128)+1),f
  5739  0FC0  2FBB               	goto	u3647
  5740  0FC1  0000               	nop
  5741                           
  5742                           ;mpu_iic.c: 285: if(Com_Lock_MPU_RD_Reg(0x75) == 0x70)
  5743  0FC2  3075               	movlw	117
  5744  0FC3  318C  24FD  318F   	fcall	_Com_Lock_MPU_RD_Reg
  5745  0FC6  3A70               	xorlw	112
  5746  0FC7  1D03               	skipz
  5747  0FC8  0008               	return
  5748                           
  5749                           ;mpu_iic.c: 286: {;mpu_iic.c: 287: Com_Lock_MPU_Write_Command(0x6B,0x00);
  5750  0FC9  0141               	movlb	1	; select bank1
  5751  0FCA  01C6               	clrf	Com_Lock_MPU_Write_Command@data^(0+128)
  5752  0FCB  306B               	movlw	107
  5753  0FCC  318B  2340  318F   	fcall	_Com_Lock_MPU_Write_Command
  5754                           
  5755                           ;mpu_iic.c: 288: Com_Lock_MPU_Write_Command(0x19, 0x07);
  5756  0FCF  3007               	movlw	7
  5757  0FD0  0141               	movlb	1	; select bank1
  5758  0FD1  00DC               	movwf	??_Init_MPU6500^(0+128)
  5759  0FD2  085C               	movf	??_Init_MPU6500^(0+128),w
  5760  0FD3  00C6               	movwf	Com_Lock_MPU_Write_Command@data^(0+128)
  5761  0FD4  3019               	movlw	25
  5762  0FD5  318B  2340  318F   	fcall	_Com_Lock_MPU_Write_Command
  5763                           
  5764                           ;mpu_iic.c: 289: Com_Lock_MPU_Write_Command(0x1A, 0x06);
  5765  0FD8  3006               	movlw	6
  5766  0FD9  0141               	movlb	1	; select bank1
  5767  0FDA  00DC               	movwf	??_Init_MPU6500^(0+128)
  5768  0FDB  085C               	movf	??_Init_MPU6500^(0+128),w
  5769  0FDC  00C6               	movwf	Com_Lock_MPU_Write_Command@data^(0+128)
  5770  0FDD  301A               	movlw	26
  5771  0FDE  318B  2340  318F   	fcall	_Com_Lock_MPU_Write_Command
  5772                           
  5773                           ;mpu_iic.c: 290: Com_Lock_MPU_Write_Command(0x1B, 0x00);
  5774  0FE1  0141               	movlb	1	; select bank1
  5775  0FE2  01C6               	clrf	Com_Lock_MPU_Write_Command@data^(0+128)
  5776  0FE3  301B               	movlw	27
  5777  0FE4  318B  2340  318F   	fcall	_Com_Lock_MPU_Write_Command
  5778                           
  5779                           ;mpu_iic.c: 291: Com_Lock_MPU_Write_Command(0x6C,0x3d);
  5780  0FE7  303D               	movlw	61
  5781  0FE8  0141               	movlb	1	; select bank1
  5782  0FE9  00DC               	movwf	??_Init_MPU6500^(0+128)
  5783  0FEA  085C               	movf	??_Init_MPU6500^(0+128),w
  5784  0FEB  00C6               	movwf	Com_Lock_MPU_Write_Command@data^(0+128)
  5785  0FEC  306C               	movlw	108
  5786  0FED  318B  2340  318F   	fcall	_Com_Lock_MPU_Write_Command
  5787                           
  5788                           ;mpu_iic.c: 293: _delay((unsigned long)((200)*(8000000/1000.0)));
  5789  0FF0  3009               	movlw	9
  5790  0FF1  0141               	movlb	1	; select bank1
  5791  0FF2  00DD               	movwf	(??_Init_MPU6500^(0+128)+1)
  5792  0FF3  301E               	movlw	30
  5793  0FF4  00DC               	movwf	??_Init_MPU6500^(0+128)
  5794  0FF5  30E4               	movlw	228
  5795  0FF6                     u3657:	
  5796  0FF6  0B89               	decfsz	9,f
  5797  0FF7  2FF6               	goto	u3657
  5798  0FF8  0BDC               	decfsz	??_Init_MPU6500^(0+128),f
  5799  0FF9  2FF6               	goto	u3657
  5800  0FFA  0BDD               	decfsz	(??_Init_MPU6500^(0+128)+1),f
  5801  0FFB  2FF6               	goto	u3657
  5802  0FFC  0000               	nop
  5803                           
  5804                           ;mpu_iic.c: 294: Read_Offset();
  5805  0FFD  3186  2689         	fcall	_Read_Offset
  5806  0FFF  0008               	return
  5807  1000                     __end_of_Init_MPU6500:	
  5808                           
  5809                           	psect	text16
  5810  0689                     __ptext16:	
  5811 ;; *************** function _Read_Offset *****************
  5812 ;; Defined at:
  5813 ;;		line 200 in file "src/mpu_iic.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;		None
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  G_Temp_X        4   22[BANK1 ] long 
  5818 ;;  cnt             1   26[BANK1 ] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      void 
  5821 ;; Registers used:
  5822 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5828 ;;      Params:         0       0       0       0       0       0       0       0
  5829 ;;      Locals:         0       0       5       0       0       0       0       0
  5830 ;;      Temps:          0       0       4       0       0       0       0       0
  5831 ;;      Totals:         0       0       9       0       0       0       0       0
  5832 ;;Total ram usage:        9 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:   10
  5835 ;; This function calls:
  5836 ;;		_EUSART_Write
  5837 ;;		_Get6500Data
  5838 ;;		___aldiv
  5839 ;; This function is called by:
  5840 ;;		_Init_MPU6500
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _Read_Offset
  5846  0689                     _Read_Offset:	
  5847                           
  5848                           ;mpu_iic.c: 202: int32_t G_Temp_X;;mpu_iic.c: 203: uint8_t cnt;;mpu_iic.c: 204: G_Temp_X
      +                           = 0;
  5849                           
  5850                           ;incstack = 0
  5851                           ; Regs used in _Read_Offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5852  0689  3000               	movlw	0
  5853  068A  0141               	movlb	1	; select bank1
  5854  068B  00DA               	movwf	(Read_Offset@G_Temp_X+3)^(0+128)
  5855  068C  3000               	movlw	0
  5856  068D  00D9               	movwf	(Read_Offset@G_Temp_X+2)^(0+128)
  5857  068E  3000               	movlw	0
  5858  068F  00D8               	movwf	(Read_Offset@G_Temp_X+1)^(0+128)
  5859  0690  3000               	movlw	0
  5860  0691  00D7               	movwf	Read_Offset@G_Temp_X^(0+128)
  5861                           
  5862                           ;mpu_iic.c: 205: for(cnt = 0; cnt < 50;cnt++)
  5863  0692  01DB               	clrf	Read_Offset@cnt^(0+128)
  5864  0693  3032               	movlw	50
  5865  0694  025B               	subwf	Read_Offset@cnt^(0+128),w
  5866  0695  1803               	btfsc	3,0
  5867  0696  2EB5               	goto	l2797
  5868  0697                     l2791:	
  5869                           
  5870                           ;mpu_iic.c: 206: {;mpu_iic.c: 207: G_Temp_X += (int32_t)Get6500Data(0x45);
  5871  0697  3045               	movlw	69
  5872  0698  318C  243E  3186   	fcall	_Get6500Data
  5873  069B  0141               	movlb	1	; select bank1
  5874  069C  0849               	movf	?_Get6500Data^(0+128),w
  5875  069D  00D3               	movwf	??_Read_Offset^(0+128)
  5876  069E  084A               	movf	(?_Get6500Data+1)^(0+128),w
  5877  069F  00D4               	movwf	(??_Read_Offset^(0+128)+1)
  5878  06A0  3000               	movlw	0
  5879  06A1  1BD4               	btfsc	(??_Read_Offset^(0+128)+1),7
  5880  06A2  30FF               	movlw	255
  5881  06A3  00D5               	movwf	(??_Read_Offset^(0+128)+2)
  5882  06A4  00D6               	movwf	(??_Read_Offset^(0+128)+3)
  5883  06A5  0853               	movf	??_Read_Offset^(0+128),w
  5884  06A6  07D7               	addwf	Read_Offset@G_Temp_X^(0+128),f
  5885  06A7  0854               	movf	(??_Read_Offset+1)^(0+128),w
  5886  06A8  3DD8               	addwfc	(Read_Offset@G_Temp_X+1)^(0+128),f
  5887  06A9  0855               	movf	(??_Read_Offset+2)^(0+128),w
  5888  06AA  3DD9               	addwfc	(Read_Offset@G_Temp_X+2)^(0+128),f
  5889  06AB  0856               	movf	(??_Read_Offset+3)^(0+128),w
  5890  06AC  3DDA               	addwfc	(Read_Offset@G_Temp_X+3)^(0+128),f
  5891  06AD  3001               	movlw	1
  5892  06AE  00D3               	movwf	??_Read_Offset^(0+128)
  5893  06AF  0853               	movf	??_Read_Offset^(0+128),w
  5894  06B0  07DB               	addwf	Read_Offset@cnt^(0+128),f
  5895  06B1  3032               	movlw	50
  5896  06B2  025B               	subwf	Read_Offset@cnt^(0+128),w
  5897  06B3  1C03               	skipc
  5898  06B4  2E97               	goto	l2791
  5899  06B5                     l2797:	
  5900                           
  5901                           ;mpu_iic.c: 208: };mpu_iic.c: 209: G_Offset_X = G_Temp_X/cnt;
  5902  06B5  085B               	movf	Read_Offset@cnt^(0+128),w
  5903  06B6  00D3               	movwf	??_Read_Offset^(0+128)
  5904  06B7  01D4               	clrf	(??_Read_Offset^(0+128)+1)
  5905  06B8  01D5               	clrf	(??_Read_Offset^(0+128)+2)
  5906  06B9  01D6               	clrf	(??_Read_Offset^(0+128)+3)
  5907  06BA  0856               	movf	(??_Read_Offset+3)^(0+128),w
  5908  06BB  00C4               	movwf	(___aldiv@divisor+3)^(0+128)
  5909  06BC  0855               	movf	(??_Read_Offset+2)^(0+128),w
  5910  06BD  00C3               	movwf	(___aldiv@divisor+2)^(0+128)
  5911  06BE  0854               	movf	(??_Read_Offset+1)^(0+128),w
  5912  06BF  00C2               	movwf	(___aldiv@divisor+1)^(0+128)
  5913  06C0  0853               	movf	??_Read_Offset^(0+128),w
  5914  06C1  00C1               	movwf	___aldiv@divisor^(0+128)
  5915  06C2  085A               	movf	(Read_Offset@G_Temp_X+3)^(0+128),w
  5916  06C3  00C8               	movwf	(___aldiv@dividend+3)^(0+128)
  5917  06C4  0859               	movf	(Read_Offset@G_Temp_X+2)^(0+128),w
  5918  06C5  00C7               	movwf	(___aldiv@dividend+2)^(0+128)
  5919  06C6  0858               	movf	(Read_Offset@G_Temp_X+1)^(0+128),w
  5920  06C7  00C6               	movwf	(___aldiv@dividend+1)^(0+128)
  5921  06C8  0857               	movf	Read_Offset@G_Temp_X^(0+128),w
  5922  06C9  00C5               	movwf	___aldiv@dividend^(0+128)
  5923  06CA  3185  2596  3186   	fcall	___aldiv
  5924  06CD  0141               	movlb	1	; select bank1
  5925  06CE  0842               	movf	(?___aldiv+1)^(0+128),w
  5926  06CF  00AE               	movwf	(_G_Offset_X+1)^(0+128)
  5927  06D0  0841               	movf	?___aldiv^(0+128),w
  5928  06D1  00AD               	movwf	_G_Offset_X^(0+128)
  5929                           
  5930                           ;mpu_iic.c: 210: Old_gyro = (int)G_Offset_X;
  5931  06D2  082E               	movf	(_G_Offset_X+1)^(0+128),w
  5932  06D3  00B0               	movwf	(_Old_gyro+1)^(0+128)
  5933  06D4  082D               	movf	_G_Offset_X^(0+128),w
  5934  06D5  00AF               	movwf	_Old_gyro^(0+128)
  5935                           
  5936                           ;mpu_iic.c: 211: New_gyro = Old_gyro;
  5937  06D6  0830               	movf	(_Old_gyro+1)^(0+128),w
  5938  06D7  0140               	movlb	0	; select bank0
  5939  06D8  00E7               	movwf	_New_gyro+1
  5940  06D9  0141               	movlb	1	; select bank1
  5941  06DA  082F               	movf	_Old_gyro^(0+128),w
  5942  06DB  0140               	movlb	0	; select bank0
  5943  06DC  00E6               	movwf	_New_gyro
  5944                           
  5945                           ;mpu_iic.c: 212: Frist_gyro = Old_gyro;
  5946  06DD  0141               	movlb	1	; select bank1
  5947  06DE  0830               	movf	(_Old_gyro+1)^(0+128),w
  5948  06DF  0140               	movlb	0	; select bank0
  5949  06E0  00E5               	movwf	_Frist_gyro+1
  5950  06E1  0141               	movlb	1	; select bank1
  5951  06E2  082F               	movf	_Old_gyro^(0+128),w
  5952  06E3  0140               	movlb	0	; select bank0
  5953  06E4  00E4               	movwf	_Frist_gyro
  5954                           
  5955                           ;mpu_iic.c: 213: EUSART_Write(0x55);
  5956  06E5  3055               	movlw	85
  5957  06E6  318C  24D2  3186   	fcall	_EUSART_Write
  5958                           
  5959                           ;mpu_iic.c: 214: EUSART_Write(0xAA);
  5960  06E9  30AA               	movlw	170
  5961  06EA  318C  24D2         	fcall	_EUSART_Write
  5962  06EC  0008               	return
  5963  06ED                     __end_of_Read_Offset:	
  5964                           ;mpu_iic.c: 215: return;
  5965                           
  5966                           
  5967                           	psect	text17
  5968  0596                     __ptext17:	
  5969 ;; *************** function ___aldiv *****************
  5970 ;; Defined at:
  5971 ;;		line 5 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
  5972 ;; Parameters:    Size  Location     Type
  5973 ;;  divisor         4    0[BANK1 ] long 
  5974 ;;  dividend        4    4[BANK1 ] long 
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;  quotient        4   11[BANK1 ] long 
  5977 ;;  sign            1   10[BANK1 ] unsigned char 
  5978 ;;  counter         1    9[BANK1 ] unsigned char 
  5979 ;; Return value:  Size  Location     Type
  5980 ;;                  4    0[BANK1 ] long 
  5981 ;; Registers used:
  5982 ;;		wreg, status,2, status,0
  5983 ;; Tracked objects:
  5984 ;;		On entry : 0/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5988 ;;      Params:         0       0       8       0       0       0       0       0
  5989 ;;      Locals:         0       0       6       0       0       0       0       0
  5990 ;;      Temps:          0       0       1       0       0       0       0       0
  5991 ;;      Totals:         0       0      15       0       0       0       0       0
  5992 ;;Total ram usage:       15 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; Hardware stack levels required when called:    7
  5995 ;; This function calls:
  5996 ;;		Nothing
  5997 ;; This function is called by:
  5998 ;;		_Read_Offset
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           
  6003                           ;psect for function ___aldiv
  6004  0596                     ___aldiv:	
  6005                           
  6006                           ;incstack = 0
  6007                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  6008  0596  0141               	movlb	1	; select bank1
  6009  0597  01CB               	clrf	___aldiv@sign^(0+128)
  6010  0598  1FC4               	btfss	(___aldiv@divisor+3)^(0+128),7
  6011  0599  2DA7               	goto	l628
  6012  059A  09C1               	comf	___aldiv@divisor^(0+128),f
  6013  059B  09C2               	comf	(___aldiv@divisor+1)^(0+128),f
  6014  059C  09C3               	comf	(___aldiv@divisor+2)^(0+128),f
  6015  059D  09C4               	comf	(___aldiv@divisor+3)^(0+128),f
  6016  059E  0AC1               	incf	___aldiv@divisor^(0+128),f
  6017  059F  1903               	skipnz
  6018  05A0  0AC2               	incf	(___aldiv@divisor+1)^(0+128),f
  6019  05A1  1903               	skipnz
  6020  05A2  0AC3               	incf	(___aldiv@divisor+2)^(0+128),f
  6021  05A3  1903               	skipnz
  6022  05A4  0AC4               	incf	(___aldiv@divisor+3)^(0+128),f
  6023  05A5  01CB               	clrf	___aldiv@sign^(0+128)
  6024  05A6  0ACB               	incf	___aldiv@sign^(0+128),f
  6025  05A7                     l628:	
  6026  05A7  1FC8               	btfss	(___aldiv@dividend+3)^(0+128),7
  6027  05A8  2DB8               	goto	l2485
  6028  05A9  09C5               	comf	___aldiv@dividend^(0+128),f
  6029  05AA  09C6               	comf	(___aldiv@dividend+1)^(0+128),f
  6030  05AB  09C7               	comf	(___aldiv@dividend+2)^(0+128),f
  6031  05AC  09C8               	comf	(___aldiv@dividend+3)^(0+128),f
  6032  05AD  0AC5               	incf	___aldiv@dividend^(0+128),f
  6033  05AE  1903               	skipnz
  6034  05AF  0AC6               	incf	(___aldiv@dividend+1)^(0+128),f
  6035  05B0  1903               	skipnz
  6036  05B1  0AC7               	incf	(___aldiv@dividend+2)^(0+128),f
  6037  05B2  1903               	skipnz
  6038  05B3  0AC8               	incf	(___aldiv@dividend+3)^(0+128),f
  6039  05B4  3001               	movlw	1
  6040  05B5  00C9               	movwf	??___aldiv^(0+128)
  6041  05B6  0849               	movf	??___aldiv^(0+128),w
  6042  05B7  06CB               	xorwf	___aldiv@sign^(0+128),f
  6043  05B8                     l2485:	
  6044  05B8  3000               	movlw	0
  6045  05B9  00CF               	movwf	(___aldiv@quotient+3)^(0+128)
  6046  05BA  3000               	movlw	0
  6047  05BB  00CE               	movwf	(___aldiv@quotient+2)^(0+128)
  6048  05BC  3000               	movlw	0
  6049  05BD  00CD               	movwf	(___aldiv@quotient+1)^(0+128)
  6050  05BE  3000               	movlw	0
  6051  05BF  00CC               	movwf	___aldiv@quotient^(0+128)
  6052  05C0  0844               	movf	(___aldiv@divisor+3)^(0+128),w
  6053  05C1  0443               	iorwf	(___aldiv@divisor+2)^(0+128),w
  6054  05C2  0442               	iorwf	(___aldiv@divisor+1)^(0+128),w
  6055  05C3  0441               	iorwf	___aldiv@divisor^(0+128),w
  6056  05C4  1903               	skipnz
  6057  05C5  2E01               	goto	l2507
  6058  05C6  01CA               	clrf	___aldiv@counter^(0+128)
  6059  05C7  0ACA               	incf	___aldiv@counter^(0+128),f
  6060  05C8                     l2493:	
  6061  05C8  1BC4               	btfsc	(___aldiv@divisor+3)^(0+128),7
  6062  05C9  2DD6               	goto	l2495
  6063  05CA  3001               	movlw	1
  6064  05CB                     u2135:	
  6065  05CB  35C1               	lslf	___aldiv@divisor^(0+128),f
  6066  05CC  0DC2               	rlf	(___aldiv@divisor+1)^(0+128),f
  6067  05CD  0DC3               	rlf	(___aldiv@divisor+2)^(0+128),f
  6068  05CE  0DC4               	rlf	(___aldiv@divisor+3)^(0+128),f
  6069  05CF  0B89               	decfsz	9,f
  6070  05D0  2DCB               	goto	u2135
  6071  05D1  3001               	movlw	1
  6072  05D2  00C9               	movwf	??___aldiv^(0+128)
  6073  05D3  0849               	movf	??___aldiv^(0+128),w
  6074  05D4  07CA               	addwf	___aldiv@counter^(0+128),f
  6075  05D5  2DC8               	goto	l2493
  6076  05D6                     l2495:	
  6077  05D6  3001               	movlw	1
  6078  05D7                     u2155:	
  6079  05D7  35CC               	lslf	___aldiv@quotient^(0+128),f
  6080  05D8  0DCD               	rlf	(___aldiv@quotient+1)^(0+128),f
  6081  05D9  0DCE               	rlf	(___aldiv@quotient+2)^(0+128),f
  6082  05DA  0DCF               	rlf	(___aldiv@quotient+3)^(0+128),f
  6083  05DB  0B89               	decfsz	9,f
  6084  05DC  2DD7               	goto	u2155
  6085  05DD  0844               	movf	(___aldiv@divisor+3)^(0+128),w
  6086  05DE  0248               	subwf	(___aldiv@dividend+3)^(0+128),w
  6087  05DF  1D03               	skipz
  6088  05E0  2DEB               	goto	u2165
  6089  05E1  0843               	movf	(___aldiv@divisor+2)^(0+128),w
  6090  05E2  0247               	subwf	(___aldiv@dividend+2)^(0+128),w
  6091  05E3  1D03               	skipz
  6092  05E4  2DEB               	goto	u2165
  6093  05E5  0842               	movf	(___aldiv@divisor+1)^(0+128),w
  6094  05E6  0246               	subwf	(___aldiv@dividend+1)^(0+128),w
  6095  05E7  1D03               	skipz
  6096  05E8  2DEB               	goto	u2165
  6097  05E9  0841               	movf	___aldiv@divisor^(0+128),w
  6098  05EA  0245               	subwf	___aldiv@dividend^(0+128),w
  6099  05EB                     u2165:	
  6100  05EB  1C03               	skipc
  6101  05EC  2DF6               	goto	l2503
  6102  05ED  0841               	movf	___aldiv@divisor^(0+128),w
  6103  05EE  02C5               	subwf	___aldiv@dividend^(0+128),f
  6104  05EF  0842               	movf	(___aldiv@divisor+1)^(0+128),w
  6105  05F0  3BC6               	subwfb	(___aldiv@dividend+1)^(0+128),f
  6106  05F1  0843               	movf	(___aldiv@divisor+2)^(0+128),w
  6107  05F2  3BC7               	subwfb	(___aldiv@dividend+2)^(0+128),f
  6108  05F3  0844               	movf	(___aldiv@divisor+3)^(0+128),w
  6109  05F4  3BC8               	subwfb	(___aldiv@dividend+3)^(0+128),f
  6110  05F5  144C               	bsf	___aldiv@quotient^(0+128),0
  6111  05F6                     l2503:	
  6112  05F6  3001               	movlw	1
  6113  05F7                     u2175:	
  6114  05F7  36C4               	lsrf	(___aldiv@divisor+3)^(0+128),f
  6115  05F8  0CC3               	rrf	(___aldiv@divisor+2)^(0+128),f
  6116  05F9  0CC2               	rrf	(___aldiv@divisor+1)^(0+128),f
  6117  05FA  0CC1               	rrf	___aldiv@divisor^(0+128),f
  6118  05FB  0B89               	decfsz	9,f
  6119  05FC  2DF7               	goto	u2175
  6120  05FD  3001               	movlw	1
  6121  05FE  02CA               	subwf	___aldiv@counter^(0+128),f
  6122  05FF  1D03               	btfss	3,2
  6123  0600  2DD6               	goto	l2495
  6124  0601                     l2507:	
  6125  0601  084B               	movf	___aldiv@sign^(0+128),w
  6126  0602  1903               	btfsc	3,2
  6127  0603  2E0F               	goto	l2511
  6128  0604  09CC               	comf	___aldiv@quotient^(0+128),f
  6129  0605  09CD               	comf	(___aldiv@quotient+1)^(0+128),f
  6130  0606  09CE               	comf	(___aldiv@quotient+2)^(0+128),f
  6131  0607  09CF               	comf	(___aldiv@quotient+3)^(0+128),f
  6132  0608  0ACC               	incf	___aldiv@quotient^(0+128),f
  6133  0609  1903               	skipnz
  6134  060A  0ACD               	incf	(___aldiv@quotient+1)^(0+128),f
  6135  060B  1903               	skipnz
  6136  060C  0ACE               	incf	(___aldiv@quotient+2)^(0+128),f
  6137  060D  1903               	skipnz
  6138  060E  0ACF               	incf	(___aldiv@quotient+3)^(0+128),f
  6139  060F                     l2511:	
  6140  060F  084F               	movf	(___aldiv@quotient+3)^(0+128),w
  6141  0610  00C4               	movwf	(?___aldiv+3)^(0+128)
  6142  0611  084E               	movf	(___aldiv@quotient+2)^(0+128),w
  6143  0612  00C3               	movwf	(?___aldiv+2)^(0+128)
  6144  0613  084D               	movf	(___aldiv@quotient+1)^(0+128),w
  6145  0614  00C2               	movwf	(?___aldiv+1)^(0+128)
  6146  0615  084C               	movf	___aldiv@quotient^(0+128),w
  6147  0616  00C1               	movwf	?___aldiv^(0+128)
  6148  0617  0008               	return
  6149  0618                     __end_of___aldiv:	
  6150                           
  6151                           	psect	text18
  6152  0C3E                     __ptext18:	
  6153 ;; *************** function _Get6500Data *****************
  6154 ;; Defined at:
  6155 ;;		line 191 in file "src/mpu_iic.c"
  6156 ;; Parameters:    Size  Location     Type
  6157 ;;  REG_Address     1    wreg     unsigned char 
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;  REG_Address     1   17[BANK1 ] unsigned char 
  6160 ;;  L               1   16[BANK1 ] unsigned char 
  6161 ;;  H               1   15[BANK1 ] unsigned char 
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  2    8[BANK1 ] int 
  6164 ;; Registers used:
  6165 ;;		wreg, status,2, status,0, pclath, cstack
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6171 ;;      Params:         0       0       2       0       0       0       0       0
  6172 ;;      Locals:         0       0       3       0       0       0       0       0
  6173 ;;      Temps:          0       0       5       0       0       0       0       0
  6174 ;;      Totals:         0       0      10       0       0       0       0       0
  6175 ;;Total ram usage:       10 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    9
  6178 ;; This function calls:
  6179 ;;		_Com_Lock_MPU_RD_Reg
  6180 ;; This function is called by:
  6181 ;;		_Read_Offset
  6182 ;;		_Test_Sleep_Mpu6500
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           
  6187                           ;psect for function _Get6500Data
  6188  0C3E                     _Get6500Data:	
  6189                           
  6190                           ;incstack = 0
  6191                           ; Regs used in _Get6500Data: [wreg+status,2+status,0+pclath+cstack]
  6192                           ;Get6500Data@REG_Address stored from wreg
  6193  0C3E  0141               	movlb	1	; select bank1
  6194  0C3F  00D2               	movwf	Get6500Data@REG_Address^(0+128)
  6195                           
  6196                           ;mpu_iic.c: 193: char H,L;;mpu_iic.c: 194: H=Com_Lock_MPU_RD_Reg(REG_Address);
  6197  0C40  0852               	movf	Get6500Data@REG_Address^(0+128),w
  6198  0C41  318C  24FD  318C   	fcall	_Com_Lock_MPU_RD_Reg
  6199  0C44  0141               	movlb	1	; select bank1
  6200  0C45  00CB               	movwf	??_Get6500Data^(0+128)
  6201  0C46  084B               	movf	??_Get6500Data^(0+128),w
  6202  0C47  00D0               	movwf	Get6500Data@H^(0+128)
  6203                           
  6204                           ;mpu_iic.c: 195: L=Com_Lock_MPU_RD_Reg(REG_Address+1);
  6205  0C48  0852               	movf	Get6500Data@REG_Address^(0+128),w
  6206  0C49  3E01               	addlw	1
  6207  0C4A  318C  24FD         	fcall	_Com_Lock_MPU_RD_Reg
  6208  0C4C  0141               	movlb	1	; select bank1
  6209  0C4D  00CB               	movwf	??_Get6500Data^(0+128)
  6210  0C4E  084B               	movf	??_Get6500Data^(0+128),w
  6211  0C4F  00D1               	movwf	Get6500Data@L^(0+128)
  6212                           
  6213                           ;mpu_iic.c: 196: return (H<<8)+L;
  6214  0C50  0851               	movf	Get6500Data@L^(0+128),w
  6215  0C51  00CB               	movwf	??_Get6500Data^(0+128)
  6216  0C52  01CC               	clrf	(??_Get6500Data^(0+128)+1)
  6217  0C53  0850               	movf	Get6500Data@H^(0+128),w
  6218  0C54  00CD               	movwf	(??_Get6500Data+2)^(0+128)
  6219  0C55  01CE               	clrf	((??_Get6500Data+2)^(0+128)+1)
  6220  0C56  084D               	movf	(??_Get6500Data+2)^(0+128),w
  6221  0C57  00CE               	movwf	((??_Get6500Data+2)^(0+128)+1)
  6222  0C58  01CD               	clrf	(??_Get6500Data+2)^(0+128)
  6223  0C59  084B               	movf	??_Get6500Data^(0+128),w
  6224  0C5A  074D               	addwf	(??_Get6500Data+2)^(0+128),w
  6225  0C5B  00C9               	movwf	?_Get6500Data^(0+128)
  6226  0C5C  084C               	movf	(??_Get6500Data+1)^(0+128),w
  6227  0C5D  3D4E               	addwfc	(??_Get6500Data+3)^(0+128),w
  6228  0C5E  00CA               	movwf	(?_Get6500Data+1)^(0+128)
  6229  0C5F  0008               	return
  6230  0C60                     __end_of_Get6500Data:	
  6231                           
  6232                           	psect	text19
  6233  0CFD                     __ptext19:	
  6234 ;; *************** function _Com_Lock_MPU_RD_Reg *****************
  6235 ;; Defined at:
  6236 ;;		line 174 in file "src/mpu_iic.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;  addr            1    wreg     unsigned char 
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;  addr            1    6[BANK1 ] unsigned char 
  6241 ;;  temp            1    7[BANK1 ] unsigned char 
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  1    wreg      unsigned char 
  6244 ;; Registers used:
  6245 ;;		wreg, status,2, status,0, pclath, cstack
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6251 ;;      Params:         0       0       0       0       0       0       0       0
  6252 ;;      Locals:         0       0       2       0       0       0       0       0
  6253 ;;      Temps:          0       0       1       0       0       0       0       0
  6254 ;;      Totals:         0       0       3       0       0       0       0       0
  6255 ;;Total ram usage:        3 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:    8
  6258 ;; This function calls:
  6259 ;;		_Com_Lock_IIC_Read_Data
  6260 ;;		_Com_Lock_IIC_Start
  6261 ;;		_Com_Lock_IIC_Stop
  6262 ;;		_Com_Lock_IIC_Write_Data
  6263 ;; This function is called by:
  6264 ;;		_Get6500Data
  6265 ;;		_Init_MPU6500
  6266 ;; This function uses a non-reentrant model
  6267 ;;
  6268                           
  6269                           
  6270                           ;psect for function _Com_Lock_MPU_RD_Reg
  6271  0CFD                     _Com_Lock_MPU_RD_Reg:	
  6272                           
  6273                           ;incstack = 0
  6274                           ; Regs used in _Com_Lock_MPU_RD_Reg: [wreg+status,2+status,0+pclath+cstack]
  6275                           ;Com_Lock_MPU_RD_Reg@addr stored from wreg
  6276  0CFD  0141               	movlb	1	; select bank1
  6277  0CFE  00C7               	movwf	Com_Lock_MPU_RD_Reg@addr^(0+128)
  6278                           
  6279                           ;mpu_iic.c: 176: uint8_t temp=0;
  6280  0CFF  01C8               	clrf	Com_Lock_MPU_RD_Reg@temp^(0+128)
  6281                           
  6282                           ;mpu_iic.c: 177: Com_Lock_IIC_Start();
  6283  0D00  318B  231C  318C   	fcall	_Com_Lock_IIC_Start
  6284                           
  6285                           ;mpu_iic.c: 178: temp = Com_Lock_IIC_Write_Data(0xD0);
  6286  0D03  30D0               	movlw	208
  6287  0D04  318F  276B  318C   	fcall	_Com_Lock_IIC_Write_Data
  6288  0D07  0141               	movlb	1	; select bank1
  6289  0D08  00C6               	movwf	??_Com_Lock_MPU_RD_Reg^(0+128)
  6290  0D09  0846               	movf	??_Com_Lock_MPU_RD_Reg^(0+128),w
  6291  0D0A  00C8               	movwf	Com_Lock_MPU_RD_Reg@temp^(0+128)
  6292                           
  6293                           ;mpu_iic.c: 179: temp = Com_Lock_IIC_Write_Data(addr);
  6294  0D0B  0847               	movf	Com_Lock_MPU_RD_Reg@addr^(0+128),w
  6295  0D0C  318F  276B  318C   	fcall	_Com_Lock_IIC_Write_Data
  6296  0D0F  0141               	movlb	1	; select bank1
  6297  0D10  00C6               	movwf	??_Com_Lock_MPU_RD_Reg^(0+128)
  6298  0D11  0846               	movf	??_Com_Lock_MPU_RD_Reg^(0+128),w
  6299  0D12  00C8               	movwf	Com_Lock_MPU_RD_Reg@temp^(0+128)
  6300                           
  6301                           ;mpu_iic.c: 180: Com_Lock_IIC_Start();
  6302  0D13  318B  231C  318C   	fcall	_Com_Lock_IIC_Start
  6303                           
  6304                           ;mpu_iic.c: 181: temp = Com_Lock_IIC_Write_Data(0xD0+1);
  6305  0D16  30D1               	movlw	209
  6306  0D17  318F  276B  318C   	fcall	_Com_Lock_IIC_Write_Data
  6307  0D1A  0141               	movlb	1	; select bank1
  6308  0D1B  00C6               	movwf	??_Com_Lock_MPU_RD_Reg^(0+128)
  6309  0D1C  0846               	movf	??_Com_Lock_MPU_RD_Reg^(0+128),w
  6310  0D1D  00C8               	movwf	Com_Lock_MPU_RD_Reg@temp^(0+128)
  6311                           
  6312                           ;mpu_iic.c: 182: temp=Com_Lock_IIC_Read_Data(0);
  6313  0D1E  3000               	movlw	0
  6314  0D1F  3187  27B0  318C   	fcall	_Com_Lock_IIC_Read_Data
  6315  0D22  0141               	movlb	1	; select bank1
  6316  0D23  00C6               	movwf	??_Com_Lock_MPU_RD_Reg^(0+128)
  6317  0D24  0846               	movf	??_Com_Lock_MPU_RD_Reg^(0+128),w
  6318  0D25  00C8               	movwf	Com_Lock_MPU_RD_Reg@temp^(0+128)
  6319                           
  6320                           ;mpu_iic.c: 183: Com_Lock_IIC_Stop();
  6321  0D26  318A  22FB         	fcall	_Com_Lock_IIC_Stop
  6322                           
  6323                           ;mpu_iic.c: 184: return temp;
  6324  0D28  0141               	movlb	1	; select bank1
  6325  0D29  0848               	movf	Com_Lock_MPU_RD_Reg@temp^(0+128),w
  6326  0D2A  0008               	return
  6327  0D2B                     __end_of_Com_Lock_MPU_RD_Reg:	
  6328                           
  6329                           	psect	text20
  6330  07B0                     __ptext20:	
  6331 ;; *************** function _Com_Lock_IIC_Read_Data *****************
  6332 ;; Defined at:
  6333 ;;		line 137 in file "src/mpu_iic.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  ack             1    wreg     unsigned char 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  ack             1    1[BANK1 ] unsigned char 
  6338 ;;  i               2    3[BANK1 ] int 
  6339 ;;  retVal          1    2[BANK1 ] unsigned char 
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      unsigned char 
  6342 ;; Registers used:
  6343 ;;		wreg, status,2, status,0
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6349 ;;      Params:         0       0       0       0       0       0       0       0
  6350 ;;      Locals:         0       0       4       0       0       0       0       0
  6351 ;;      Temps:          0       0       1       0       0       0       0       0
  6352 ;;      Totals:         0       0       5       0       0       0       0       0
  6353 ;;Total ram usage:        5 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    7
  6356 ;; This function calls:
  6357 ;;		Nothing
  6358 ;; This function is called by:
  6359 ;;		_Com_Lock_MPU_RD_Reg
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           
  6364                           ;psect for function _Com_Lock_IIC_Read_Data
  6365  07B0                     _Com_Lock_IIC_Read_Data:	
  6366                           
  6367                           ;incstack = 0
  6368                           ; Regs used in _Com_Lock_IIC_Read_Data: [wreg+status,2+status,0]
  6369                           ;Com_Lock_IIC_Read_Data@ack stored from wreg
  6370  07B0  0141               	movlb	1	; select bank1
  6371  07B1  00C2               	movwf	Com_Lock_IIC_Read_Data@ack^(0+128)
  6372                           
  6373                           ;mpu_iic.c: 139: int i = 0;
  6374  07B2  01C4               	clrf	Com_Lock_IIC_Read_Data@i^(0+128)
  6375  07B3  01C5               	clrf	(Com_Lock_IIC_Read_Data@i+1)^(0+128)
  6376                           
  6377                           ;mpu_iic.c: 140: char retVal = 0;
  6378  07B4  01C3               	clrf	Com_Lock_IIC_Read_Data@retVal^(0+128)
  6379                           
  6380                           ;mpu_iic.c: 141: PORTCbits.RC3 = 0;
  6381  07B5  0140               	movlb	0	; select bank0
  6382  07B6  118E               	bcf	14,3	;volatile
  6383                           
  6384                           ;mpu_iic.c: 142: TRISC |= 0x10;
  6385  07B7  1614               	bsf	20,4	;volatile
  6386                           
  6387                           ;mpu_iic.c: 143: for(i = 0; i < 8; i++)
  6388  07B8  0141               	movlb	1	; select bank1
  6389  07B9  01C4               	clrf	Com_Lock_IIC_Read_Data@i^(0+128)
  6390  07BA  01C5               	clrf	(Com_Lock_IIC_Read_Data@i+1)^(0+128)
  6391  07BB  0845               	movf	(Com_Lock_IIC_Read_Data@i+1)^(0+128),w
  6392  07BC  3A80               	xorlw	128
  6393  07BD  00C1               	movwf	??_Com_Lock_IIC_Read_Data^(0+128)
  6394  07BE  3080               	movlw	128
  6395  07BF  0241               	subwf	??_Com_Lock_IIC_Read_Data^(0+128),w
  6396  07C0  3008               	movlw	8
  6397  07C1  1903               	btfsc	3,2
  6398  07C2  0244               	subwf	Com_Lock_IIC_Read_Data@i^(0+128),w
  6399  07C3  1803               	btfsc	3,0
  6400  07C4  2FE2               	goto	l2285
  6401  07C5                     l347:	
  6402                           
  6403                           ;mpu_iic.c: 144: {;mpu_iic.c: 146: PORTCbits.RC3 = 1;
  6404  07C5  0140               	movlb	0	; select bank0
  6405  07C6  158E               	bsf	14,3	;volatile
  6406                           
  6407                           ;mpu_iic.c: 148: retVal <<= 1;
  6408  07C7  1003               	clrc
  6409  07C8  0141               	movlb	1	; select bank1
  6410  07C9  0DC3               	rlf	Com_Lock_IIC_Read_Data@retVal^(0+128),f
  6411                           
  6412                           ;mpu_iic.c: 149: retVal |= PORTCbits.RC4;
  6413  07CA  0140               	movlb	0	; select bank0
  6414  07CB  0E0E               	swapf	14,w	;volatile
  6415  07CC  3901               	andlw	1
  6416  07CD  0141               	movlb	1	; select bank1
  6417  07CE  00C1               	movwf	??_Com_Lock_IIC_Read_Data^(0+128)
  6418  07CF  0841               	movf	??_Com_Lock_IIC_Read_Data^(0+128),w
  6419  07D0  04C3               	iorwf	Com_Lock_IIC_Read_Data@retVal^(0+128),f
  6420                           
  6421                           ;mpu_iic.c: 150: PORTCbits.RC3 = 0;
  6422  07D1  0140               	movlb	0	; select bank0
  6423  07D2  118E               	bcf	14,3	;volatile
  6424  07D3  3001               	movlw	1
  6425  07D4  0141               	movlb	1	; select bank1
  6426  07D5  07C4               	addwf	Com_Lock_IIC_Read_Data@i^(0+128),f
  6427  07D6  3000               	movlw	0
  6428  07D7  3DC5               	addwfc	(Com_Lock_IIC_Read_Data@i+1)^(0+128),f
  6429  07D8  0845               	movf	(Com_Lock_IIC_Read_Data@i+1)^(0+128),w
  6430  07D9  3A80               	xorlw	128
  6431  07DA  00C1               	movwf	??_Com_Lock_IIC_Read_Data^(0+128)
  6432  07DB  3080               	movlw	128
  6433  07DC  0241               	subwf	??_Com_Lock_IIC_Read_Data^(0+128),w
  6434  07DD  3008               	movlw	8
  6435  07DE  1903               	btfsc	3,2
  6436  07DF  0244               	subwf	Com_Lock_IIC_Read_Data@i^(0+128),w
  6437  07E0  1C03               	skipc
  6438  07E1  2FC5               	goto	l347
  6439  07E2                     l2285:	
  6440                           
  6441                           ;mpu_iic.c: 151: };mpu_iic.c: 152: TRISC &= 0xEF;
  6442  07E2  30EF               	movlw	239
  6443  07E3  0141               	movlb	1	; select bank1
  6444  07E4  00C1               	movwf	??_Com_Lock_IIC_Read_Data^(0+128)
  6445  07E5  0841               	movf	??_Com_Lock_IIC_Read_Data^(0+128),w
  6446  07E6  0140               	movlb	0	; select bank0
  6447  07E7  0594               	andwf	20,f	;volatile
  6448                           
  6449                           ;mpu_iic.c: 154: if(ack)
  6450  07E8  0141               	movlb	1	; select bank1
  6451  07E9  0842               	movf	Com_Lock_IIC_Read_Data@ack^(0+128),w
  6452  07EA  1903               	btfsc	3,2
  6453  07EB  2FEF               	goto	l349
  6454                           
  6455                           ;mpu_iic.c: 155: {;mpu_iic.c: 156: PORTCbits.RC4 = 0;
  6456  07EC  0140               	movlb	0	; select bank0
  6457  07ED  120E               	bcf	14,4	;volatile
  6458                           
  6459                           ;mpu_iic.c: 157: }
  6460  07EE  2FF1               	goto	l350
  6461  07EF                     l349:	
  6462                           
  6463                           ;mpu_iic.c: 159: else;mpu_iic.c: 160: {;mpu_iic.c: 161: PORTCbits.RC4 = 1;
  6464  07EF  0140               	movlb	0	; select bank0
  6465  07F0  160E               	bsf	14,4	;volatile
  6466  07F1                     l350:	
  6467                           
  6468                           ;mpu_iic.c: 162: };mpu_iic.c: 163: _delay((unsigned long)((2)*(8000000/4000000.0)));
  6469  07F1  3200               	nop2	;2 cycle nop
  6470  07F2  3200               	nop2	;2 cycle nop
  6471                           
  6472                           ;mpu_iic.c: 164: PORTCbits.RC3 = 1;
  6473  07F3  0140               	movlb	0	; select bank0
  6474  07F4  158E               	bsf	14,3	;volatile
  6475                           
  6476                           ;mpu_iic.c: 165: _delay((unsigned long)((2)*(8000000/4000000.0)));
  6477  07F5  3200               	nop2	;2 cycle nop
  6478  07F6  3200               	nop2	;2 cycle nop
  6479                           
  6480                           ;mpu_iic.c: 166: PORTCbits.RC3 = 0;
  6481  07F7  0140               	movlb	0	; select bank0
  6482  07F8  118E               	bcf	14,3	;volatile
  6483                           
  6484                           ;mpu_iic.c: 167: return retVal;
  6485  07F9  0141               	movlb	1	; select bank1
  6486  07FA  0843               	movf	Com_Lock_IIC_Read_Data@retVal^(0+128),w
  6487  07FB  0008               	return
  6488  07FC                     __end_of_Com_Lock_IIC_Read_Data:	
  6489                           
  6490                           	psect	text21
  6491  0CD2                     __ptext21:	
  6492 ;; *************** function _EUSART_Write *****************
  6493 ;; Defined at:
  6494 ;;		line 185 in file "src/eusart.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;  txData          1    wreg     unsigned char 
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;  txData          1    1[BANK1 ] unsigned char 
  6499 ;; Return value:  Size  Location     Type
  6500 ;;                  1    wreg      void 
  6501 ;; Registers used:
  6502 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6503 ;; Tracked objects:
  6504 ;;		On entry : 0/0
  6505 ;;		On exit  : 0/0
  6506 ;;		Unchanged: 0/0
  6507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6508 ;;      Params:         0       0       0       0       0       0       0       0
  6509 ;;      Locals:         0       0       1       0       0       0       0       0
  6510 ;;      Temps:          0       0       1       0       0       0       0       0
  6511 ;;      Totals:         0       0       2       0       0       0       0       0
  6512 ;;Total ram usage:        2 bytes
  6513 ;; Hardware stack levels used:    1
  6514 ;; Hardware stack levels required when called:    7
  6515 ;; This function calls:
  6516 ;;		Nothing
  6517 ;; This function is called by:
  6518 ;;		_EUSART_Write_Frame
  6519 ;;		_Read_Offset
  6520 ;;		_main
  6521 ;;		_Test_Sleep_Mpu6500
  6522 ;; This function uses a non-reentrant model
  6523 ;;
  6524                           
  6525                           
  6526                           ;psect for function _EUSART_Write
  6527  0CD2                     _EUSART_Write:	
  6528                           
  6529                           ;incstack = 0
  6530                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6531                           ;EUSART_Write@txData stored from wreg
  6532  0CD2  0141               	movlb	1	; select bank1
  6533  0CD3  00C2               	movwf	EUSART_Write@txData^(0+128)
  6534  0CD4                     l2421:	
  6535                           ;eusart.c: 188: {
  6536                           
  6537                           ;eusart.c: 187: while(0 == eusartTxBufferRemaining)
  6538                           
  6539  0CD4  0140               	movlb	0	; select bank0
  6540  0CD5  086E               	movf	_eusartTxBufferRemaining,w	;volatile
  6541  0CD6  1903               	btfsc	3,2
  6542  0CD7  2CD4               	goto	l2421
  6543  0CD8                     l183:	
  6544                           ;eusart.c: 191: {
  6545                           
  6546                           ;eusart.c: 189: };eusart.c: 190: while(!(TX1STA&0x02))
  6547                           
  6548  0CD8  0142               	movlb	2	; select bank2
  6549  0CD9  1C9E               	btfss	30,1	;volatile
  6550  0CDA  2CD8               	goto	l183
  6551                           
  6552                           ;eusart.c: 193: };eusart.c: 194: if(0 == PIE3bits.TX1IE)
  6553  0CDB  014E               	movlb	14	; select bank14
  6554  0CDC  1A19               	btfsc	25,4	;volatile
  6555  0CDD  2CE3               	goto	l186
  6556                           
  6557                           ;eusart.c: 195: {;eusart.c: 196: TX1REG = txData;
  6558  0CDE  0141               	movlb	1	; select bank1
  6559  0CDF  0842               	movf	EUSART_Write@txData^(0+128),w
  6560  0CE0  0142               	movlb	2	; select bank2
  6561  0CE1  009A               	movwf	26	;volatile
  6562                           
  6563                           ;eusart.c: 197: }
  6564  0CE2  0008               	return
  6565  0CE3                     l186:	
  6566                           
  6567                           ;eusart.c: 198: else;eusart.c: 199: {;eusart.c: 200: PIE3bits.TX1IE = 0;
  6568  0CE3  1219               	bcf	25,4	;volatile
  6569                           
  6570                           ;eusart.c: 201: eusartTxBuffer[eusartTxHead++] = txData;
  6571  0CE4  0141               	movlb	1	; select bank1
  6572  0CE5  0842               	movf	EUSART_Write@txData^(0+128),w
  6573  0CE6  00C1               	movwf	??_EUSART_Write^(0+128)
  6574  0CE7  0140               	movlb	0	; select bank0
  6575  0CE8  086D               	movf	_eusartTxHead,w
  6576  0CE9  3EA0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6577  0CEA  0086               	movwf	6
  6578  0CEB  0187               	clrf	7
  6579  0CEC  0141               	movlb	1	; select bank1
  6580  0CED  0841               	movf	??_EUSART_Write^(0+128),w
  6581  0CEE  0081               	movwf	1
  6582  0CEF  3001               	movlw	1
  6583  0CF0  00C1               	movwf	??_EUSART_Write^(0+128)
  6584  0CF1  0841               	movf	??_EUSART_Write^(0+128),w
  6585  0CF2  0140               	movlb	0	; select bank0
  6586  0CF3  07ED               	addwf	_eusartTxHead,f
  6587                           
  6588                           ;eusart.c: 202: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6589  0CF4  3008               	movlw	8
  6590  0CF5  026D               	subwf	_eusartTxHead,w
  6591  0CF6  1803               	btfsc	3,0
  6592                           
  6593                           ;eusart.c: 203: {;eusart.c: 204: eusartTxHead = 0;
  6594  0CF7  01ED               	clrf	_eusartTxHead
  6595                           
  6596                           ;eusart.c: 205: };eusart.c: 206: eusartTxBufferRemaining--;
  6597  0CF8  3001               	movlw	1
  6598  0CF9  02EE               	subwf	_eusartTxBufferRemaining,f	;volatile
  6599                           
  6600                           ;eusart.c: 207: PIE3bits.TX1IE = 1;
  6601  0CFA  014E               	movlb	14	; select bank14
  6602  0CFB  1619               	bsf	25,4	;volatile
  6603  0CFC  0008               	return
  6604  0CFD                     __end_of_EUSART_Write:	
  6605                           
  6606                           	psect	text22
  6607  0B40                     __ptext22:	
  6608 ;; *************** function _Com_Lock_MPU_Write_Command *****************
  6609 ;; Defined at:
  6610 ;;		line 121 in file "src/mpu_iic.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  reg             1    wreg     unsigned char 
  6613 ;;  data            1    5[BANK1 ] unsigned char 
  6614 ;; Auto vars:     Size  Location     Type
  6615 ;;  reg             1    6[BANK1 ] unsigned char 
  6616 ;; Return value:  Size  Location     Type
  6617 ;;                  1    wreg      void 
  6618 ;; Registers used:
  6619 ;;		wreg, status,2, status,0, pclath, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6625 ;;      Params:         0       0       1       0       0       0       0       0
  6626 ;;      Locals:         0       0       1       0       0       0       0       0
  6627 ;;      Temps:          0       0       0       0       0       0       0       0
  6628 ;;      Totals:         0       0       2       0       0       0       0       0
  6629 ;;Total ram usage:        2 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; Hardware stack levels required when called:    8
  6632 ;; This function calls:
  6633 ;;		_Com_Lock_IIC_Start
  6634 ;;		_Com_Lock_IIC_Stop
  6635 ;;		_Com_Lock_IIC_Write_Data
  6636 ;; This function is called by:
  6637 ;;		_Init_MPU6500
  6638 ;;		_PowerDown_Mpu6500
  6639 ;;		_WakeUp_Mpu6500
  6640 ;;		_Test_Sleep_Mpu6500
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           
  6645                           ;psect for function _Com_Lock_MPU_Write_Command
  6646  0B40                     _Com_Lock_MPU_Write_Command:	
  6647                           
  6648                           ;incstack = 0
  6649                           ; Regs used in _Com_Lock_MPU_Write_Command: [wreg+status,2+status,0+pclath+cstack]
  6650                           ;Com_Lock_MPU_Write_Command@reg stored from wreg
  6651  0B40  0141               	movlb	1	; select bank1
  6652  0B41  00C7               	movwf	Com_Lock_MPU_Write_Command@reg^(0+128)
  6653                           
  6654                           ;mpu_iic.c: 123: Com_Lock_IIC_Start();
  6655  0B42  318B  231C  318B   	fcall	_Com_Lock_IIC_Start
  6656                           
  6657                           ;mpu_iic.c: 124: Com_Lock_IIC_Write_Data(0xD0);
  6658  0B45  30D0               	movlw	208
  6659  0B46  318F  276B  318B   	fcall	_Com_Lock_IIC_Write_Data
  6660                           
  6661                           ;mpu_iic.c: 125: Com_Lock_IIC_Write_Data(reg);
  6662  0B49  0141               	movlb	1	; select bank1
  6663  0B4A  0847               	movf	Com_Lock_MPU_Write_Command@reg^(0+128),w
  6664  0B4B  318F  276B  318B   	fcall	_Com_Lock_IIC_Write_Data
  6665                           
  6666                           ;mpu_iic.c: 126: Com_Lock_IIC_Write_Data(data);
  6667  0B4E  0141               	movlb	1	; select bank1
  6668  0B4F  0846               	movf	Com_Lock_MPU_Write_Command@data^(0+128),w
  6669  0B50  318F  276B  318B   	fcall	_Com_Lock_IIC_Write_Data
  6670                           
  6671                           ;mpu_iic.c: 127: Com_Lock_IIC_Stop();
  6672  0B53  318A  22FB         	fcall	_Com_Lock_IIC_Stop
  6673  0B55  0008               	return
  6674  0B56                     __end_of_Com_Lock_MPU_Write_Command:	
  6675                           
  6676                           	psect	text23
  6677  0F6B                     __ptext23:	
  6678 ;; *************** function _Com_Lock_IIC_Write_Data *****************
  6679 ;; Defined at:
  6680 ;;		line 77 in file "src/mpu_iic.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;  dat             1    wreg     unsigned char 
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;  dat             1    1[BANK1 ] unsigned char 
  6685 ;;  i               2    3[BANK1 ] int 
  6686 ;;  retVal          1    2[BANK1 ] unsigned char 
  6687 ;; Return value:  Size  Location     Type
  6688 ;;                  1    wreg      unsigned char 
  6689 ;; Registers used:
  6690 ;;		wreg, status,2, status,0
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6696 ;;      Params:         0       0       0       0       0       0       0       0
  6697 ;;      Locals:         0       0       4       0       0       0       0       0
  6698 ;;      Temps:          0       0       1       0       0       0       0       0
  6699 ;;      Totals:         0       0       5       0       0       0       0       0
  6700 ;;Total ram usage:        5 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; Hardware stack levels required when called:    7
  6703 ;; This function calls:
  6704 ;;		Nothing
  6705 ;; This function is called by:
  6706 ;;		_Com_Lock_MPU_Write_Command
  6707 ;;		_Com_Lock_MPU_RD_Reg
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           
  6712                           ;psect for function _Com_Lock_IIC_Write_Data
  6713  0F6B                     _Com_Lock_IIC_Write_Data:	
  6714                           
  6715                           ;incstack = 0
  6716                           ; Regs used in _Com_Lock_IIC_Write_Data: [wreg+status,2+status,0]
  6717                           ;Com_Lock_IIC_Write_Data@dat stored from wreg
  6718  0F6B  0141               	movlb	1	; select bank1
  6719  0F6C  00C2               	movwf	Com_Lock_IIC_Write_Data@dat^(0+128)
  6720                           
  6721                           ;mpu_iic.c: 79: int i = 0;
  6722  0F6D  01C4               	clrf	Com_Lock_IIC_Write_Data@i^(0+128)
  6723  0F6E  01C5               	clrf	(Com_Lock_IIC_Write_Data@i+1)^(0+128)
  6724                           
  6725                           ;mpu_iic.c: 80: char retVal;;mpu_iic.c: 81: for(i = 0; i < 8; )
  6726  0F6F  01C4               	clrf	Com_Lock_IIC_Write_Data@i^(0+128)
  6727  0F70  01C5               	clrf	(Com_Lock_IIC_Write_Data@i+1)^(0+128)
  6728  0F71  0845               	movf	(Com_Lock_IIC_Write_Data@i+1)^(0+128),w
  6729  0F72  3A80               	xorlw	128
  6730  0F73  00C1               	movwf	??_Com_Lock_IIC_Write_Data^(0+128)
  6731  0F74  3080               	movlw	128
  6732  0F75  0241               	subwf	??_Com_Lock_IIC_Write_Data^(0+128),w
  6733  0F76  3008               	movlw	8
  6734  0F77  1903               	btfsc	3,2
  6735  0F78  0244               	subwf	Com_Lock_IIC_Write_Data@i^(0+128),w
  6736  0F79  1803               	btfsc	3,0
  6737  0F7A  2F99               	goto	l338
  6738  0F7B                     l337:	
  6739                           
  6740                           ;mpu_iic.c: 82: {;mpu_iic.c: 83: PORTCbits.RC3 = 0;
  6741  0F7B  0140               	movlb	0	; select bank0
  6742  0F7C  118E               	bcf	14,3	;volatile
  6743                           
  6744                           ;mpu_iic.c: 84: if(dat & 0x80)
  6745  0F7D  0141               	movlb	1	; select bank1
  6746  0F7E  1FC2               	btfss	Com_Lock_IIC_Write_Data@dat^(0+128),7
  6747  0F7F  2F83               	goto	l339
  6748                           
  6749                           ;mpu_iic.c: 85: {;mpu_iic.c: 86: PORTCbits.RC4 = 1;
  6750  0F80  0140               	movlb	0	; select bank0
  6751  0F81  160E               	bsf	14,4	;volatile
  6752                           
  6753                           ;mpu_iic.c: 87: }
  6754  0F82  2F85               	goto	l2251
  6755  0F83                     l339:	
  6756                           
  6757                           ;mpu_iic.c: 88: else;mpu_iic.c: 89: {;mpu_iic.c: 90: PORTCbits.RC4 = 0;
  6758  0F83  0140               	movlb	0	; select bank0
  6759  0F84  120E               	bcf	14,4	;volatile
  6760  0F85                     l2251:	
  6761                           
  6762                           ;mpu_iic.c: 91: };mpu_iic.c: 92: dat <<= 1;
  6763  0F85  1003               	clrc
  6764  0F86  0141               	movlb	1	; select bank1
  6765  0F87  0DC2               	rlf	Com_Lock_IIC_Write_Data@dat^(0+128),f
  6766                           
  6767                           ;mpu_iic.c: 93: i++;
  6768  0F88  3001               	movlw	1
  6769  0F89  07C4               	addwf	Com_Lock_IIC_Write_Data@i^(0+128),f
  6770  0F8A  3000               	movlw	0
  6771  0F8B  3DC5               	addwfc	(Com_Lock_IIC_Write_Data@i+1)^(0+128),f
  6772                           
  6773                           ;mpu_iic.c: 95: PORTCbits.RC3 = 1;
  6774  0F8C  0140               	movlb	0	; select bank0
  6775  0F8D  158E               	bsf	14,3	;volatile
  6776  0F8E  0141               	movlb	1	; select bank1
  6777  0F8F  0845               	movf	(Com_Lock_IIC_Write_Data@i+1)^(0+128),w
  6778  0F90  3A80               	xorlw	128
  6779  0F91  00C1               	movwf	??_Com_Lock_IIC_Write_Data^(0+128)
  6780  0F92  3080               	movlw	128
  6781  0F93  0241               	subwf	??_Com_Lock_IIC_Write_Data^(0+128),w
  6782  0F94  3008               	movlw	8
  6783  0F95  1903               	btfsc	3,2
  6784  0F96  0244               	subwf	Com_Lock_IIC_Write_Data@i^(0+128),w
  6785  0F97  1C03               	skipc
  6786  0F98  2F7B               	goto	l337
  6787  0F99                     l338:	
  6788                           
  6789                           ;mpu_iic.c: 98: };mpu_iic.c: 99: PORTCbits.RC3 = 0;
  6790  0F99  0140               	movlb	0	; select bank0
  6791  0F9A  118E               	bcf	14,3	;volatile
  6792                           
  6793                           ;mpu_iic.c: 101: TRISC |= 0x10;
  6794  0F9B  1614               	bsf	20,4	;volatile
  6795                           
  6796                           ;mpu_iic.c: 102: _delay((unsigned long)((4)*(8000000/4000000.0)));
  6797  0F9C  3200               	nop2	;2 cycle nop
  6798  0F9D  3200               	nop2	;2 cycle nop
  6799  0F9E  3200               	nop2	;2 cycle nop
  6800  0F9F  3200               	nop2	;2 cycle nop
  6801                           
  6802                           ;mpu_iic.c: 105: PORTCbits.RC3 = 1;
  6803  0FA0  0140               	movlb	0	; select bank0
  6804  0FA1  158E               	bsf	14,3	;volatile
  6805                           
  6806                           ;mpu_iic.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  6807  0FA2  3200               	nop2	;2 cycle nop
  6808  0FA3  3200               	nop2	;2 cycle nop
  6809                           
  6810                           ;mpu_iic.c: 107: retVal = PORTCbits.RC4;
  6811  0FA4  3000               	movlw	0
  6812  0FA5  0140               	movlb	0	; select bank0
  6813  0FA6  1A0E               	btfsc	14,4	;volatile
  6814  0FA7  3001               	movlw	1
  6815  0FA8  0141               	movlb	1	; select bank1
  6816  0FA9  00C3               	movwf	Com_Lock_IIC_Write_Data@retVal^(0+128)
  6817                           
  6818                           ;mpu_iic.c: 108: PORTCbits.RC3 = 0;
  6819  0FAA  0140               	movlb	0	; select bank0
  6820  0FAB  118E               	bcf	14,3	;volatile
  6821                           
  6822                           ;mpu_iic.c: 109: TRISC &= 0xEF;
  6823  0FAC  30EF               	movlw	239
  6824  0FAD  0141               	movlb	1	; select bank1
  6825  0FAE  00C1               	movwf	??_Com_Lock_IIC_Write_Data^(0+128)
  6826  0FAF  0841               	movf	??_Com_Lock_IIC_Write_Data^(0+128),w
  6827  0FB0  0140               	movlb	0	; select bank0
  6828  0FB1  0594               	andwf	20,f	;volatile
  6829                           
  6830                           ;mpu_iic.c: 110: return retVal;
  6831  0FB2  0141               	movlb	1	; select bank1
  6832  0FB3  0843               	movf	Com_Lock_IIC_Write_Data@retVal^(0+128),w
  6833  0FB4  0008               	return
  6834  0FB5                     __end_of_Com_Lock_IIC_Write_Data:	
  6835                           
  6836                           	psect	text24
  6837  0AFB                     __ptext24:	
  6838 ;; *************** function _Com_Lock_IIC_Stop *****************
  6839 ;; Defined at:
  6840 ;;		line 60 in file "src/mpu_iic.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;		None
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;		None
  6845 ;; Return value:  Size  Location     Type
  6846 ;;                  1    wreg      void 
  6847 ;; Registers used:
  6848 ;;		None
  6849 ;; Tracked objects:
  6850 ;;		On entry : 0/0
  6851 ;;		On exit  : 0/0
  6852 ;;		Unchanged: 0/0
  6853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6854 ;;      Params:         0       0       0       0       0       0       0       0
  6855 ;;      Locals:         0       0       0       0       0       0       0       0
  6856 ;;      Temps:          0       0       0       0       0       0       0       0
  6857 ;;      Totals:         0       0       0       0       0       0       0       0
  6858 ;;Total ram usage:        0 bytes
  6859 ;; Hardware stack levels used:    1
  6860 ;; Hardware stack levels required when called:    7
  6861 ;; This function calls:
  6862 ;;		Nothing
  6863 ;; This function is called by:
  6864 ;;		_Com_Lock_MPU_Write_Command
  6865 ;;		_Com_Lock_MPU_RD_Reg
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           
  6870                           ;psect for function _Com_Lock_IIC_Stop
  6871  0AFB                     _Com_Lock_IIC_Stop:	
  6872                           
  6873                           ;mpu_iic.c: 62: PORTCbits.RC4 = 0;
  6874                           
  6875                           ;incstack = 0
  6876                           ; Regs used in _Com_Lock_IIC_Stop: []
  6877  0AFB  0140               	movlb	0	; select bank0
  6878  0AFC  120E               	bcf	14,4	;volatile
  6879                           
  6880                           ;mpu_iic.c: 63: _delay((unsigned long)((3)*(8000000/4000000.0)));
  6881  0AFD  3200               	nop2	;2 cycle nop
  6882  0AFE  3200               	nop2	;2 cycle nop
  6883  0AFF  3200               	nop2	;2 cycle nop
  6884                           
  6885                           ;mpu_iic.c: 64: PORTCbits.RC3 = 1;
  6886  0B00  0140               	movlb	0	; select bank0
  6887  0B01  158E               	bsf	14,3	;volatile
  6888                           
  6889                           ;mpu_iic.c: 65: _delay((unsigned long)((3)*(8000000/4000000.0)));
  6890  0B02  3200               	nop2	;2 cycle nop
  6891  0B03  3200               	nop2	;2 cycle nop
  6892  0B04  3200               	nop2	;2 cycle nop
  6893                           
  6894                           ;mpu_iic.c: 66: PORTCbits.RC4 = 1;
  6895  0B05  0140               	movlb	0	; select bank0
  6896  0B06  160E               	bsf	14,4	;volatile
  6897                           
  6898                           ;mpu_iic.c: 67: _delay((unsigned long)((3)*(8000000/4000000.0)));
  6899  0B07  3200               	nop2	;2 cycle nop
  6900  0B08  3200               	nop2	;2 cycle nop
  6901  0B09  3200               	nop2	;2 cycle nop
  6902  0B0A  0008               	return
  6903  0B0B                     __end_of_Com_Lock_IIC_Stop:	
  6904                           
  6905                           	psect	text25
  6906  0B1C                     __ptext25:	
  6907 ;; *************** function _Com_Lock_IIC_Start *****************
  6908 ;; Defined at:
  6909 ;;		line 40 in file "src/mpu_iic.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;		None
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;		None
  6914 ;; Return value:  Size  Location     Type
  6915 ;;                  1    wreg      void 
  6916 ;; Registers used:
  6917 ;;		None
  6918 ;; Tracked objects:
  6919 ;;		On entry : 0/0
  6920 ;;		On exit  : 0/0
  6921 ;;		Unchanged: 0/0
  6922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6923 ;;      Params:         0       0       0       0       0       0       0       0
  6924 ;;      Locals:         0       0       0       0       0       0       0       0
  6925 ;;      Temps:          0       0       0       0       0       0       0       0
  6926 ;;      Totals:         0       0       0       0       0       0       0       0
  6927 ;;Total ram usage:        0 bytes
  6928 ;; Hardware stack levels used:    1
  6929 ;; Hardware stack levels required when called:    7
  6930 ;; This function calls:
  6931 ;;		Nothing
  6932 ;; This function is called by:
  6933 ;;		_Com_Lock_MPU_Write_Command
  6934 ;;		_Com_Lock_MPU_RD_Reg
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           
  6939                           ;psect for function _Com_Lock_IIC_Start
  6940  0B1C                     _Com_Lock_IIC_Start:	
  6941                           
  6942                           ;mpu_iic.c: 42: PORTCbits.RC4 = 1;
  6943                           
  6944                           ;incstack = 0
  6945                           ; Regs used in _Com_Lock_IIC_Start: []
  6946  0B1C  0140               	movlb	0	; select bank0
  6947  0B1D  160E               	bsf	14,4	;volatile
  6948                           
  6949                           ;mpu_iic.c: 44: _delay((unsigned long)((2)*(8000000/4000000.0)));
  6950  0B1E  3200               	nop2	;2 cycle nop
  6951  0B1F  3200               	nop2	;2 cycle nop
  6952                           
  6953                           ;mpu_iic.c: 45: PORTCbits.RC3 = 1;
  6954  0B20  0140               	movlb	0	; select bank0
  6955  0B21  158E               	bsf	14,3	;volatile
  6956                           
  6957                           ;mpu_iic.c: 47: _delay((unsigned long)((3)*(8000000/4000000.0)));
  6958  0B22  3200               	nop2	;2 cycle nop
  6959  0B23  3200               	nop2	;2 cycle nop
  6960  0B24  3200               	nop2	;2 cycle nop
  6961                           
  6962                           ;mpu_iic.c: 48: PORTCbits.RC4 = 0;
  6963  0B25  0140               	movlb	0	; select bank0
  6964  0B26  120E               	bcf	14,4	;volatile
  6965                           
  6966                           ;mpu_iic.c: 49: _delay((unsigned long)((3)*(8000000/4000000.0)));
  6967  0B27  3200               	nop2	;2 cycle nop
  6968  0B28  3200               	nop2	;2 cycle nop
  6969  0B29  3200               	nop2	;2 cycle nop
  6970                           
  6971                           ;mpu_iic.c: 50: PORTCbits.RC3 = 0;
  6972  0B2A  0140               	movlb	0	; select bank0
  6973  0B2B  118E               	bcf	14,3	;volatile
  6974  0B2C  0008               	return
  6975  0B2D                     __end_of_Com_Lock_IIC_Start:	
  6976                           
  6977                           	psect	text26
  6978  0BC0                     __ptext26:	
  6979 ;; *************** function _EUSART_Initialize *****************
  6980 ;; Defined at:
  6981 ;;		line 94 in file "src/eusart.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;		None
  6984 ;; Auto vars:     Size  Location     Type
  6985 ;;		None
  6986 ;; Return value:  Size  Location     Type
  6987 ;;                  1    wreg      void 
  6988 ;; Registers used:
  6989 ;;		wreg, status,2
  6990 ;; Tracked objects:
  6991 ;;		On entry : 0/0
  6992 ;;		On exit  : 0/0
  6993 ;;		Unchanged: 0/0
  6994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6995 ;;      Params:         0       0       0       0       0       0       0       0
  6996 ;;      Locals:         0       0       0       0       0       0       0       0
  6997 ;;      Temps:          0       0       1       0       0       0       0       0
  6998 ;;      Totals:         0       0       1       0       0       0       0       0
  6999 ;;Total ram usage:        1 bytes
  7000 ;; Hardware stack levels used:    1
  7001 ;; Hardware stack levels required when called:    7
  7002 ;; This function calls:
  7003 ;;		Nothing
  7004 ;; This function is called by:
  7005 ;;		_SYSTEM_Initialize
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           
  7010                           ;psect for function _EUSART_Initialize
  7011  0BC0                     _EUSART_Initialize:	
  7012                           
  7013                           ;eusart.c: 97: PIE3bits.RC1IE = 0;
  7014                           
  7015                           ;incstack = 0
  7016                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  7017  0BC0  014E               	movlb	14	; select bank14
  7018  0BC1  1299               	bcf	25,5	;volatile
  7019                           
  7020                           ;eusart.c: 98: PIE3bits.TX1IE = 0;
  7021  0BC2  1219               	bcf	25,4	;volatile
  7022                           
  7023                           ;eusart.c: 103: BAUD1CON = 0x48;
  7024  0BC3  3048               	movlw	72
  7025  0BC4  0142               	movlb	2	; select bank2
  7026  0BC5  009F               	movwf	31	;volatile
  7027                           
  7028                           ;eusart.c: 106: RC1STA = 0x90;
  7029  0BC6  3090               	movlw	144
  7030  0BC7  009D               	movwf	29	;volatile
  7031                           
  7032                           ;eusart.c: 109: TX1STA = 0x24;
  7033  0BC8  3024               	movlw	36
  7034  0BC9  009E               	movwf	30	;volatile
  7035                           
  7036                           ;eusart.c: 112: SP1BRGL = 0x44;
  7037  0BCA  3044               	movlw	68
  7038  0BCB  009B               	movwf	27	;volatile
  7039                           
  7040                           ;eusart.c: 115: SP1BRGH = 0x00;
  7041  0BCC  019C               	clrf	28	;volatile
  7042                           
  7043                           ;eusart.c: 119: eusartTxHead = 0;
  7044  0BCD  0140               	movlb	0	; select bank0
  7045  0BCE  01ED               	clrf	_eusartTxHead
  7046                           
  7047                           ;eusart.c: 120: eusartTxTail = 0;
  7048  0BCF  01EC               	clrf	_eusartTxTail
  7049                           
  7050                           ;eusart.c: 121: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  7051  0BD0  3008               	movlw	8
  7052  0BD1  0141               	movlb	1	; select bank1
  7053  0BD2  00C1               	movwf	??_EUSART_Initialize^(0+128)
  7054  0BD3  0841               	movf	??_EUSART_Initialize^(0+128),w
  7055  0BD4  0140               	movlb	0	; select bank0
  7056  0BD5  00EE               	movwf	_eusartTxBufferRemaining	;volatile
  7057                           
  7058                           ;eusart.c: 123: eusartRxHead = 0;
  7059  0BD6  01EB               	clrf	_eusartRxHead
  7060                           
  7061                           ;eusart.c: 124: eusartRxTail = 0;
  7062  0BD7  0141               	movlb	1	; select bank1
  7063  0BD8  01BA               	clrf	_eusartRxTail^(0+128)
  7064                           
  7065                           ;eusart.c: 125: eusartRxCount = 0;
  7066  0BD9  01B9               	clrf	_eusartRxCount^(0+128)	;volatile
  7067                           
  7068                           ;eusart.c: 126: eusartTempRxCount = 0;
  7069  0BDA  01B8               	clrf	_eusartTempRxCount^(0+128)	;volatile
  7070                           
  7071                           ;eusart.c: 129: PIE3bits.RC1IE = 1;
  7072  0BDB  014E               	movlb	14	; select bank14
  7073  0BDC  1699               	bsf	25,5	;volatile
  7074  0BDD  0008               	return
  7075  0BDE                     __end_of_EUSART_Initialize:	
  7076                           
  7077                           	psect	text27
  7078  0ADD                     __ptext27:	
  7079 ;; *************** function _ADC_Initialize *****************
  7080 ;; Defined at:
  7081 ;;		line 64 in file "src/adc.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;		None
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;		None
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      void 
  7088 ;; Registers used:
  7089 ;;		wreg, status,2, status,0
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7095 ;;      Params:         0       0       0       0       0       0       0       0
  7096 ;;      Locals:         0       0       0       0       0       0       0       0
  7097 ;;      Temps:          0       0       1       0       0       0       0       0
  7098 ;;      Totals:         0       0       1       0       0       0       0       0
  7099 ;;Total ram usage:        1 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:    7
  7102 ;; This function calls:
  7103 ;;		Nothing
  7104 ;; This function is called by:
  7105 ;;		_SYSTEM_Initialize
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function _ADC_Initialize
  7111  0ADD                     _ADC_Initialize:	
  7112                           
  7113                           ;adc.c: 69: ADCON0 = 0x4D;
  7114                           
  7115                           ;incstack = 0
  7116                           ; Regs used in _ADC_Initialize: [wreg+status,2+status,0]
  7117  0ADD  304D               	movlw	77
  7118  0ADE  0141               	movlb	1	; select bank1
  7119  0ADF  009D               	movwf	29	;volatile
  7120                           
  7121                           ;adc.c: 72: ADCON1 = 0x90;
  7122  0AE0  3090               	movlw	144
  7123  0AE1  009E               	movwf	30	;volatile
  7124                           
  7125                           ;adc.c: 75: ADACT = 0x00;
  7126  0AE2  019F               	clrf	31	;volatile
  7127                           
  7128                           ;adc.c: 78: ADRESL = 0x00;
  7129  0AE3  019B               	clrf	27	;volatile
  7130                           
  7131                           ;adc.c: 81: ADRESH = 0x00;
  7132  0AE4  019C               	clrf	28	;volatile
  7133                           
  7134                           ;adc.c: 83: FVRCON |= 0x8A;
  7135  0AE5  308A               	movlw	138
  7136  0AE6  00C1               	movwf	??_ADC_Initialize^(0+128)
  7137  0AE7  0841               	movf	??_ADC_Initialize^(0+128),w
  7138  0AE8  0152               	movlb	18	; select bank18
  7139  0AE9  048C               	iorwf	12,f	;volatile
  7140  0AEA  0008               	return
  7141  0AEB                     __end_of_ADC_Initialize:	
  7142                           
  7143                           	psect	text28
  7144  0ACF                     __ptext28:	
  7145 ;; *************** function _ReadTouchKeyPIN *****************
  7146 ;; Defined at:
  7147 ;;		line 152 in file "src/gpio.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;		None
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;		None
  7152 ;; Return value:  Size  Location     Type
  7153 ;;                  1    wreg      unsigned char 
  7154 ;; Registers used:
  7155 ;;		wreg
  7156 ;; Tracked objects:
  7157 ;;		On entry : 0/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7161 ;;      Params:         0       0       0       0       0       0       0       0
  7162 ;;      Locals:         0       0       0       0       0       0       0       0
  7163 ;;      Temps:          0       0       0       0       0       0       0       0
  7164 ;;      Totals:         0       0       0       0       0       0       0       0
  7165 ;;Total ram usage:        0 bytes
  7166 ;; Hardware stack levels used:    1
  7167 ;; Hardware stack levels required when called:    7
  7168 ;; This function calls:
  7169 ;;		Nothing
  7170 ;; This function is called by:
  7171 ;;		_main
  7172 ;; This function uses a non-reentrant model
  7173 ;;
  7174                           
  7175                           
  7176                           ;psect for function _ReadTouchKeyPIN
  7177  0ACF                     _ReadTouchKeyPIN:	
  7178                           
  7179                           ;gpio.c: 154: if((PORTBbits.RB1)&&(PORTBbits.RB2))
  7180                           
  7181                           ;incstack = 0
  7182                           ; Regs used in _ReadTouchKeyPIN: [wreg]
  7183  0ACF  0140               	movlb	0	; select bank0
  7184  0AD0  188D               	btfsc	13,1	;volatile
  7185  0AD1  1D0D               	btfss	13,2	;volatile
  7186  0AD2  2AD5               	goto	l109
  7187                           
  7188                           ;gpio.c: 155: {;gpio.c: 156: return 2;
  7189  0AD3  3002               	movlw	2
  7190  0AD4  0008               	return
  7191  0AD5                     l109:	
  7192                           ;gpio.c: 157: }
  7193                           
  7194                           
  7195                           ;gpio.c: 158: else if((PORTBbits.RB1)||(PORTBbits.RB2))
  7196  0AD5  188D               	btfsc	13,1	;volatile
  7197  0AD6  2AD9               	goto	l3101
  7198  0AD7  1D0D               	btfss	13,2	;volatile
  7199  0AD8  2ADB               	goto	l3105
  7200  0AD9                     l3101:	
  7201                           
  7202                           ;gpio.c: 159: {;gpio.c: 160: return 1;
  7203  0AD9  3001               	movlw	1
  7204  0ADA  0008               	return
  7205  0ADB                     l3105:	
  7206                           
  7207                           ;gpio.c: 161: };gpio.c: 162: return 0;
  7208  0ADB  3000               	movlw	0
  7209  0ADC  0008               	return
  7210  0ADD                     __end_of_ReadTouchKeyPIN:	
  7211                           
  7212                           	psect	text29
  7213  0A88                     __ptext29:	
  7214 ;; *************** function _ReadRstPIN *****************
  7215 ;; Defined at:
  7216 ;;		line 143 in file "src/gpio.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;		None
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;		None
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      unsigned char 
  7223 ;; Registers used:
  7224 ;;		wreg
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7230 ;;      Params:         0       0       0       0       0       0       0       0
  7231 ;;      Locals:         0       0       0       0       0       0       0       0
  7232 ;;      Temps:          0       0       0       0       0       0       0       0
  7233 ;;      Totals:         0       0       0       0       0       0       0       0
  7234 ;;Total ram usage:        0 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    7
  7237 ;; This function calls:
  7238 ;;		Nothing
  7239 ;; This function is called by:
  7240 ;;		_main
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           
  7245                           ;psect for function _ReadRstPIN
  7246  0A88                     _ReadRstPIN:	
  7247                           
  7248                           ;gpio.c: 145: if(PORTBbits.RB5)
  7249                           
  7250                           ;incstack = 0
  7251                           ; Regs used in _ReadRstPIN: [wreg]
  7252  0A88  0140               	movlb	0	; select bank0
  7253  0A89  1E8D               	btfss	13,5	;volatile
  7254  0A8A  2A8D               	goto	l3085
  7255                           
  7256                           ;gpio.c: 146: {;gpio.c: 147: return 1;
  7257  0A8B  3001               	movlw	1
  7258  0A8C  0008               	return
  7259  0A8D                     l3085:	
  7260                           
  7261                           ;gpio.c: 148: };gpio.c: 149: return 0;
  7262  0A8D  3000               	movlw	0
  7263  0A8E  0008               	return
  7264  0A8F                     __end_of_ReadRstPIN:	
  7265                           
  7266                           	psect	text30
  7267  0618                     __ptext30:	
  7268 ;; *************** function _EUSART_Read *****************
  7269 ;; Defined at:
  7270 ;;		line 138 in file "src/eusart.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;		None
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;  bitChk          1    1[BANK1 ] unsigned char 
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  1    wreg      unsigned char 
  7277 ;; Registers used:
  7278 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7284 ;;      Params:         0       0       0       0       0       0       0       0
  7285 ;;      Locals:         0       0       1       0       0       0       0       0
  7286 ;;      Temps:          0       0       1       0       0       0       0       0
  7287 ;;      Totals:         0       0       2       0       0       0       0       0
  7288 ;;Total ram usage:        2 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; Hardware stack levels required when called:    7
  7291 ;; This function calls:
  7292 ;;		Nothing
  7293 ;; This function is called by:
  7294 ;;		_main
  7295 ;; This function uses a non-reentrant model
  7296 ;;
  7297                           
  7298                           
  7299                           ;psect for function _EUSART_Read
  7300  0618                     _EUSART_Read:	
  7301                           
  7302                           ;eusart.c: 140: uint8_t bitChk;;eusart.c: 142: if(eusartRxCount)
  7303                           
  7304                           ;incstack = 0
  7305                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  7306  0618  0141               	movlb	1	; select bank1
  7307  0619  0839               	movf	_eusartRxCount^(0+128),w	;volatile
  7308  061A  1903               	btfsc	3,2
  7309  061B  2E81               	goto	l3155
  7310                           
  7311                           ;eusart.c: 143: {;eusart.c: 144: PIE3bits.RC1IE = 0;
  7312  061C  014E               	movlb	14	; select bank14
  7313  061D  1299               	bcf	25,5	;volatile
  7314                           
  7315                           ;eusart.c: 145: if((eusartTempRxCount == 0)&&(eusartRxBuffer[eusartRxTail]== 0xF5))
  7316  061E  0141               	movlb	1	; select bank1
  7317  061F  0838               	movf	_eusartTempRxCount^(0+128),w	;volatile
  7318  0620  1D03               	btfss	3,2
  7319  0621  2E2B               	goto	l3121
  7320  0622  083A               	movf	_eusartRxTail^(0+128),w
  7321  0623  3E34               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  7322  0624  0086               	movwf	6
  7323  0625  3001               	movlw	1	; select bank2/3
  7324  0626  0087               	movwf	7
  7325  0627  30F5               	movlw	245
  7326  0628  0601               	xorwf	1,w
  7327  0629  1903               	btfsc	3,2
  7328  062A  2E32               	goto	l3125
  7329  062B                     l3121:	
  7330                           ;eusart.c: 148: }
  7331                           
  7332                           ;eusart.c: 146: {;eusart.c: 147: eusartTempRxBuffer[eusartTempRxCount++] = eusartRxBuffe
      +                          r[eusartRxTail];
  7333                           
  7334                           
  7335                           ;eusart.c: 149: else if((eusartTempRxCount > 0) && (eusartTempRxCount < (5 - 1)))
  7336  062B  0838               	movf	_eusartTempRxCount^(0+128),w	;volatile
  7337  062C  1903               	btfsc	3,2
  7338  062D  2E45               	goto	l3129
  7339  062E  3004               	movlw	4
  7340  062F  0238               	subwf	_eusartTempRxCount^(0+128),w	;volatile
  7341  0630  1803               	skipnc
  7342  0631  2E45               	goto	l3129
  7343  0632                     l3125:	
  7344                           
  7345                           ;eusart.c: 150: {;eusart.c: 151: eusartTempRxBuffer[eusartTempRxCount++] = eusartRxBuffe
      +                          r[eusartRxTail];
  7346  0632  083A               	movf	_eusartRxTail^(0+128),w
  7347  0633  3E34               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  7348  0634  0086               	movwf	6
  7349  0635  3001               	movlw	1	; select bank2/3
  7350  0636  0087               	movwf	7
  7351  0637  0801               	movf	1,w
  7352  0638  00C1               	movwf	??_EUSART_Read^(0+128)
  7353  0639  0838               	movf	_eusartTempRxCount^(0+128),w
  7354  063A  3E20               	addlw	(low (_eusartTempRxBuffer| (0+256)))& (0+255)
  7355  063B  0086               	movwf	6
  7356  063C  3001               	movlw	1	; select bank2/3
  7357  063D  0087               	movwf	7
  7358  063E  0841               	movf	??_EUSART_Read^(0+128),w
  7359  063F  0081               	movwf	1
  7360  0640  3001               	movlw	1
  7361  0641  00C1               	movwf	??_EUSART_Read^(0+128)
  7362  0642  0841               	movf	??_EUSART_Read^(0+128),w
  7363  0643  07B8               	addwf	_eusartTempRxCount^(0+128),f	;volatile
  7364                           
  7365                           ;eusart.c: 152: }
  7366  0644  2E75               	goto	l3145
  7367  0645                     l3129:	
  7368                           
  7369                           ;eusart.c: 153: else if(eusartTempRxCount == (5 - 1))
  7370  0645  3004               	movlw	4
  7371  0646  0638               	xorwf	_eusartTempRxCount^(0+128),w	;volatile
  7372  0647  1D03               	btfss	3,2
  7373  0648  2E75               	goto	l3145
  7374                           
  7375                           ;eusart.c: 154: {;eusart.c: 155: if(eusartRxBuffer[eusartRxTail] == 0x5F)
  7376  0649  083A               	movf	_eusartRxTail^(0+128),w
  7377  064A  3E34               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  7378  064B  0086               	movwf	6
  7379  064C  3001               	movlw	1	; select bank2/3
  7380  064D  0087               	movwf	7
  7381  064E  305F               	movlw	95
  7382  064F  0601               	xorwf	1,w
  7383  0650  1D03               	btfss	3,2
  7384  0651  2E74               	goto	l3143
  7385                           
  7386                           ;eusart.c: 156: {;eusart.c: 158: eusartTempRxBuffer[eusartTempRxCount++] = eusartRxBuffe
      +                          r[eusartRxTail];
  7387  0652  083A               	movf	_eusartRxTail^(0+128),w
  7388  0653  3E34               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  7389  0654  0086               	movwf	6
  7390  0655  3001               	movlw	1	; select bank2/3
  7391  0656  0087               	movwf	7
  7392  0657  0801               	movf	1,w
  7393  0658  00C1               	movwf	??_EUSART_Read^(0+128)
  7394  0659  0838               	movf	_eusartTempRxCount^(0+128),w
  7395  065A  3E20               	addlw	(low (_eusartTempRxBuffer| (0+256)))& (0+255)
  7396  065B  0086               	movwf	6
  7397  065C  3001               	movlw	1	; select bank2/3
  7398  065D  0087               	movwf	7
  7399  065E  0841               	movf	??_EUSART_Read^(0+128),w
  7400  065F  0081               	movwf	1
  7401  0660  3001               	movlw	1
  7402  0661  00C1               	movwf	??_EUSART_Read^(0+128)
  7403  0662  0841               	movf	??_EUSART_Read^(0+128),w
  7404  0663  07B8               	addwf	_eusartTempRxCount^(0+128),f	;volatile
  7405                           
  7406                           ;eusart.c: 159: bitChk = eusartTempRxBuffer[0] ^ eusartTempRxBuffer[1] ^ eusartTempRxBuf
      +                          fer[2];
  7407  0664  0142               	movlb	2	; select bank2
  7408  0665  0821               	movf	(_eusartTempRxBuffer^(0+256)+1),w
  7409  0666  0622               	xorwf	(_eusartTempRxBuffer^(0+256)+2),w
  7410  0667  0620               	xorwf	_eusartTempRxBuffer^(0+256),w
  7411  0668  0141               	movlb	1	; select bank1
  7412  0669  00C1               	movwf	??_EUSART_Read^(0+128)
  7413  066A  0841               	movf	??_EUSART_Read^(0+128),w
  7414  066B  00C2               	movwf	EUSART_Read@bitChk^(0+128)
  7415                           
  7416                           ;eusart.c: 161: if(eusartTempRxBuffer[3] == bitChk)
  7417  066C  0142               	movlb	2	; select bank2
  7418  066D  0823               	movf	(_eusartTempRxBuffer^(0+256)+3),w
  7419  066E  0141               	movlb	1	; select bank1
  7420  066F  0642               	xorwf	EUSART_Read@bitChk^(0+128),w
  7421  0670  1D03               	skipz
  7422  0671  2E74               	goto	l3143
  7423                           
  7424                           ;eusart.c: 162: {;eusart.c: 163: eusartFrameDone = 1;
  7425  0672  01B7               	clrf	_eusartFrameDone^(0+128)
  7426  0673  0AB7               	incf	_eusartFrameDone^(0+128),f
  7427  0674                     l3143:	
  7428                           
  7429                           ;eusart.c: 165: };eusart.c: 166: };eusart.c: 167: eusartTempRxCount = 0;
  7430  0674  01B8               	clrf	_eusartTempRxCount^(0+128)	;volatile
  7431  0675                     l3145:	
  7432                           
  7433                           ;eusart.c: 168: };eusart.c: 170: eusartRxTail++;
  7434  0675  3001               	movlw	1
  7435  0676  00C1               	movwf	??_EUSART_Read^(0+128)
  7436  0677  0841               	movf	??_EUSART_Read^(0+128),w
  7437  0678  07BA               	addwf	_eusartRxTail^(0+128),f
  7438                           
  7439                           ;eusart.c: 171: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  7440  0679  3014               	movlw	20
  7441  067A  023A               	subwf	_eusartRxTail^(0+128),w
  7442  067B  1803               	btfsc	3,0
  7443                           
  7444                           ;eusart.c: 172: {;eusart.c: 173: eusartRxTail = 0;
  7445  067C  01BA               	clrf	_eusartRxTail^(0+128)
  7446                           
  7447                           ;eusart.c: 174: };eusart.c: 175: eusartRxCount--;
  7448  067D  3001               	movlw	1
  7449  067E  02B9               	subwf	_eusartRxCount^(0+128),f	;volatile
  7450                           
  7451                           ;eusart.c: 176: PIE3bits.RC1IE = 1;
  7452  067F  014E               	movlb	14	; select bank14
  7453  0680  1699               	bsf	25,5	;volatile
  7454  0681                     l3155:	
  7455                           
  7456                           ;eusart.c: 177: };eusart.c: 178: if(eusartFrameDone == 1)
  7457  0681  0141               	movlb	1	; select bank1
  7458  0682  0337               	decf	_eusartFrameDone^(0+128),w
  7459  0683  1D03               	btfss	3,2
  7460  0684  2E87               	goto	l3161
  7461                           
  7462                           ;eusart.c: 179: {;eusart.c: 180: return 1;
  7463  0685  3001               	movlw	1
  7464  0686  0008               	return
  7465  0687                     l3161:	
  7466                           
  7467                           ;eusart.c: 181: };eusart.c: 182: return 0;
  7468  0687  3000               	movlw	0
  7469  0688  0008               	return
  7470  0689                     __end_of_EUSART_Read:	
  7471                           
  7472                           	psect	text31
  7473  07FC                     __ptext31:	
  7474 ;; *************** function _Clear_FrameDone *****************
  7475 ;; Defined at:
  7476 ;;		line 257 in file "src/eusart.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;		None
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;		None
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  1    wreg      void 
  7483 ;; Registers used:
  7484 ;;		status,2
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7490 ;;      Params:         0       0       0       0       0       0       0       0
  7491 ;;      Locals:         0       0       0       0       0       0       0       0
  7492 ;;      Temps:          0       0       0       0       0       0       0       0
  7493 ;;      Totals:         0       0       0       0       0       0       0       0
  7494 ;;Total ram usage:        0 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:    7
  7497 ;; This function calls:
  7498 ;;		Nothing
  7499 ;; This function is called by:
  7500 ;;		_main
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           
  7505                           ;psect for function _Clear_FrameDone
  7506  07FC                     _Clear_FrameDone:	
  7507                           
  7508                           ;eusart.c: 259: eusartFrameDone = 0;
  7509                           
  7510                           ;incstack = 0
  7511                           ; Regs used in _Clear_FrameDone: [status,2]
  7512  07FC  0141               	movlb	1	; select bank1
  7513  07FD  01B7               	clrf	_eusartFrameDone^(0+128)
  7514                           
  7515                           ;eusart.c: 260: eusartTempRxCount = 0;
  7516  07FE  01B8               	clrf	_eusartTempRxCount^(0+128)	;volatile
  7517  07FF  0008               	return
  7518  0800                     __end_of_Clear_FrameDone:	
  7519                           
  7520                           	psect	text32
  7521  0AA0                     __ptext32:	
  7522 ;; *************** function _ClearAngle *****************
  7523 ;; Defined at:
  7524 ;;		line 107 in file "src/filter.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;		None
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;		None
  7529 ;; Return value:  Size  Location     Type
  7530 ;;                  1    wreg      void 
  7531 ;; Registers used:
  7532 ;;		wreg, status,2
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7538 ;;      Params:         0       0       0       0       0       0       0       0
  7539 ;;      Locals:         0       0       0       0       0       0       0       0
  7540 ;;      Temps:          0       0       0       0       0       0       0       0
  7541 ;;      Totals:         0       0       0       0       0       0       0       0
  7542 ;;Total ram usage:        0 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    7
  7545 ;; This function calls:
  7546 ;;		Nothing
  7547 ;; This function is called by:
  7548 ;;		_main
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           
  7553                           ;psect for function _ClearAngle
  7554  0AA0                     _ClearAngle:	
  7555                           
  7556                           ;filter.c: 109: Angle_t = 0;
  7557                           
  7558                           ;incstack = 0
  7559                           ; Regs used in _ClearAngle: [wreg+status,2]
  7560  0AA0  3000               	movlw	0
  7561  0AA1  0140               	movlb	0	; select bank0
  7562  0AA2  00DF               	movwf	_Angle_t
  7563  0AA3  3000               	movlw	0
  7564  0AA4  00E0               	movwf	_Angle_t+1
  7565  0AA5  3000               	movlw	0
  7566  0AA6  00E1               	movwf	_Angle_t+2
  7567                           
  7568                           ;filter.c: 110: gu8DoorOpened = 0;
  7569  0AA7  0141               	movlb	1	; select bank1
  7570  0AA8  01B5               	clrf	_gu8DoorOpened^(0+128)
  7571  0AA9  0008               	return
  7572  0AAA                     __end_of_ClearAngle:	
  7573                           
  7574                           	psect	text33
  7575  0D5A                     __ptext33:	
  7576 ;; *************** function _CheckDoorOpened *****************
  7577 ;; Defined at:
  7578 ;;		line 113 in file "src/filter.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;		None
  7581 ;; Auto vars:     Size  Location     Type
  7582 ;;		None
  7583 ;; Return value:  Size  Location     Type
  7584 ;;                  1    wreg      unsigned char 
  7585 ;; Registers used:
  7586 ;;		wreg, status,2, status,0, pclath, cstack
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7592 ;;      Params:         0       0       0       0       0       0       0       0
  7593 ;;      Locals:         0       0       0       0       0       0       0       0
  7594 ;;      Temps:          0       0       0       0       0       0       0       0
  7595 ;;      Totals:         0       0       0       0       0       0       0       0
  7596 ;;Total ram usage:        0 bytes
  7597 ;; Hardware stack levels used:    1
  7598 ;; Hardware stack levels required when called:    8
  7599 ;; This function calls:
  7600 ;;		___ftge
  7601 ;; This function is called by:
  7602 ;;		_main
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           
  7607                           ;psect for function _CheckDoorOpened
  7608  0D5A                     _CheckDoorOpened:	
  7609                           
  7610                           ;filter.c: 115: if((Angle_t>= 10)||(Angle_t <= -10))
  7611                           
  7612                           ;incstack = 0
  7613                           ; Regs used in _CheckDoorOpened: [wreg+status,2+status,0+pclath+cstack]
  7614  0D5A  0140               	movlb	0	; select bank0
  7615  0D5B  085F               	movf	_Angle_t,w
  7616  0D5C  0141               	movlb	1	; select bank1
  7617  0D5D  00C1               	movwf	___ftge@ff1^(0+128)
  7618  0D5E  0140               	movlb	0	; select bank0
  7619  0D5F  0860               	movf	_Angle_t+1,w
  7620  0D60  0141               	movlb	1	; select bank1
  7621  0D61  00C2               	movwf	(___ftge@ff1+1)^(0+128)
  7622  0D62  0140               	movlb	0	; select bank0
  7623  0D63  0861               	movf	_Angle_t+2,w
  7624  0D64  0141               	movlb	1	; select bank1
  7625  0D65  00C3               	movwf	(___ftge@ff1+2)^(0+128)
  7626  0D66  3000               	movlw	0
  7627  0D67  00C4               	movwf	___ftge@ff2^(0+128)
  7628  0D68  3020               	movlw	32
  7629  0D69  00C5               	movwf	(___ftge@ff2+1)^(0+128)
  7630  0D6A  3041               	movlw	65
  7631  0D6B  00C6               	movwf	(___ftge@ff2+2)^(0+128)
  7632  0D6C  318E  2634  318D   	fcall	___ftge
  7633  0D6F  1803               	btfsc	3,0
  7634  0D70  2D89               	goto	l405
  7635  0D71  3000               	movlw	0
  7636  0D72  0141               	movlb	1	; select bank1
  7637  0D73  00C1               	movwf	___ftge@ff1^(0+128)
  7638  0D74  3020               	movlw	32
  7639  0D75  00C2               	movwf	(___ftge@ff1+1)^(0+128)
  7640  0D76  30C1               	movlw	193
  7641  0D77  00C3               	movwf	(___ftge@ff1+2)^(0+128)
  7642  0D78  0140               	movlb	0	; select bank0
  7643  0D79  085F               	movf	_Angle_t,w
  7644  0D7A  0141               	movlb	1	; select bank1
  7645  0D7B  00C4               	movwf	___ftge@ff2^(0+128)
  7646  0D7C  0140               	movlb	0	; select bank0
  7647  0D7D  0860               	movf	_Angle_t+1,w
  7648  0D7E  0141               	movlb	1	; select bank1
  7649  0D7F  00C5               	movwf	(___ftge@ff2+1)^(0+128)
  7650  0D80  0140               	movlb	0	; select bank0
  7651  0D81  0861               	movf	_Angle_t+2,w
  7652  0D82  0141               	movlb	1	; select bank1
  7653  0D83  00C6               	movwf	(___ftge@ff2+2)^(0+128)
  7654  0D84  318E  2634  318D   	fcall	___ftge
  7655  0D87  1C03               	btfss	3,0
  7656  0D88  2D8C               	goto	l3231
  7657  0D89                     l405:	
  7658                           
  7659                           ;filter.c: 116: {;filter.c: 117: gu8DoorOpened = 1;
  7660  0D89  0141               	movlb	1	; select bank1
  7661  0D8A  01B5               	clrf	_gu8DoorOpened^(0+128)
  7662  0D8B  0AB5               	incf	_gu8DoorOpened^(0+128),f
  7663  0D8C                     l3231:	
  7664                           
  7665                           ;filter.c: 118: };filter.c: 119: return gu8DoorOpened;
  7666  0D8C  0141               	movlb	1	; select bank1
  7667  0D8D  0835               	movf	_gu8DoorOpened^(0+128),w
  7668  0D8E  0008               	return
  7669  0D8F                     __end_of_CheckDoorOpened:	
  7670                           
  7671                           	psect	text34
  7672  0F2A                     __ptext34:	
  7673 ;; *************** function _CheckDoorClosed *****************
  7674 ;; Defined at:
  7675 ;;		line 122 in file "src/filter.c"
  7676 ;; Parameters:    Size  Location     Type
  7677 ;;		None
  7678 ;; Auto vars:     Size  Location     Type
  7679 ;;		None
  7680 ;; Return value:  Size  Location     Type
  7681 ;;                  1    wreg      unsigned char 
  7682 ;; Registers used:
  7683 ;;		wreg, status,2, status,0, pclath, cstack
  7684 ;; Tracked objects:
  7685 ;;		On entry : 0/0
  7686 ;;		On exit  : 0/0
  7687 ;;		Unchanged: 0/0
  7688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7689 ;;      Params:         0       0       0       0       0       0       0       0
  7690 ;;      Locals:         0       0       0       0       0       0       0       0
  7691 ;;      Temps:          0       0       1       0       0       0       0       0
  7692 ;;      Totals:         0       0       1       0       0       0       0       0
  7693 ;;Total ram usage:        1 bytes
  7694 ;; Hardware stack levels used:    1
  7695 ;; Hardware stack levels required when called:    8
  7696 ;; This function calls:
  7697 ;;		___ftge
  7698 ;; This function is called by:
  7699 ;;		_main
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           
  7704                           ;psect for function _CheckDoorClosed
  7705  0F2A                     _CheckDoorClosed:	
  7706                           
  7707                           ;filter.c: 124: if((Angle_t<= 5)&&(Angle_t >= -5))
  7708                           
  7709                           ;incstack = 0
  7710                           ; Regs used in _CheckDoorClosed: [wreg+status,2+status,0+pclath+cstack]
  7711  0F2A  3000               	movlw	0
  7712  0F2B  0141               	movlb	1	; select bank1
  7713  0F2C  00C1               	movwf	___ftge@ff1^(0+128)
  7714  0F2D  30A0               	movlw	160
  7715  0F2E  00C2               	movwf	(___ftge@ff1+1)^(0+128)
  7716  0F2F  3040               	movlw	64
  7717  0F30  00C3               	movwf	(___ftge@ff1+2)^(0+128)
  7718  0F31  0140               	movlb	0	; select bank0
  7719  0F32  085F               	movf	_Angle_t,w
  7720  0F33  0141               	movlb	1	; select bank1
  7721  0F34  00C4               	movwf	___ftge@ff2^(0+128)
  7722  0F35  0140               	movlb	0	; select bank0
  7723  0F36  0860               	movf	_Angle_t+1,w
  7724  0F37  0141               	movlb	1	; select bank1
  7725  0F38  00C5               	movwf	(___ftge@ff2+1)^(0+128)
  7726  0F39  0140               	movlb	0	; select bank0
  7727  0F3A  0861               	movf	_Angle_t+2,w
  7728  0F3B  0141               	movlb	1	; select bank1
  7729  0F3C  00C6               	movwf	(___ftge@ff2+2)^(0+128)
  7730  0F3D  318E  2634  318F   	fcall	___ftge
  7731  0F40  1C03               	btfss	3,0
  7732  0F41  2F5F               	goto	l3241
  7733  0F42  0140               	movlb	0	; select bank0
  7734  0F43  085F               	movf	_Angle_t,w
  7735  0F44  0141               	movlb	1	; select bank1
  7736  0F45  00C1               	movwf	___ftge@ff1^(0+128)
  7737  0F46  0140               	movlb	0	; select bank0
  7738  0F47  0860               	movf	_Angle_t+1,w
  7739  0F48  0141               	movlb	1	; select bank1
  7740  0F49  00C2               	movwf	(___ftge@ff1+1)^(0+128)
  7741  0F4A  0140               	movlb	0	; select bank0
  7742  0F4B  0861               	movf	_Angle_t+2,w
  7743  0F4C  0141               	movlb	1	; select bank1
  7744  0F4D  00C3               	movwf	(___ftge@ff1+2)^(0+128)
  7745  0F4E  3000               	movlw	0
  7746  0F4F  00C4               	movwf	___ftge@ff2^(0+128)
  7747  0F50  30A0               	movlw	160
  7748  0F51  00C5               	movwf	(___ftge@ff2+1)^(0+128)
  7749  0F52  30C0               	movlw	192
  7750  0F53  00C6               	movwf	(___ftge@ff2+2)^(0+128)
  7751  0F54  318E  2634  318F   	fcall	___ftge
  7752  0F57  1C03               	btfss	3,0
  7753  0F58  2F5F               	goto	l3241
  7754                           
  7755                           ;filter.c: 125: {;filter.c: 126: gu8ClosedCnt++;
  7756  0F59  3001               	movlw	1
  7757  0F5A  0141               	movlb	1	; select bank1
  7758  0F5B  00CA               	movwf	??_CheckDoorClosed^(0+128)
  7759  0F5C  084A               	movf	??_CheckDoorClosed^(0+128),w
  7760  0F5D  07B3               	addwf	_gu8ClosedCnt^(0+128),f
  7761                           
  7762                           ;filter.c: 127: }
  7763  0F5E  2F62               	goto	l3243
  7764  0F5F                     l3241:	
  7765                           
  7766                           ;filter.c: 128: else;filter.c: 129: {;filter.c: 130: gu8ClosedCnt = 0;
  7767  0F5F  0141               	movlb	1	; select bank1
  7768  0F60  01B3               	clrf	_gu8ClosedCnt^(0+128)
  7769                           
  7770                           ;filter.c: 131: gu8DoorClosed = 0;
  7771  0F61  01B4               	clrf	_gu8DoorClosed^(0+128)
  7772  0F62                     l3243:	
  7773                           
  7774                           ;filter.c: 132: };filter.c: 133: if(gu8ClosedCnt >= 50)
  7775  0F62  3032               	movlw	50
  7776  0F63  0233               	subwf	_gu8ClosedCnt^(0+128),w
  7777  0F64  1C03               	skipc
  7778  0F65  2F69               	goto	l3249
  7779                           
  7780                           ;filter.c: 134: {;filter.c: 135: gu8ClosedCnt = 0;
  7781  0F66  01B3               	clrf	_gu8ClosedCnt^(0+128)
  7782                           
  7783                           ;filter.c: 136: gu8DoorClosed = 1;
  7784  0F67  01B4               	clrf	_gu8DoorClosed^(0+128)
  7785  0F68  0AB4               	incf	_gu8DoorClosed^(0+128),f
  7786  0F69                     l3249:	
  7787                           
  7788                           ;filter.c: 137: };filter.c: 138: return gu8DoorClosed;
  7789  0F69  0834               	movf	_gu8DoorClosed^(0+128),w
  7790  0F6A  0008               	return
  7791  0F6B                     __end_of_CheckDoorClosed:	
  7792                           
  7793                           	psect	text35
  7794  0E34                     __ptext35:	
  7795 ;; *************** function ___ftge *****************
  7796 ;; Defined at:
  7797 ;;		line 4 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;  ff1             3    0[BANK1 ] float 
  7800 ;;  ff2             3    3[BANK1 ] float 
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;		None
  7803 ;; Return value:  Size  Location     Type
  7804 ;;		None               void
  7805 ;; Registers used:
  7806 ;;		wreg, status,2, status,0
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7812 ;;      Params:         0       0       6       0       0       0       0       0
  7813 ;;      Locals:         0       0       0       0       0       0       0       0
  7814 ;;      Temps:          0       0       3       0       0       0       0       0
  7815 ;;      Totals:         0       0       9       0       0       0       0       0
  7816 ;;Total ram usage:        9 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    7
  7819 ;; This function calls:
  7820 ;;		Nothing
  7821 ;; This function is called by:
  7822 ;;		_CheckDoorOpened
  7823 ;;		_CheckDoorClosed
  7824 ;; This function uses a non-reentrant model
  7825 ;;
  7826                           
  7827                           
  7828                           ;psect for function ___ftge
  7829  0E34                     ___ftge:	
  7830                           
  7831                           ;incstack = 0
  7832                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7833  0E34  0141               	movlb	1	; select bank1
  7834  0E35  1FC3               	btfss	(___ftge@ff1+2)^(0+128),7
  7835  0E36  2E4B               	goto	l3047
  7836  0E37  0941               	comf	___ftge@ff1^(0+128),w
  7837  0E38  00C7               	movwf	??___ftge^(0+128)
  7838  0E39  0942               	comf	(___ftge@ff1+1)^(0+128),w
  7839  0E3A  00C8               	movwf	(??___ftge^(0+128)+1)
  7840  0E3B  0943               	comf	(___ftge@ff1+2)^(0+128),w
  7841  0E3C  00C9               	movwf	(??___ftge^(0+128)+2)
  7842  0E3D  0AC7               	incf	??___ftge^(0+128),f
  7843  0E3E  1903               	skipnz
  7844  0E3F  0AC8               	incf	(??___ftge^(0+128)+1),f
  7845  0E40  1903               	skipnz
  7846  0E41  0AC9               	incf	(??___ftge^(0+128)+2),f
  7847  0E42  3000               	movlw	0
  7848  0E43  0747               	addwf	??___ftge^(0+128),w
  7849  0E44  00C1               	movwf	___ftge@ff1^(0+128)
  7850  0E45  3000               	movlw	0
  7851  0E46  3D48               	addwfc	(??___ftge+1)^(0+128),w
  7852  0E47  00C2               	movwf	(___ftge@ff1+1)^(0+128)
  7853  0E48  3080               	movlw	128
  7854  0E49  3D49               	addwfc	(??___ftge+2)^(0+128),w
  7855  0E4A  00C3               	movwf	(___ftge@ff1+2)^(0+128)
  7856  0E4B                     l3047:	
  7857  0E4B  1FC6               	btfss	(___ftge@ff2+2)^(0+128),7
  7858  0E4C  2E61               	goto	l3051
  7859  0E4D  0944               	comf	___ftge@ff2^(0+128),w
  7860  0E4E  00C7               	movwf	??___ftge^(0+128)
  7861  0E4F  0945               	comf	(___ftge@ff2+1)^(0+128),w
  7862  0E50  00C8               	movwf	(??___ftge^(0+128)+1)
  7863  0E51  0946               	comf	(___ftge@ff2+2)^(0+128),w
  7864  0E52  00C9               	movwf	(??___ftge^(0+128)+2)
  7865  0E53  0AC7               	incf	??___ftge^(0+128),f
  7866  0E54  1903               	skipnz
  7867  0E55  0AC8               	incf	(??___ftge^(0+128)+1),f
  7868  0E56  1903               	skipnz
  7869  0E57  0AC9               	incf	(??___ftge^(0+128)+2),f
  7870  0E58  3000               	movlw	0
  7871  0E59  0747               	addwf	??___ftge^(0+128),w
  7872  0E5A  00C4               	movwf	___ftge@ff2^(0+128)
  7873  0E5B  3000               	movlw	0
  7874  0E5C  3D48               	addwfc	(??___ftge+1)^(0+128),w
  7875  0E5D  00C5               	movwf	(___ftge@ff2+1)^(0+128)
  7876  0E5E  3080               	movlw	128
  7877  0E5F  3D49               	addwfc	(??___ftge+2)^(0+128),w
  7878  0E60  00C6               	movwf	(___ftge@ff2+2)^(0+128)
  7879  0E61                     l3051:	
  7880  0E61  3080               	movlw	128
  7881  0E62  06C3               	xorwf	(___ftge@ff1+2)^(0+128),f
  7882  0E63  3080               	movlw	128
  7883  0E64  06C6               	xorwf	(___ftge@ff2+2)^(0+128),f
  7884  0E65  0846               	movf	(___ftge@ff2+2)^(0+128),w
  7885  0E66  0243               	subwf	(___ftge@ff1+2)^(0+128),w
  7886  0E67  1D03               	skipz
  7887  0E68  0008               	return
  7888  0E69  0845               	movf	(___ftge@ff2+1)^(0+128),w
  7889  0E6A  0242               	subwf	(___ftge@ff1+1)^(0+128),w
  7890  0E6B  1D03               	skipz
  7891  0E6C  0008               	return
  7892  0E6D  0844               	movf	___ftge@ff2^(0+128),w
  7893  0E6E  0241               	subwf	___ftge@ff1^(0+128),w
  7894  0E6F  0008               	return
  7895  0E70                     __end_of___ftge:	
  7896                           
  7897                           	psect	intentry
  7898  0004                     __pintentry:	
  7899 ;; *************** function _INTERRUPT_InterruptManager *****************
  7900 ;; Defined at:
  7901 ;;		line 58 in file "src/interrupt_manager.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;		None
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;		None
  7906 ;; Return value:  Size  Location     Type
  7907 ;;                  1    wreg      void 
  7908 ;; Registers used:
  7909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7915 ;;      Params:         0       0       0       0       0       0       0       0
  7916 ;;      Locals:         0       0       0       0       0       0       0       0
  7917 ;;      Temps:          0       0       0       0       0       0       0       0
  7918 ;;      Totals:         0       0       0       0       0       0       0       0
  7919 ;;Total ram usage:        0 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; Hardware stack levels required when called:    6
  7922 ;; This function calls:
  7923 ;;		_EUSART_Receive_ISR
  7924 ;;		_EUSART_Transmit_ISR
  7925 ;;		_TMR0_ISR
  7926 ;;		i1_TMR0_StartTimer
  7927 ;; This function is called by:
  7928 ;;		Interrupt level 1
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932  0004                     _INTERRUPT_InterruptManager:	
  7933                           
  7934                           ;incstack = 0
  7935  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7936                           
  7937                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7938  0005  3180               	pagesel	$
  7939                           
  7940                           ;interrupt_manager.c: 61: if(PIE3bits.TX1IE == 1 && PIR3bits.TX1IF == 1)
  7941  0006  014E               	movlb	14	; select bank14
  7942  0007  1A19               	btfsc	25,4	;volatile
  7943  0008  1E0F               	btfss	15,4	;volatile
  7944  0009  280D               	goto	i1l3265
  7945                           
  7946                           ;interrupt_manager.c: 62: {;interrupt_manager.c: 63: EUSART_Transmit_ISR();
  7947  000A  318B  23A3  3180   	fcall	_EUSART_Transmit_ISR
  7948  000D                     i1l3265:	
  7949                           
  7950                           ;interrupt_manager.c: 64: };interrupt_manager.c: 65: if(PIE3bits.RC1IE == 1 && PIR3bits.
      +                          RC1IF == 1)
  7951  000D  014E               	movlb	14	; select bank14
  7952  000E  1A99               	btfsc	25,5	;volatile
  7953  000F  1E8F               	btfss	15,5	;volatile
  7954  0010  281B               	goto	i1l3277
  7955                           
  7956                           ;interrupt_manager.c: 66: {;interrupt_manager.c: 67: gu8OperationState |= 0x10;
  7957  0011  0140               	movlb	0	; select bank0
  7958  0012  1669               	bsf	_gu8OperationState,4
  7959                           
  7960                           ;interrupt_manager.c: 68: gu8UartTicnt = 0;
  7961  0013  0141               	movlb	1	; select bank1
  7962  0014  01B6               	clrf	_gu8UartTicnt^(0+128)
  7963                           
  7964                           ;interrupt_manager.c: 69: EUSART_Receive_ISR();
  7965  0015  318C  2460  3180   	fcall	_EUSART_Receive_ISR
  7966                           
  7967                           ;interrupt_manager.c: 70: TMR0_StartTimer();
  7968  0018  318A  2278  3180   	fcall	i1_TMR0_StartTimer
  7969  001B                     i1l3277:	
  7970                           
  7971                           ;interrupt_manager.c: 71: };interrupt_manager.c: 72: if(PIE0bits.TMR0IE == 1 && PIR0bits
      +                          .TMR0IF == 1)
  7972  001B  014E               	movlb	14	; select bank14
  7973  001C  1A96               	btfsc	22,5	;volatile
  7974  001D  1E8C               	btfss	12,5	;volatile
  7975  001E  2822               	goto	i1l3283
  7976                           
  7977                           ;interrupt_manager.c: 73: {;interrupt_manager.c: 74: TMR0_ISR();
  7978  001F  318B  23DE  3180   	fcall	_TMR0_ISR
  7979  0022                     i1l3283:	
  7980                           
  7981                           ;interrupt_manager.c: 75: };interrupt_manager.c: 76: if(IOCBFbits.IOCBF1)
  7982  0022  017E               	movlb	62	; select bank62
  7983  0023  1CCA               	btfss	74,1	;volatile
  7984  0024  2829               	goto	i1l259
  7985                           
  7986                           ;interrupt_manager.c: 77: {;interrupt_manager.c: 78: gu8OperationState |= 0x02;
  7987  0025  0140               	movlb	0	; select bank0
  7988  0026  14E9               	bsf	_gu8OperationState,1
  7989                           
  7990                           ;interrupt_manager.c: 79: IOCBFbits.IOCBF1 = 0;
  7991  0027  017E               	movlb	62	; select bank62
  7992  0028  10CA               	bcf	74,1	;volatile
  7993  0029                     i1l259:	
  7994                           
  7995                           ;interrupt_manager.c: 80: };interrupt_manager.c: 81: if(IOCBFbits.IOCBF2)
  7996  0029  1D4A               	btfss	74,2	;volatile
  7997  002A  282F               	goto	i1l260
  7998                           
  7999                           ;interrupt_manager.c: 82: {;interrupt_manager.c: 83: gu8OperationState |= 0x01;
  8000  002B  0140               	movlb	0	; select bank0
  8001  002C  1469               	bsf	_gu8OperationState,0
  8002                           
  8003                           ;interrupt_manager.c: 84: IOCBFbits.IOCBF2 = 0;
  8004  002D  017E               	movlb	62	; select bank62
  8005  002E  114A               	bcf	74,2	;volatile
  8006  002F                     i1l260:	
  8007                           
  8008                           ;interrupt_manager.c: 85: };interrupt_manager.c: 86: if(IOCBFbits.IOCBF5)
  8009  002F  1ECA               	btfss	74,5	;volatile
  8010  0030  283B               	goto	i1l3297
  8011                           
  8012                           ;interrupt_manager.c: 87: {;interrupt_manager.c: 88: gu8OperationState |= 0x04;
  8013  0031  0140               	movlb	0	; select bank0
  8014  0032  1569               	bsf	_gu8OperationState,2
  8015                           
  8016                           ;interrupt_manager.c: 89: gu16RstTimCnt = 0;
  8017  0033  0141               	movlb	1	; select bank1
  8018  0034  01B1               	clrf	_gu16RstTimCnt^(0+128)
  8019  0035  01B2               	clrf	(_gu16RstTimCnt+1)^(0+128)
  8020                           
  8021                           ;interrupt_manager.c: 90: TMR0_StartTimer();
  8022  0036  318A  2278  3180   	fcall	i1_TMR0_StartTimer
  8023                           
  8024                           ;interrupt_manager.c: 91: IOCBFbits.IOCBF5 = 0;
  8025  0039  017E               	movlb	62	; select bank62
  8026  003A  12CA               	bcf	74,5	;volatile
  8027  003B                     i1l3297:	
  8028                           
  8029                           ;interrupt_manager.c: 92: };interrupt_manager.c: 93: if(IOCCFbits.IOCCF0)
  8030  003B  1C55               	btfss	85,0	;volatile
  8031  003C  2841               	goto	i1l263
  8032                           
  8033                           ;interrupt_manager.c: 94: {;interrupt_manager.c: 95: gu8OperationState |= 0x08;
  8034  003D  0140               	movlb	0	; select bank0
  8035  003E  15E9               	bsf	_gu8OperationState,3
  8036                           
  8037                           ;interrupt_manager.c: 96: IOCCFbits.IOCCF0 = 0;
  8038  003F  017E               	movlb	62	; select bank62
  8039  0040  1055               	bcf	85,0	;volatile
  8040  0041                     i1l263:	
  8041  0041  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8042  0042  0009               	retfie
  8043  0043                     __end_of_INTERRUPT_InterruptManager:	
  8044                           
  8045                           	psect	text37
  8046  0A78                     __ptext37:	
  8047 ;; *************** function i1_TMR0_StartTimer *****************
  8048 ;; Defined at:
  8049 ;;		line 94 in file "src/tmr0.c"
  8050 ;; Parameters:    Size  Location     Type
  8051 ;;		None
  8052 ;; Auto vars:     Size  Location     Type
  8053 ;;		None
  8054 ;; Return value:  Size  Location     Type
  8055 ;;                  1    wreg      void 
  8056 ;; Registers used:
  8057 ;;		None
  8058 ;; Tracked objects:
  8059 ;;		On entry : 0/0
  8060 ;;		On exit  : 0/0
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8063 ;;      Params:         0       0       0       0       0       0       0       0
  8064 ;;      Locals:         0       0       0       0       0       0       0       0
  8065 ;;      Temps:          0       0       0       0       0       0       0       0
  8066 ;;      Totals:         0       0       0       0       0       0       0       0
  8067 ;;Total ram usage:        0 bytes
  8068 ;; Hardware stack levels used:    1
  8069 ;; This function calls:
  8070 ;;		Nothing
  8071 ;; This function is called by:
  8072 ;;		_INTERRUPT_InterruptManager
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           
  8077                           ;psect for function i1_TMR0_StartTimer
  8078  0A78                     i1_TMR0_StartTimer:	
  8079                           
  8080                           ;tmr0.c: 97: if(T0CON0bits.T0EN == 0)
  8081                           
  8082                           ;incstack = 0
  8083                           ; Regs used in i1_TMR0_StartTimer: []
  8084  0A78  014B               	movlb	11	; select bank11
  8085  0A79  1B9E               	btfsc	30,7	;volatile
  8086  0A7A  0008               	return
  8087                           
  8088                           ;tmr0.c: 98: {;tmr0.c: 99: T0CON0bits.T0EN = 1;
  8089  0A7B  179E               	bsf	30,7	;volatile
  8090  0A7C  0008               	return
  8091  0A7D                     __end_ofi1_TMR0_StartTimer:	
  8092                           
  8093                           	psect	text38
  8094  0BDE                     __ptext38:	
  8095 ;; *************** function _TMR0_ISR *****************
  8096 ;; Defined at:
  8097 ;;		line 131 in file "src/tmr0.c"
  8098 ;; Parameters:    Size  Location     Type
  8099 ;;		None
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;		None
  8102 ;; Return value:  Size  Location     Type
  8103 ;;                  1    wreg      void 
  8104 ;; Registers used:
  8105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8106 ;; Tracked objects:
  8107 ;;		On entry : 0/0
  8108 ;;		On exit  : 0/0
  8109 ;;		Unchanged: 0/0
  8110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8111 ;;      Params:         0       0       0       0       0       0       0       0
  8112 ;;      Locals:         0       0       0       0       0       0       0       0
  8113 ;;      Temps:          0       1       0       0       0       0       0       0
  8114 ;;      Totals:         0       1       0       0       0       0       0       0
  8115 ;;Total ram usage:        1 bytes
  8116 ;; Hardware stack levels used:    1
  8117 ;; Hardware stack levels required when called:    5
  8118 ;; This function calls:
  8119 ;;		_TMR0_Task
  8120 ;; This function is called by:
  8121 ;;		_INTERRUPT_InterruptManager
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           
  8126                           ;psect for function _TMR0_ISR
  8127  0BDE                     _TMR0_ISR:	
  8128                           
  8129                           ;tmr0.c: 134: PIR0bits.TMR0IF = 0;
  8130                           
  8131                           ;incstack = 0
  8132                           ; Regs used in _TMR0_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8133  0BDE  014E               	movlb	14	; select bank14
  8134  0BDF  128C               	bcf	12,5	;volatile
  8135                           
  8136                           ;tmr0.c: 136: if(gu8OperationState&0x04)
  8137  0BE0  0140               	movlb	0	; select bank0
  8138  0BE1  1D69               	btfss	_gu8OperationState,2
  8139  0BE2  2BE8               	goto	i1l3213
  8140                           
  8141                           ;tmr0.c: 137: {;tmr0.c: 138: gu16RstTimCnt++;
  8142  0BE3  3001               	movlw	1
  8143  0BE4  0141               	movlb	1	; select bank1
  8144  0BE5  07B1               	addwf	_gu16RstTimCnt^(0+128),f
  8145  0BE6  3000               	movlw	0
  8146  0BE7  3DB2               	addwfc	(_gu16RstTimCnt+1)^(0+128),f
  8147  0BE8                     i1l3213:	
  8148                           
  8149                           ;tmr0.c: 139: };tmr0.c: 141: if(gu8DoorState == 0)
  8150  0BE8  0140               	movlb	0	; select bank0
  8151  0BE9  086F               	movf	_gu8DoorState,w
  8152  0BEA  1D03               	btfss	3,2
  8153  0BEB  2BF4               	goto	i1l3219
  8154                           
  8155                           ;tmr0.c: 142: {;tmr0.c: 143: gu16OpenTimCnt++;
  8156  0BEC  3001               	movlw	1
  8157  0BED  0141               	movlb	1	; select bank1
  8158  0BEE  07AB               	addwf	_gu16OpenTimCnt^(0+128),f
  8159  0BEF  3000               	movlw	0
  8160  0BF0  3DAC               	addwfc	(_gu16OpenTimCnt+1)^(0+128),f
  8161                           
  8162                           ;tmr0.c: 144: TMR0_Task();
  8163  0BF1  3184  2481  318B   	fcall	_TMR0_Task
  8164  0BF4                     i1l3219:	
  8165                           
  8166                           ;tmr0.c: 145: };tmr0.c: 146: if(gu8OperationState&0x10)
  8167  0BF4  0140               	movlb	0	; select bank0
  8168  0BF5  1E69               	btfss	_gu8OperationState,4
  8169  0BF6  0008               	return
  8170                           
  8171                           ;tmr0.c: 147: {;tmr0.c: 148: gu8UartTicnt++;
  8172  0BF7  3001               	movlw	1
  8173  0BF8  00D6               	movwf	??_TMR0_ISR
  8174  0BF9  0856               	movf	??_TMR0_ISR,w
  8175  0BFA  0141               	movlb	1	; select bank1
  8176  0BFB  07B6               	addwf	_gu8UartTicnt^(0+128),f
  8177  0BFC  0008               	return
  8178  0BFD                     __end_of_TMR0_ISR:	
  8179                           
  8180                           	psect	text39
  8181  0481                     __ptext39:	
  8182 ;; *************** function _TMR0_Task *****************
  8183 ;; Defined at:
  8184 ;;		line 158 in file "src/tmr0.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;		None
  8187 ;; Auto vars:     Size  Location     Type
  8188 ;;		None
  8189 ;; Return value:  Size  Location     Type
  8190 ;;                  1    wreg      void 
  8191 ;; Registers used:
  8192 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8198 ;;      Params:         0       0       0       0       0       0       0       0
  8199 ;;      Locals:         0       0       0       0       0       0       0       0
  8200 ;;      Temps:          0       5       0       0       0       0       0       0
  8201 ;;      Totals:         0       5       0       0       0       0       0       0
  8202 ;;Total ram usage:        5 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; Hardware stack levels required when called:    4
  8205 ;; This function calls:
  8206 ;;		_AngleCalcu
  8207 ;;		_Mpu6500GyroAngle
  8208 ;;		___fttol
  8209 ;;		i1_EUSART_Write
  8210 ;; This function is called by:
  8211 ;;		_TMR0_ISR
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           
  8216                           ;psect for function _TMR0_Task
  8217  0481                     _TMR0_Task:	
  8218                           
  8219                           ;tmr0.c: 161: result_gyro = Mpu6500GyroAngle(0x45);
  8220                           
  8221                           ;incstack = 0
  8222                           ; Regs used in _TMR0_Task: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8223  0481  3045               	movlw	69
  8224  0482  3182  2247  3184   	fcall	_Mpu6500GyroAngle
  8225  0485  0140               	movlb	0	; select bank0
  8226  0486  0847               	movf	?_Mpu6500GyroAngle,w
  8227  0487  0141               	movlb	1	; select bank1
  8228  0488  00A8               	movwf	_result_gyro^(0+128)
  8229  0489  0140               	movlb	0	; select bank0
  8230  048A  0848               	movf	?_Mpu6500GyroAngle+1,w
  8231  048B  0141               	movlb	1	; select bank1
  8232  048C  00A9               	movwf	(_result_gyro+1)^(0+128)
  8233  048D  0140               	movlb	0	; select bank0
  8234  048E  0849               	movf	?_Mpu6500GyroAngle+2,w
  8235  048F  0141               	movlb	1	; select bank1
  8236  0490  00AA               	movwf	(_result_gyro+2)^(0+128)
  8237                           
  8238                           ;tmr0.c: 162: AngleCalcu(0,result_gyro,filter_result);
  8239  0491  3000               	movlw	0
  8240  0492  0140               	movlb	0	; select bank0
  8241  0493  00B7               	movwf	AngleCalcu@angle_m
  8242  0494  3000               	movlw	0
  8243  0495  00B8               	movwf	AngleCalcu@angle_m+1
  8244  0496  3000               	movlw	0
  8245  0497  00B9               	movwf	AngleCalcu@angle_m+2
  8246  0498  0141               	movlb	1	; select bank1
  8247  0499  0828               	movf	_result_gyro^(0+128),w
  8248  049A  0140               	movlb	0	; select bank0
  8249  049B  00BA               	movwf	AngleCalcu@gyro_m
  8250  049C  0141               	movlb	1	; select bank1
  8251  049D  0829               	movf	(_result_gyro+1)^(0+128),w
  8252  049E  0140               	movlb	0	; select bank0
  8253  049F  00BB               	movwf	AngleCalcu@gyro_m+1
  8254  04A0  0141               	movlb	1	; select bank1
  8255  04A1  082A               	movf	(_result_gyro+2)^(0+128),w
  8256  04A2  0140               	movlb	0	; select bank0
  8257  04A3  00BC               	movwf	AngleCalcu@gyro_m+2
  8258  04A4  30BB               	movlw	(low (_filter_result| 0))& (0+255)
  8259  04A5  00D1               	movwf	??_TMR0_Task
  8260  04A6  0851               	movf	??_TMR0_Task,w
  8261  04A7  00BD               	movwf	AngleCalcu@p
  8262  04A8  3187  2751  3184   	fcall	_AngleCalcu
  8263                           
  8264                           ;tmr0.c: 163: sum = filter_result[0];
  8265  04AB  0141               	movlb	1	; select bank1
  8266  04AC  083B               	movf	_filter_result^(0+128),w
  8267  04AD  00F0               	movwf	___fttol@f1
  8268  04AE  083C               	movf	(_filter_result+1)^(0+128),w
  8269  04AF  00F1               	movwf	___fttol@f1+1
  8270  04B0  083D               	movf	(_filter_result+2)^(0+128),w
  8271  04B1  00F2               	movwf	___fttol@f1+2
  8272  04B2  3185  2510  3184   	fcall	___fttol
  8273  04B5  0873               	movf	?___fttol+3,w
  8274  04B6  0140               	movlb	0	; select bank0
  8275  04B7  00DE               	movwf	_sum+3
  8276  04B8  0872               	movf	?___fttol+2,w
  8277  04B9  00DD               	movwf	_sum+2
  8278  04BA  0871               	movf	?___fttol+1,w
  8279  04BB  00DC               	movwf	_sum+1
  8280  04BC  0870               	movf	?___fttol,w
  8281  04BD  00DB               	movwf	_sum
  8282                           
  8283                           ;tmr0.c: 164: sum_ = filter_result[1];
  8284  04BE  3003               	movlw	3
  8285  04BF  3EBB               	addlw	(low (_filter_result| 0))& (0+255)
  8286  04C0  0086               	movwf	6
  8287  04C1  0187               	clrf	7
  8288  04C2  3F40               	moviw [0]fsr1
  8289  04C3  00F0               	movwf	___fttol@f1
  8290  04C4  3F41               	moviw [1]fsr1
  8291  04C5  00F1               	movwf	___fttol@f1+1
  8292  04C6  3F42               	moviw [2]fsr1
  8293  04C7  00F2               	movwf	___fttol@f1+2
  8294  04C8  3185  2510  3184   	fcall	___fttol
  8295  04CB  0873               	movf	?___fttol+3,w
  8296  04CC  0140               	movlb	0	; select bank0
  8297  04CD  00DA               	movwf	_sum_+3
  8298  04CE  0872               	movf	?___fttol+2,w
  8299  04CF  00D9               	movwf	_sum_+2
  8300  04D0  0871               	movf	?___fttol+1,w
  8301  04D1  00D8               	movwf	_sum_+1
  8302  04D2  0870               	movf	?___fttol,w
  8303  04D3  00D7               	movwf	_sum_
  8304                           
  8305                           ;tmr0.c: 165: EUSART_Write(0x55);
  8306  04D4  3055               	movlw	85
  8307  04D5  318C  2484  3184   	fcall	i1_EUSART_Write
  8308                           
  8309                           ;tmr0.c: 166: EUSART_Write(sum>>8);
  8310  04D8  0140               	movlb	0	; select bank0
  8311  04D9  085B               	movf	_sum,w
  8312  04DA  00D1               	movwf	??_TMR0_Task
  8313  04DB  085C               	movf	_sum+1,w
  8314  04DC  00D2               	movwf	??_TMR0_Task+1
  8315  04DD  085D               	movf	_sum+2,w
  8316  04DE  00D3               	movwf	??_TMR0_Task+2
  8317  04DF  085E               	movf	_sum+3,w
  8318  04E0  00D4               	movwf	??_TMR0_Task+3
  8319  04E1  3008               	movlw	8
  8320  04E2  00D5               	movwf	??_TMR0_Task+4
  8321  04E3                     u300_25:	
  8322  04E3  37D4               	asrf	??_TMR0_Task+3,f
  8323  04E4  0CD3               	rrf	??_TMR0_Task+2,f
  8324  04E5  0CD2               	rrf	??_TMR0_Task+1,f
  8325  04E6  0CD1               	rrf	??_TMR0_Task,f
  8326  04E7  0BD5               	decfsz	??_TMR0_Task+4,f
  8327  04E8  2CE3               	goto	u300_25
  8328  04E9  0851               	movf	??_TMR0_Task,w
  8329  04EA  318C  2484  3184   	fcall	i1_EUSART_Write
  8330                           
  8331                           ;tmr0.c: 167: EUSART_Write(sum);
  8332  04ED  0140               	movlb	0	; select bank0
  8333  04EE  085B               	movf	_sum,w
  8334  04EF  318C  2484  3184   	fcall	i1_EUSART_Write
  8335                           
  8336                           ;tmr0.c: 168: EUSART_Write(sum_>>8);
  8337  04F2  0140               	movlb	0	; select bank0
  8338  04F3  0857               	movf	_sum_,w
  8339  04F4  00D1               	movwf	??_TMR0_Task
  8340  04F5  0858               	movf	_sum_+1,w
  8341  04F6  00D2               	movwf	??_TMR0_Task+1
  8342  04F7  0859               	movf	_sum_+2,w
  8343  04F8  00D3               	movwf	??_TMR0_Task+2
  8344  04F9  085A               	movf	_sum_+3,w
  8345  04FA  00D4               	movwf	??_TMR0_Task+3
  8346  04FB  3008               	movlw	8
  8347  04FC  00D5               	movwf	??_TMR0_Task+4
  8348  04FD                     u301_25:	
  8349  04FD  37D4               	asrf	??_TMR0_Task+3,f
  8350  04FE  0CD3               	rrf	??_TMR0_Task+2,f
  8351  04FF  0CD2               	rrf	??_TMR0_Task+1,f
  8352  0500  0CD1               	rrf	??_TMR0_Task,f
  8353  0501  0BD5               	decfsz	??_TMR0_Task+4,f
  8354  0502  2CFD               	goto	u301_25
  8355  0503  0851               	movf	??_TMR0_Task,w
  8356  0504  318C  2484  3184   	fcall	i1_EUSART_Write
  8357                           
  8358                           ;tmr0.c: 169: EUSART_Write(sum_);
  8359  0507  0140               	movlb	0	; select bank0
  8360  0508  0857               	movf	_sum_,w
  8361  0509  318C  2484  3184   	fcall	i1_EUSART_Write
  8362                           
  8363                           ;tmr0.c: 170: EUSART_Write(0xAA);
  8364  050C  30AA               	movlw	170
  8365  050D  318C  2484         	fcall	i1_EUSART_Write
  8366  050F  0008               	return
  8367  0510                     __end_of_TMR0_Task:	
  8368                           
  8369                           	psect	text40
  8370  0510                     __ptext40:	
  8371 ;; *************** function ___fttol *****************
  8372 ;; Defined at:
  8373 ;;		line 44 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;  f1              3    0[COMMON] float 
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;  lval            4    9[COMMON] unsigned long 
  8378 ;;  exp1            1   13[COMMON] unsigned char 
  8379 ;;  sign1           1    8[COMMON] unsigned char 
  8380 ;; Return value:  Size  Location     Type
  8381 ;;                  4    0[COMMON] long 
  8382 ;; Registers used:
  8383 ;;		wreg, status,2, status,0
  8384 ;; Tracked objects:
  8385 ;;		On entry : 0/0
  8386 ;;		On exit  : 0/0
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8389 ;;      Params:         4       0       0       0       0       0       0       0
  8390 ;;      Locals:         6       0       0       0       0       0       0       0
  8391 ;;      Temps:          4       0       0       0       0       0       0       0
  8392 ;;      Totals:        14       0       0       0       0       0       0       0
  8393 ;;Total ram usage:       14 bytes
  8394 ;; Hardware stack levels used:    1
  8395 ;; This function calls:
  8396 ;;		Nothing
  8397 ;; This function is called by:
  8398 ;;		_TMR0_Task
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           
  8403                           ;psect for function ___fttol
  8404  0510                     ___fttol:	
  8405                           
  8406                           ;incstack = 0
  8407                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8408  0510  0870               	movf	___fttol@f1,w
  8409  0511  00F4               	movwf	??___fttol
  8410  0512  0871               	movf	___fttol@f1+1,w
  8411  0513  00F5               	movwf	??___fttol+1
  8412  0514  0872               	movf	___fttol@f1+2,w
  8413  0515  00F6               	movwf	??___fttol+2
  8414  0516  1003               	clrc
  8415  0517  0D75               	rlf	??___fttol+1,w
  8416  0518  0D76               	rlf	??___fttol+2,w
  8417  0519  00F7               	movwf	??___fttol+3
  8418  051A  0877               	movf	??___fttol+3,w
  8419  051B  00FD               	movwf	___fttol@exp1
  8420  051C  087D               	movf	___fttol@exp1,w
  8421  051D  1D03               	btfss	3,2
  8422  051E  2D28               	goto	i1l2865
  8423  051F  3000               	movlw	0
  8424  0520  00F3               	movwf	?___fttol+3
  8425  0521  3000               	movlw	0
  8426  0522  00F2               	movwf	?___fttol+2
  8427  0523  3000               	movlw	0
  8428  0524  00F1               	movwf	?___fttol+1
  8429  0525  3000               	movlw	0
  8430  0526  00F0               	movwf	?___fttol
  8431  0527  0008               	return
  8432  0528                     i1l2865:	
  8433  0528  0870               	movf	___fttol@f1,w
  8434  0529  00F4               	movwf	??___fttol
  8435  052A  0871               	movf	___fttol@f1+1,w
  8436  052B  00F5               	movwf	??___fttol+1
  8437  052C  0872               	movf	___fttol@f1+2,w
  8438  052D  00F6               	movwf	??___fttol+2
  8439  052E  3017               	movlw	23
  8440  052F                     u288_25:	
  8441  052F  36F6               	lsrf	??___fttol+2,f
  8442  0530  0CF5               	rrf	??___fttol+1,f
  8443  0531  0CF4               	rrf	??___fttol,f
  8444  0532  0B89               	decfsz	9,f
  8445  0533  2D2F               	goto	u288_25
  8446  0534  0874               	movf	??___fttol,w
  8447  0535  00F7               	movwf	??___fttol+3
  8448  0536  0877               	movf	??___fttol+3,w
  8449  0537  00F8               	movwf	___fttol@sign1
  8450  0538  17F1               	bsf	___fttol@f1+1,7
  8451  0539  30FF               	movlw	255
  8452  053A  05F0               	andwf	___fttol@f1,f
  8453  053B  30FF               	movlw	255
  8454  053C  05F1               	andwf	___fttol@f1+1,f
  8455  053D  3000               	movlw	0
  8456  053E  05F2               	andwf	___fttol@f1+2,f
  8457  053F  0870               	movf	___fttol@f1,w
  8458  0540  00F9               	movwf	___fttol@lval
  8459  0541  0871               	movf	___fttol@f1+1,w
  8460  0542  00FA               	movwf	___fttol@lval+1
  8461  0543  0872               	movf	___fttol@f1+2,w
  8462  0544  00FB               	movwf	___fttol@lval+2
  8463  0545  01FC               	clrf	___fttol@lval+3
  8464  0546  308E               	movlw	142
  8465  0547  02FD               	subwf	___fttol@exp1,f
  8466  0548  1FFD               	btfss	___fttol@exp1,7
  8467  0549  2D66               	goto	i1l2885
  8468  054A  087D               	movf	___fttol@exp1,w
  8469  054B  3A80               	xorlw	128
  8470  054C  3E8F               	addlw	143
  8471  054D  1803               	skipnc
  8472  054E  2D58               	goto	i1l2883
  8473  054F  3000               	movlw	0
  8474  0550  00F3               	movwf	?___fttol+3
  8475  0551  3000               	movlw	0
  8476  0552  00F2               	movwf	?___fttol+2
  8477  0553  3000               	movlw	0
  8478  0554  00F1               	movwf	?___fttol+1
  8479  0555  3000               	movlw	0
  8480  0556  00F0               	movwf	?___fttol
  8481  0557  0008               	return
  8482  0558                     i1l2883:	
  8483  0558  3001               	movlw	1
  8484  0559                     u291_25:	
  8485  0559  36FC               	lsrf	___fttol@lval+3,f
  8486  055A  0CFB               	rrf	___fttol@lval+2,f
  8487  055B  0CFA               	rrf	___fttol@lval+1,f
  8488  055C  0CF9               	rrf	___fttol@lval,f
  8489  055D  0B89               	decfsz	9,f
  8490  055E  2D59               	goto	u291_25
  8491  055F  3001               	movlw	1
  8492  0560  00F4               	movwf	??___fttol
  8493  0561  0874               	movf	??___fttol,w
  8494  0562  07FD               	addwf	___fttol@exp1,f
  8495  0563  1903               	btfsc	3,2
  8496  0564  2D7F               	goto	i1l2893
  8497  0565  2D58               	goto	i1l2883
  8498  0566                     i1l2885:	
  8499  0566  3018               	movlw	24
  8500  0567  027D               	subwf	___fttol@exp1,w
  8501  0568  1C03               	skipc
  8502  0569  2D7C               	goto	i1l851
  8503  056A  3000               	movlw	0
  8504  056B  00F3               	movwf	?___fttol+3
  8505  056C  3000               	movlw	0
  8506  056D  00F2               	movwf	?___fttol+2
  8507  056E  3000               	movlw	0
  8508  056F  00F1               	movwf	?___fttol+1
  8509  0570  3000               	movlw	0
  8510  0571  00F0               	movwf	?___fttol
  8511  0572  0008               	return
  8512  0573                     i1l2891:	
  8513  0573  3001               	movlw	1
  8514  0574                     u294_25:	
  8515  0574  35F9               	lslf	___fttol@lval,f
  8516  0575  0DFA               	rlf	___fttol@lval+1,f
  8517  0576  0DFB               	rlf	___fttol@lval+2,f
  8518  0577  0DFC               	rlf	___fttol@lval+3,f
  8519  0578  0B89               	decfsz	9,f
  8520  0579  2D74               	goto	u294_25
  8521  057A  3001               	movlw	1
  8522  057B  02FD               	subwf	___fttol@exp1,f
  8523  057C                     i1l851:	
  8524  057C  087D               	movf	___fttol@exp1,w
  8525  057D  1D03               	btfss	3,2
  8526  057E  2D73               	goto	i1l2891
  8527  057F                     i1l2893:	
  8528  057F  0878               	movf	___fttol@sign1,w
  8529  0580  1903               	btfsc	3,2
  8530  0581  2D8D               	goto	i1l2897
  8531  0582  09F9               	comf	___fttol@lval,f
  8532  0583  09FA               	comf	___fttol@lval+1,f
  8533  0584  09FB               	comf	___fttol@lval+2,f
  8534  0585  09FC               	comf	___fttol@lval+3,f
  8535  0586  0AF9               	incf	___fttol@lval,f
  8536  0587  1903               	skipnz
  8537  0588  0AFA               	incf	___fttol@lval+1,f
  8538  0589  1903               	skipnz
  8539  058A  0AFB               	incf	___fttol@lval+2,f
  8540  058B  1903               	skipnz
  8541  058C  0AFC               	incf	___fttol@lval+3,f
  8542  058D                     i1l2897:	
  8543  058D  087C               	movf	___fttol@lval+3,w
  8544  058E  00F3               	movwf	?___fttol+3
  8545  058F  087B               	movf	___fttol@lval+2,w
  8546  0590  00F2               	movwf	?___fttol+2
  8547  0591  087A               	movf	___fttol@lval+1,w
  8548  0592  00F1               	movwf	?___fttol+1
  8549  0593  0879               	movf	___fttol@lval,w
  8550  0594  00F0               	movwf	?___fttol
  8551  0595  0008               	return
  8552  0596                     __end_of___fttol:	
  8553                           
  8554                           	psect	text41
  8555  0247                     __ptext41:	
  8556 ;; *************** function _Mpu6500GyroAngle *****************
  8557 ;; Defined at:
  8558 ;;		line 233 in file "src/mpu_iic.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;  dir             1    wreg     char 
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;  dir             1   45[BANK0 ] char 
  8563 ;;  gyro_angle      3   46[BANK0 ] float 
  8564 ;;  gyro_config     1    0        unsigned char 
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  3   39[BANK0 ] float 
  8567 ;; Registers used:
  8568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8574 ;;      Params:         0       3       0       0       0       0       0       0
  8575 ;;      Locals:         0       4       0       0       0       0       0       0
  8576 ;;      Temps:          0       3       0       0       0       0       0       0
  8577 ;;      Totals:         0      10       0       0       0       0       0       0
  8578 ;;Total ram usage:       10 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    3
  8581 ;; This function calls:
  8582 ;;		___awtoft
  8583 ;;		___ftadd
  8584 ;;		___ftdiv
  8585 ;;		___ftneg
  8586 ;;		_abs
  8587 ;;		i1_EUSART_Write
  8588 ;;		i1_Get6500Data
  8589 ;; This function is called by:
  8590 ;;		_TMR0_Task
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           
  8595                           ;psect for function _Mpu6500GyroAngle
  8596  0247                     _Mpu6500GyroAngle:	
  8597                           
  8598                           ;incstack = 0
  8599                           ; Regs used in _Mpu6500GyroAngle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8600                           ;Mpu6500GyroAngle@dir stored from wreg
  8601  0247  0140               	movlb	0	; select bank0
  8602  0248  00CD               	movwf	Mpu6500GyroAngle@dir
  8603                           
  8604                           ;mpu_iic.c: 235: float gyro_angle;;mpu_iic.c: 236: uint8_t gyro_config;;mpu_iic.c: 238: 
      +                          New_gyro = Get6500Data(dir);
  8605  0249  084D               	movf	Mpu6500GyroAngle@dir,w
  8606  024A  318C  241D  3182   	fcall	i1_Get6500Data
  8607  024D  0879               	movf	?i1_Get6500Data+1,w
  8608  024E  0140               	movlb	0	; select bank0
  8609  024F  00E7               	movwf	_New_gyro+1
  8610  0250  0878               	movf	?i1_Get6500Data,w
  8611  0251  00E6               	movwf	_New_gyro
  8612                           
  8613                           ;mpu_iic.c: 240: EUSART_Write(0x55);
  8614  0252  3055               	movlw	85
  8615  0253  318C  2484  3182   	fcall	i1_EUSART_Write
  8616                           
  8617                           ;mpu_iic.c: 241: EUSART_Write(New_gyro >>8);
  8618  0256  0140               	movlb	0	; select bank0
  8619  0257  0867               	movf	_New_gyro+1,w
  8620  0258  318C  2484  3182   	fcall	i1_EUSART_Write
  8621                           
  8622                           ;mpu_iic.c: 242: EUSART_Write(New_gyro);
  8623  025B  0140               	movlb	0	; select bank0
  8624  025C  0866               	movf	_New_gyro,w
  8625  025D  318C  2484  3182   	fcall	i1_EUSART_Write
  8626                           
  8627                           ;mpu_iic.c: 243: EUSART_Write(0xAA);
  8628  0260  30AA               	movlw	170
  8629  0261  318C  2484  3182   	fcall	i1_EUSART_Write
  8630                           
  8631                           ;mpu_iic.c: 244: gyro_angle = (float)New_gyro;
  8632  0264  0140               	movlb	0	; select bank0
  8633  0265  0867               	movf	_New_gyro+1,w
  8634  0266  00F9               	movwf	___awtoft@c+1
  8635  0267  0866               	movf	_New_gyro,w
  8636  0268  00F8               	movwf	___awtoft@c
  8637  0269  318B  23FD  3182   	fcall	___awtoft
  8638  026C  0878               	movf	?___awtoft,w
  8639  026D  0140               	movlb	0	; select bank0
  8640  026E  00CE               	movwf	Mpu6500GyroAngle@gyro_angle
  8641  026F  0879               	movf	?___awtoft+1,w
  8642  0270  00CF               	movwf	Mpu6500GyroAngle@gyro_angle+1
  8643  0271  087A               	movf	?___awtoft+2,w
  8644  0272  00D0               	movwf	Mpu6500GyroAngle@gyro_angle+2
  8645                           
  8646                           ;mpu_iic.c: 246: if(abs(New_gyro - Old_gyro) <= 10)
  8647  0273  0141               	movlb	1	; select bank1
  8648  0274  092F               	comf	_Old_gyro^(0+128),w
  8649  0275  0140               	movlb	0	; select bank0
  8650  0276  00CA               	movwf	??_Mpu6500GyroAngle
  8651  0277  0141               	movlb	1	; select bank1
  8652  0278  0930               	comf	(_Old_gyro+1)^(0+128),w
  8653  0279  0140               	movlb	0	; select bank0
  8654  027A  00CB               	movwf	??_Mpu6500GyroAngle+1
  8655  027B  0ACA               	incf	??_Mpu6500GyroAngle,f
  8656  027C  1903               	skipnz
  8657  027D  0ACB               	incf	??_Mpu6500GyroAngle+1,f
  8658  027E  0866               	movf	_New_gyro,w
  8659  027F  074A               	addwf	??_Mpu6500GyroAngle,w
  8660  0280  00F0               	movwf	abs@a
  8661  0281  0867               	movf	_New_gyro+1,w
  8662  0282  3D4B               	addwfc	??_Mpu6500GyroAngle+1,w
  8663  0283  00F1               	movwf	abs@a+1
  8664  0284  318A  22C1  3182   	fcall	_abs
  8665  0287  0871               	movf	?_abs+1,w
  8666  0288  3A80               	xorlw	128
  8667  0289  0140               	movlb	0	; select bank0
  8668  028A  00CC               	movwf	??_Mpu6500GyroAngle+2
  8669  028B  3080               	movlw	128
  8670  028C  024C               	subwf	??_Mpu6500GyroAngle+2,w
  8671  028D  1D03               	skipz
  8672  028E  2A91               	goto	u281_25
  8673  028F  300B               	movlw	11
  8674  0290  0270               	subwf	?_abs,w
  8675  0291                     u281_25:	
  8676  0291  1803               	skipnc
  8677  0292  2ABB               	goto	i1l2831
  8678                           
  8679                           ;mpu_iic.c: 247: {;mpu_iic.c: 248: if(Sam_cnt == 0)
  8680  0293  0140               	movlb	0	; select bank0
  8681  0294  0868               	movf	_Sam_cnt,w
  8682  0295  1D03               	btfss	3,2
  8683  0296  2A9B               	goto	i1l2825
  8684                           
  8685                           ;mpu_iic.c: 249: {;mpu_iic.c: 250: Frist_gyro = New_gyro;
  8686  0297  0867               	movf	_New_gyro+1,w
  8687  0298  00E5               	movwf	_Frist_gyro+1
  8688  0299  0866               	movf	_New_gyro,w
  8689  029A  00E4               	movwf	_Frist_gyro
  8690  029B                     i1l2825:	
  8691                           
  8692                           ;mpu_iic.c: 251: };mpu_iic.c: 252: Sam_cnt ++;
  8693  029B  3001               	movlw	1
  8694  029C  00CA               	movwf	??_Mpu6500GyroAngle
  8695  029D  084A               	movf	??_Mpu6500GyroAngle,w
  8696  029E  07E8               	addwf	_Sam_cnt,f
  8697                           
  8698                           ;mpu_iic.c: 253: if(abs(New_gyro - Frist_gyro) > 10)
  8699  029F  0964               	comf	_Frist_gyro,w
  8700  02A0  00CA               	movwf	??_Mpu6500GyroAngle
  8701  02A1  0965               	comf	_Frist_gyro+1,w
  8702  02A2  00CB               	movwf	??_Mpu6500GyroAngle+1
  8703  02A3  0ACA               	incf	??_Mpu6500GyroAngle,f
  8704  02A4  1903               	skipnz
  8705  02A5  0ACB               	incf	??_Mpu6500GyroAngle+1,f
  8706  02A6  0866               	movf	_New_gyro,w
  8707  02A7  074A               	addwf	??_Mpu6500GyroAngle,w
  8708  02A8  00F0               	movwf	abs@a
  8709  02A9  0867               	movf	_New_gyro+1,w
  8710  02AA  3D4B               	addwfc	??_Mpu6500GyroAngle+1,w
  8711  02AB  00F1               	movwf	abs@a+1
  8712  02AC  318A  22C1  3182   	fcall	_abs
  8713  02AF  0871               	movf	?_abs+1,w
  8714  02B0  3A80               	xorlw	128
  8715  02B1  0140               	movlb	0	; select bank0
  8716  02B2  00CC               	movwf	??_Mpu6500GyroAngle+2
  8717  02B3  3080               	movlw	128
  8718  02B4  024C               	subwf	??_Mpu6500GyroAngle+2,w
  8719  02B5  1D03               	skipz
  8720  02B6  2AB9               	goto	u283_25
  8721  02B7  300B               	movlw	11
  8722  02B8  0270               	subwf	?_abs,w
  8723  02B9                     u283_25:	
  8724  02B9  1C03               	skipc
  8725  02BA  2ABD               	goto	i1l2833
  8726  02BB                     i1l2831:	
  8727                           ;mpu_iic.c: 256: };mpu_iic.c: 257: }
  8728                           
  8729                           ;mpu_iic.c: 254: {;mpu_iic.c: 255: Sam_cnt = 0;
  8730                           
  8731                           
  8732                           ;mpu_iic.c: 258: else;mpu_iic.c: 259: {;mpu_iic.c: 260: Sam_cnt = 0;
  8733  02BB  0140               	movlb	0	; select bank0
  8734  02BC  01E8               	clrf	_Sam_cnt
  8735  02BD                     i1l2833:	
  8736                           
  8737                           ;mpu_iic.c: 261: };mpu_iic.c: 262: Old_gyro = New_gyro;
  8738  02BD  0140               	movlb	0	; select bank0
  8739  02BE  0867               	movf	_New_gyro+1,w
  8740  02BF  0141               	movlb	1	; select bank1
  8741  02C0  00B0               	movwf	(_Old_gyro+1)^(0+128)
  8742  02C1  0140               	movlb	0	; select bank0
  8743  02C2  0866               	movf	_New_gyro,w
  8744  02C3  0141               	movlb	1	; select bank1
  8745  02C4  00AF               	movwf	_Old_gyro^(0+128)
  8746                           
  8747                           ;mpu_iic.c: 263: if(Sam_cnt >= 100)
  8748  02C5  3064               	movlw	100
  8749  02C6  0140               	movlb	0	; select bank0
  8750  02C7  0268               	subwf	_Sam_cnt,w
  8751  02C8  1C03               	skipc
  8752  02C9  2AE6               	goto	i1l2843
  8753                           
  8754                           ;mpu_iic.c: 264: {;mpu_iic.c: 265: EUSART_Write(0x5A);
  8755  02CA  305A               	movlw	90
  8756  02CB  318C  2484  3182   	fcall	i1_EUSART_Write
  8757                           
  8758                           ;mpu_iic.c: 266: EUSART_Write(New_gyro >>8);
  8759  02CE  0140               	movlb	0	; select bank0
  8760  02CF  0867               	movf	_New_gyro+1,w
  8761  02D0  318C  2484  3182   	fcall	i1_EUSART_Write
  8762                           
  8763                           ;mpu_iic.c: 267: EUSART_Write(New_gyro);
  8764  02D3  0140               	movlb	0	; select bank0
  8765  02D4  0866               	movf	_New_gyro,w
  8766  02D5  318C  2484  3182   	fcall	i1_EUSART_Write
  8767                           
  8768                           ;mpu_iic.c: 268: EUSART_Write(0xA5);
  8769  02D8  30A5               	movlw	165
  8770  02D9  318C  2484  3182   	fcall	i1_EUSART_Write
  8771                           
  8772                           ;mpu_iic.c: 269: G_Offset_X = New_gyro;
  8773  02DC  0140               	movlb	0	; select bank0
  8774  02DD  0867               	movf	_New_gyro+1,w
  8775  02DE  0141               	movlb	1	; select bank1
  8776  02DF  00AE               	movwf	(_G_Offset_X+1)^(0+128)
  8777  02E0  0140               	movlb	0	; select bank0
  8778  02E1  0866               	movf	_New_gyro,w
  8779  02E2  0141               	movlb	1	; select bank1
  8780  02E3  00AD               	movwf	_G_Offset_X^(0+128)
  8781                           
  8782                           ;mpu_iic.c: 270: Sam_cnt = 0;
  8783  02E4  0140               	movlb	0	; select bank0
  8784  02E5  01E8               	clrf	_Sam_cnt
  8785  02E6                     i1l2843:	
  8786                           
  8787                           ;mpu_iic.c: 272: };mpu_iic.c: 274: gyro_angle = (gyro_angle - G_Offset_X)/131;
  8788  02E6  3000               	movlw	0
  8789  02E7  00B7               	movwf	___ftdiv@f2
  8790  02E8  3003               	movlw	3
  8791  02E9  00B8               	movwf	___ftdiv@f2+1
  8792  02EA  3043               	movlw	67
  8793  02EB  00B9               	movwf	___ftdiv@f2+2
  8794  02EC  084E               	movf	Mpu6500GyroAngle@gyro_angle,w
  8795  02ED  00AA               	movwf	___ftadd@f1
  8796  02EE  084F               	movf	Mpu6500GyroAngle@gyro_angle+1,w
  8797  02EF  00AB               	movwf	___ftadd@f1+1
  8798  02F0  0850               	movf	Mpu6500GyroAngle@gyro_angle+2,w
  8799  02F1  00AC               	movwf	___ftadd@f1+2
  8800  02F2  0141               	movlb	1	; select bank1
  8801  02F3  082E               	movf	(_G_Offset_X+1)^(0+128),w
  8802  02F4  00F9               	movwf	___awtoft@c+1
  8803  02F5  082D               	movf	_G_Offset_X^(0+128),w
  8804  02F6  00F8               	movwf	___awtoft@c
  8805  02F7  318B  23FD  3182   	fcall	___awtoft
  8806  02FA  0878               	movf	?___awtoft,w
  8807  02FB  0140               	movlb	0	; select bank0
  8808  02FC  00A0               	movwf	___ftneg@f1
  8809  02FD  0879               	movf	?___awtoft+1,w
  8810  02FE  00A1               	movwf	___ftneg@f1+1
  8811  02FF  087A               	movf	?___awtoft+2,w
  8812  0300  00A2               	movwf	___ftneg@f1+2
  8813  0301  318A  2297  3182   	fcall	___ftneg
  8814  0304  0140               	movlb	0	; select bank0
  8815  0305  0820               	movf	?___ftneg,w
  8816  0306  00AD               	movwf	___ftadd@f2
  8817  0307  0821               	movf	?___ftneg+1,w
  8818  0308  00AE               	movwf	___ftadd@f2+1
  8819  0309  0822               	movf	?___ftneg+2,w
  8820  030A  00AF               	movwf	___ftadd@f2+2
  8821  030B  3180  2069  3182   	fcall	___ftadd
  8822  030E  0140               	movlb	0	; select bank0
  8823  030F  082A               	movf	?___ftadd,w
  8824  0310  00BA               	movwf	___ftdiv@f1
  8825  0311  082B               	movf	?___ftadd+1,w
  8826  0312  00BB               	movwf	___ftdiv@f1+1
  8827  0313  082C               	movf	?___ftadd+2,w
  8828  0314  00BC               	movwf	___ftdiv@f1+2
  8829  0315  3183  23D8         	fcall	___ftdiv
  8830  0317  0140               	movlb	0	; select bank0
  8831  0318  0837               	movf	?___ftdiv,w
  8832  0319  00CE               	movwf	Mpu6500GyroAngle@gyro_angle
  8833  031A  0838               	movf	?___ftdiv+1,w
  8834  031B  00CF               	movwf	Mpu6500GyroAngle@gyro_angle+1
  8835  031C  0839               	movf	?___ftdiv+2,w
  8836  031D  00D0               	movwf	Mpu6500GyroAngle@gyro_angle+2
  8837                           
  8838                           ;mpu_iic.c: 276: return gyro_angle;
  8839  031E  084E               	movf	Mpu6500GyroAngle@gyro_angle,w
  8840  031F  00C7               	movwf	?_Mpu6500GyroAngle
  8841  0320  084F               	movf	Mpu6500GyroAngle@gyro_angle+1,w
  8842  0321  00C8               	movwf	?_Mpu6500GyroAngle+1
  8843  0322  0850               	movf	Mpu6500GyroAngle@gyro_angle+2,w
  8844  0323  00C9               	movwf	?_Mpu6500GyroAngle+2
  8845  0324  0008               	return
  8846  0325                     __end_of_Mpu6500GyroAngle:	
  8847                           
  8848                           	psect	text42
  8849  0C1D                     __ptext42:	
  8850 ;; *************** function i1_Get6500Data *****************
  8851 ;; Defined at:
  8852 ;;		line 191 in file "src/mpu_iic.c"
  8853 ;; Parameters:    Size  Location     Type
  8854 ;;  REG_Address     1    wreg     unsigned char 
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;  REG_Address     1   12[COMMON] unsigned char 
  8857 ;;  Get6500Data     1   11[COMMON] unsigned char 
  8858 ;;  Get6500Data     1   10[COMMON] unsigned char 
  8859 ;; Return value:  Size  Location     Type
  8860 ;;                  2    8[COMMON] int 
  8861 ;; Registers used:
  8862 ;;		wreg, status,2, status,0, pclath, cstack
  8863 ;; Tracked objects:
  8864 ;;		On entry : 0/0
  8865 ;;		On exit  : 0/0
  8866 ;;		Unchanged: 0/0
  8867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8868 ;;      Params:         2       0       0       0       0       0       0       0
  8869 ;;      Locals:         3       0       0       0       0       0       0       0
  8870 ;;      Temps:          0       5       0       0       0       0       0       0
  8871 ;;      Totals:         5       5       0       0       0       0       0       0
  8872 ;;Total ram usage:       10 bytes
  8873 ;; Hardware stack levels used:    1
  8874 ;; Hardware stack levels required when called:    2
  8875 ;; This function calls:
  8876 ;;		i1_Com_Lock_MPU_RD_Reg
  8877 ;; This function is called by:
  8878 ;;		_Mpu6500GyroAngle
  8879 ;; This function uses a non-reentrant model
  8880 ;;
  8881                           
  8882                           
  8883                           ;psect for function i1_Get6500Data
  8884  0C1D                     i1_Get6500Data:	
  8885                           
  8886                           ;incstack = 0
  8887                           ; Regs used in i1_Get6500Data: [wreg+status,2+status,0+pclath+cstack]
  8888                           ;i1Get6500Data@REG_Address stored from wreg
  8889  0C1D  00FC               	movwf	i1Get6500Data@REG_Address
  8890                           
  8891                           ;mpu_iic.c: 193: char H,L;;mpu_iic.c: 194: H=Com_Lock_MPU_RD_Reg(REG_Address);
  8892  0C1E  087C               	movf	i1Get6500Data@REG_Address,w
  8893  0C1F  318C  24AA  318C   	fcall	i1_Com_Lock_MPU_RD_Reg
  8894  0C22  0140               	movlb	0	; select bank0
  8895  0C23  00A0               	movwf	??i1_Get6500Data
  8896  0C24  0820               	movf	??i1_Get6500Data,w
  8897  0C25  00FA               	movwf	i1Get6500Data@H
  8898                           
  8899                           ;mpu_iic.c: 195: L=Com_Lock_MPU_RD_Reg(REG_Address+1);
  8900  0C26  087C               	movf	i1Get6500Data@REG_Address,w
  8901  0C27  3E01               	addlw	1
  8902  0C28  318C  24AA         	fcall	i1_Com_Lock_MPU_RD_Reg
  8903  0C2A  0140               	movlb	0	; select bank0
  8904  0C2B  00A0               	movwf	??i1_Get6500Data
  8905  0C2C  0820               	movf	??i1_Get6500Data,w
  8906  0C2D  00FB               	movwf	i1Get6500Data@L
  8907                           
  8908                           ;mpu_iic.c: 196: return (H<<8)+L;
  8909  0C2E  087B               	movf	i1Get6500Data@L,w
  8910  0C2F  00A0               	movwf	??i1_Get6500Data
  8911  0C30  01A1               	clrf	??i1_Get6500Data+1
  8912  0C31  087A               	movf	i1Get6500Data@H,w
  8913  0C32  00A2               	movwf	??i1_Get6500Data+2
  8914  0C33  01A3               	clrf	??i1_Get6500Data+3
  8915  0C34  0822               	movf	??i1_Get6500Data+2,w
  8916  0C35  00A3               	movwf	??i1_Get6500Data+3
  8917  0C36  01A2               	clrf	??i1_Get6500Data+2
  8918  0C37  0820               	movf	??i1_Get6500Data,w
  8919  0C38  0722               	addwf	??i1_Get6500Data+2,w
  8920  0C39  00F8               	movwf	?i1_Get6500Data
  8921  0C3A  0821               	movf	??i1_Get6500Data+1,w
  8922  0C3B  3D23               	addwfc	??i1_Get6500Data+3,w
  8923  0C3C  00F9               	movwf	?i1_Get6500Data+1
  8924  0C3D  0008               	return
  8925  0C3E                     __end_ofi1_Get6500Data:	
  8926                           
  8927                           	psect	text43
  8928  0CAA                     __ptext43:	
  8929 ;; *************** function i1_Com_Lock_MPU_RD_Reg *****************
  8930 ;; Defined at:
  8931 ;;		line 174 in file "src/mpu_iic.c"
  8932 ;; Parameters:    Size  Location     Type
  8933 ;;  addr            1    wreg     unsigned char 
  8934 ;; Auto vars:     Size  Location     Type
  8935 ;;  addr            1    6[COMMON] unsigned char 
  8936 ;;  Com_Lock_MPU    1    7[COMMON] unsigned char 
  8937 ;; Return value:  Size  Location     Type
  8938 ;;                  1    wreg      unsigned char 
  8939 ;; Registers used:
  8940 ;;		wreg, status,2, status,0, pclath, cstack
  8941 ;; Tracked objects:
  8942 ;;		On entry : 0/0
  8943 ;;		On exit  : 0/0
  8944 ;;		Unchanged: 0/0
  8945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8946 ;;      Params:         0       0       0       0       0       0       0       0
  8947 ;;      Locals:         2       0       0       0       0       0       0       0
  8948 ;;      Temps:          1       0       0       0       0       0       0       0
  8949 ;;      Totals:         3       0       0       0       0       0       0       0
  8950 ;;Total ram usage:        3 bytes
  8951 ;; Hardware stack levels used:    1
  8952 ;; Hardware stack levels required when called:    1
  8953 ;; This function calls:
  8954 ;;		i1_Com_Lock_IIC_Read_Data
  8955 ;;		i1_Com_Lock_IIC_Start
  8956 ;;		i1_Com_Lock_IIC_Stop
  8957 ;;		i1_Com_Lock_IIC_Write_Data
  8958 ;; This function is called by:
  8959 ;;		i1_Get6500Data
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           
  8964                           ;psect for function i1_Com_Lock_MPU_RD_Reg
  8965  0CAA                     i1_Com_Lock_MPU_RD_Reg:	
  8966                           
  8967                           ;incstack = 0
  8968                           ; Regs used in i1_Com_Lock_MPU_RD_Reg: [wreg+status,2+status,0+pclath+cstack]
  8969                           ;i1Com_Lock_MPU_RD_Reg@addr stored from wreg
  8970  0CAA  00F6               	movwf	i1Com_Lock_MPU_RD_Reg@addr
  8971                           
  8972                           ;mpu_iic.c: 176: uint8_t temp=0;
  8973  0CAB  01F7               	clrf	i1Com_Lock_MPU_RD_Reg@temp
  8974                           
  8975                           ;mpu_iic.c: 177: Com_Lock_IIC_Start();
  8976  0CAC  318B  230B  318C   	fcall	i1_Com_Lock_IIC_Start
  8977                           
  8978                           ;mpu_iic.c: 178: temp = Com_Lock_IIC_Write_Data(0xD0);
  8979  0CAF  30D0               	movlw	208
  8980  0CB0  318E  26AC  318C   	fcall	i1_Com_Lock_IIC_Write_Data
  8981  0CB3  00F5               	movwf	??i1_Com_Lock_MPU_RD_Reg
  8982  0CB4  0875               	movf	??i1_Com_Lock_MPU_RD_Reg,w
  8983  0CB5  00F7               	movwf	i1Com_Lock_MPU_RD_Reg@temp
  8984                           
  8985                           ;mpu_iic.c: 179: temp = Com_Lock_IIC_Write_Data(addr);
  8986  0CB6  0876               	movf	i1Com_Lock_MPU_RD_Reg@addr,w
  8987  0CB7  318E  26AC  318C   	fcall	i1_Com_Lock_IIC_Write_Data
  8988  0CBA  00F5               	movwf	??i1_Com_Lock_MPU_RD_Reg
  8989  0CBB  0875               	movf	??i1_Com_Lock_MPU_RD_Reg,w
  8990  0CBC  00F7               	movwf	i1Com_Lock_MPU_RD_Reg@temp
  8991                           
  8992                           ;mpu_iic.c: 180: Com_Lock_IIC_Start();
  8993  0CBD  318B  230B  318C   	fcall	i1_Com_Lock_IIC_Start
  8994                           
  8995                           ;mpu_iic.c: 181: temp = Com_Lock_IIC_Write_Data(0xD0+1);
  8996  0CC0  30D1               	movlw	209
  8997  0CC1  318E  26AC  318C   	fcall	i1_Com_Lock_IIC_Write_Data
  8998  0CC4  00F5               	movwf	??i1_Com_Lock_MPU_RD_Reg
  8999  0CC5  0875               	movf	??i1_Com_Lock_MPU_RD_Reg,w
  9000  0CC6  00F7               	movwf	i1Com_Lock_MPU_RD_Reg@temp
  9001                           
  9002                           ;mpu_iic.c: 182: temp=Com_Lock_IIC_Read_Data(0);
  9003  0CC7  3000               	movlw	0
  9004  0CC8  318E  26EA  318C   	fcall	i1_Com_Lock_IIC_Read_Data
  9005  0CCB  00F5               	movwf	??i1_Com_Lock_MPU_RD_Reg
  9006  0CCC  0875               	movf	??i1_Com_Lock_MPU_RD_Reg,w
  9007  0CCD  00F7               	movwf	i1Com_Lock_MPU_RD_Reg@temp
  9008                           
  9009                           ;mpu_iic.c: 183: Com_Lock_IIC_Stop();
  9010  0CCE  318A  22EB         	fcall	i1_Com_Lock_IIC_Stop
  9011                           
  9012                           ;mpu_iic.c: 184: return temp;
  9013  0CD0  0877               	movf	i1Com_Lock_MPU_RD_Reg@temp,w
  9014  0CD1  0008               	return
  9015  0CD2                     __end_ofi1_Com_Lock_MPU_RD_Reg:	
  9016                           
  9017                           	psect	text44
  9018  0EAC                     __ptext44:	
  9019 ;; *************** function i1_Com_Lock_IIC_Write_Data *****************
  9020 ;; Defined at:
  9021 ;;		line 77 in file "src/mpu_iic.c"
  9022 ;; Parameters:    Size  Location     Type
  9023 ;;  dat             1    wreg     unsigned char 
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;  dat             1    1[COMMON] unsigned char 
  9026 ;;  Com_Lock_IIC    2    3[COMMON] int 
  9027 ;;  Com_Lock_IIC    1    2[COMMON] unsigned char 
  9028 ;; Return value:  Size  Location     Type
  9029 ;;                  1    wreg      unsigned char 
  9030 ;; Registers used:
  9031 ;;		wreg, status,2, status,0
  9032 ;; Tracked objects:
  9033 ;;		On entry : 0/0
  9034 ;;		On exit  : 0/0
  9035 ;;		Unchanged: 0/0
  9036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9037 ;;      Params:         0       0       0       0       0       0       0       0
  9038 ;;      Locals:         4       0       0       0       0       0       0       0
  9039 ;;      Temps:          1       0       0       0       0       0       0       0
  9040 ;;      Totals:         5       0       0       0       0       0       0       0
  9041 ;;Total ram usage:        5 bytes
  9042 ;; Hardware stack levels used:    1
  9043 ;; This function calls:
  9044 ;;		Nothing
  9045 ;; This function is called by:
  9046 ;;		i1_Com_Lock_MPU_RD_Reg
  9047 ;; This function uses a non-reentrant model
  9048 ;;
  9049                           
  9050                           
  9051                           ;psect for function i1_Com_Lock_IIC_Write_Data
  9052  0EAC                     i1_Com_Lock_IIC_Write_Data:	
  9053                           
  9054                           ;incstack = 0
  9055                           ; Regs used in i1_Com_Lock_IIC_Write_Data: [wreg+status,2+status,0]
  9056                           ;i1Com_Lock_IIC_Write_Data@dat stored from wreg
  9057  0EAC  00F1               	movwf	i1Com_Lock_IIC_Write_Data@dat
  9058                           
  9059                           ;mpu_iic.c: 79: int i = 0;
  9060  0EAD  01F3               	clrf	i1Com_Lock_IIC_Write_Data@i
  9061  0EAE  01F4               	clrf	i1Com_Lock_IIC_Write_Data@i+1
  9062                           
  9063                           ;mpu_iic.c: 80: char retVal;;mpu_iic.c: 81: for(i = 0; i < 8; )
  9064  0EAF  01F3               	clrf	i1Com_Lock_IIC_Write_Data@i
  9065  0EB0  01F4               	clrf	i1Com_Lock_IIC_Write_Data@i+1
  9066  0EB1  0874               	movf	i1Com_Lock_IIC_Write_Data@i+1,w
  9067  0EB2  3A80               	xorlw	128
  9068  0EB3  00F0               	movwf	??i1_Com_Lock_IIC_Write_Data
  9069  0EB4  3080               	movlw	128
  9070  0EB5  0270               	subwf	??i1_Com_Lock_IIC_Write_Data,w
  9071  0EB6  3008               	movlw	8
  9072  0EB7  1903               	btfsc	3,2
  9073  0EB8  0273               	subwf	i1Com_Lock_IIC_Write_Data@i,w
  9074  0EB9  1803               	btfsc	3,0
  9075  0EBA  2ED3               	goto	i1l338
  9076  0EBB                     i1l337:	
  9077                           
  9078                           ;mpu_iic.c: 82: {;mpu_iic.c: 83: PORTCbits.RC3 = 0;
  9079  0EBB  0140               	movlb	0	; select bank0
  9080  0EBC  118E               	bcf	14,3	;volatile
  9081                           
  9082                           ;mpu_iic.c: 84: if(dat & 0x80)
  9083  0EBD  1FF1               	btfss	i1Com_Lock_IIC_Write_Data@dat,7
  9084  0EBE  2EC1               	goto	i1l339
  9085                           
  9086                           ;mpu_iic.c: 85: {;mpu_iic.c: 86: PORTCbits.RC4 = 1;
  9087  0EBF  160E               	bsf	14,4	;volatile
  9088                           
  9089                           ;mpu_iic.c: 87: }
  9090  0EC0  2EC2               	goto	i1l2305
  9091  0EC1                     i1l339:	
  9092                           
  9093                           ;mpu_iic.c: 88: else;mpu_iic.c: 89: {;mpu_iic.c: 90: PORTCbits.RC4 = 0;
  9094  0EC1  120E               	bcf	14,4	;volatile
  9095  0EC2                     i1l2305:	
  9096                           
  9097                           ;mpu_iic.c: 91: };mpu_iic.c: 92: dat <<= 1;
  9098  0EC2  1003               	clrc
  9099  0EC3  0DF1               	rlf	i1Com_Lock_IIC_Write_Data@dat,f
  9100                           
  9101                           ;mpu_iic.c: 93: i++;
  9102  0EC4  3001               	movlw	1
  9103  0EC5  07F3               	addwf	i1Com_Lock_IIC_Write_Data@i,f
  9104  0EC6  3000               	movlw	0
  9105  0EC7  3DF4               	addwfc	i1Com_Lock_IIC_Write_Data@i+1,f
  9106                           
  9107                           ;mpu_iic.c: 95: PORTCbits.RC3 = 1;
  9108  0EC8  158E               	bsf	14,3	;volatile
  9109  0EC9  0874               	movf	i1Com_Lock_IIC_Write_Data@i+1,w
  9110  0ECA  3A80               	xorlw	128
  9111  0ECB  00F0               	movwf	??i1_Com_Lock_IIC_Write_Data
  9112  0ECC  3080               	movlw	128
  9113  0ECD  0270               	subwf	??i1_Com_Lock_IIC_Write_Data,w
  9114  0ECE  3008               	movlw	8
  9115  0ECF  1903               	btfsc	3,2
  9116  0ED0  0273               	subwf	i1Com_Lock_IIC_Write_Data@i,w
  9117  0ED1  1C03               	skipc
  9118  0ED2  2EBB               	goto	i1l337
  9119  0ED3                     i1l338:	
  9120                           
  9121                           ;mpu_iic.c: 98: };mpu_iic.c: 99: PORTCbits.RC3 = 0;
  9122  0ED3  0140               	movlb	0	; select bank0
  9123  0ED4  118E               	bcf	14,3	;volatile
  9124                           
  9125                           ;mpu_iic.c: 101: TRISC |= 0x10;
  9126  0ED5  1614               	bsf	20,4	;volatile
  9127                           
  9128                           ;mpu_iic.c: 102: _delay((unsigned long)((4)*(8000000/4000000.0)));
  9129  0ED6  3200               	nop2	;2 cycle nop
  9130  0ED7  3200               	nop2	;2 cycle nop
  9131  0ED8  3200               	nop2	;2 cycle nop
  9132  0ED9  3200               	nop2	;2 cycle nop
  9133                           
  9134                           ;mpu_iic.c: 105: PORTCbits.RC3 = 1;
  9135  0EDA  0140               	movlb	0	; select bank0
  9136  0EDB  158E               	bsf	14,3	;volatile
  9137                           
  9138                           ;mpu_iic.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9139  0EDC  3200               	nop2	;2 cycle nop
  9140  0EDD  3200               	nop2	;2 cycle nop
  9141                           
  9142                           ;mpu_iic.c: 107: retVal = PORTCbits.RC4;
  9143  0EDE  3000               	movlw	0
  9144  0EDF  0140               	movlb	0	; select bank0
  9145  0EE0  1A0E               	btfsc	14,4	;volatile
  9146  0EE1  3001               	movlw	1
  9147  0EE2  00F2               	movwf	i1Com_Lock_IIC_Write_Data@retVal
  9148                           
  9149                           ;mpu_iic.c: 108: PORTCbits.RC3 = 0;
  9150  0EE3  118E               	bcf	14,3	;volatile
  9151                           
  9152                           ;mpu_iic.c: 109: TRISC &= 0xEF;
  9153  0EE4  30EF               	movlw	239
  9154  0EE5  00F0               	movwf	??i1_Com_Lock_IIC_Write_Data
  9155  0EE6  0870               	movf	??i1_Com_Lock_IIC_Write_Data,w
  9156  0EE7  0594               	andwf	20,f	;volatile
  9157                           
  9158                           ;mpu_iic.c: 110: return retVal;
  9159  0EE8  0872               	movf	i1Com_Lock_IIC_Write_Data@retVal,w
  9160  0EE9  0008               	return
  9161  0EEA                     __end_ofi1_Com_Lock_IIC_Write_Data:	
  9162                           
  9163                           	psect	text45
  9164  0AEB                     __ptext45:	
  9165 ;; *************** function i1_Com_Lock_IIC_Stop *****************
  9166 ;; Defined at:
  9167 ;;		line 60 in file "src/mpu_iic.c"
  9168 ;; Parameters:    Size  Location     Type
  9169 ;;		None
  9170 ;; Auto vars:     Size  Location     Type
  9171 ;;		None
  9172 ;; Return value:  Size  Location     Type
  9173 ;;                  1    wreg      void 
  9174 ;; Registers used:
  9175 ;;		None
  9176 ;; Tracked objects:
  9177 ;;		On entry : 0/0
  9178 ;;		On exit  : 0/0
  9179 ;;		Unchanged: 0/0
  9180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9181 ;;      Params:         0       0       0       0       0       0       0       0
  9182 ;;      Locals:         0       0       0       0       0       0       0       0
  9183 ;;      Temps:          0       0       0       0       0       0       0       0
  9184 ;;      Totals:         0       0       0       0       0       0       0       0
  9185 ;;Total ram usage:        0 bytes
  9186 ;; Hardware stack levels used:    1
  9187 ;; This function calls:
  9188 ;;		Nothing
  9189 ;; This function is called by:
  9190 ;;		i1_Com_Lock_MPU_RD_Reg
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           
  9195                           ;psect for function i1_Com_Lock_IIC_Stop
  9196  0AEB                     i1_Com_Lock_IIC_Stop:	
  9197                           
  9198                           ;mpu_iic.c: 62: PORTCbits.RC4 = 0;
  9199                           
  9200                           ;incstack = 0
  9201                           ; Regs used in i1_Com_Lock_IIC_Stop: []
  9202  0AEB  0140               	movlb	0	; select bank0
  9203  0AEC  120E               	bcf	14,4	;volatile
  9204                           
  9205                           ;mpu_iic.c: 63: _delay((unsigned long)((3)*(8000000/4000000.0)));
  9206  0AED  3200               	nop2	;2 cycle nop
  9207  0AEE  3200               	nop2	;2 cycle nop
  9208  0AEF  3200               	nop2	;2 cycle nop
  9209                           
  9210                           ;mpu_iic.c: 64: PORTCbits.RC3 = 1;
  9211  0AF0  0140               	movlb	0	; select bank0
  9212  0AF1  158E               	bsf	14,3	;volatile
  9213                           
  9214                           ;mpu_iic.c: 65: _delay((unsigned long)((3)*(8000000/4000000.0)));
  9215  0AF2  3200               	nop2	;2 cycle nop
  9216  0AF3  3200               	nop2	;2 cycle nop
  9217  0AF4  3200               	nop2	;2 cycle nop
  9218                           
  9219                           ;mpu_iic.c: 66: PORTCbits.RC4 = 1;
  9220  0AF5  0140               	movlb	0	; select bank0
  9221  0AF6  160E               	bsf	14,4	;volatile
  9222                           
  9223                           ;mpu_iic.c: 67: _delay((unsigned long)((3)*(8000000/4000000.0)));
  9224  0AF7  3200               	nop2	;2 cycle nop
  9225  0AF8  3200               	nop2	;2 cycle nop
  9226  0AF9  3200               	nop2	;2 cycle nop
  9227  0AFA  0008               	return
  9228  0AFB                     __end_ofi1_Com_Lock_IIC_Stop:	
  9229                           
  9230                           	psect	text46
  9231  0B0B                     __ptext46:	
  9232 ;; *************** function i1_Com_Lock_IIC_Start *****************
  9233 ;; Defined at:
  9234 ;;		line 40 in file "src/mpu_iic.c"
  9235 ;; Parameters:    Size  Location     Type
  9236 ;;		None
  9237 ;; Auto vars:     Size  Location     Type
  9238 ;;		None
  9239 ;; Return value:  Size  Location     Type
  9240 ;;                  1    wreg      void 
  9241 ;; Registers used:
  9242 ;;		None
  9243 ;; Tracked objects:
  9244 ;;		On entry : 0/0
  9245 ;;		On exit  : 0/0
  9246 ;;		Unchanged: 0/0
  9247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9248 ;;      Params:         0       0       0       0       0       0       0       0
  9249 ;;      Locals:         0       0       0       0       0       0       0       0
  9250 ;;      Temps:          0       0       0       0       0       0       0       0
  9251 ;;      Totals:         0       0       0       0       0       0       0       0
  9252 ;;Total ram usage:        0 bytes
  9253 ;; Hardware stack levels used:    1
  9254 ;; This function calls:
  9255 ;;		Nothing
  9256 ;; This function is called by:
  9257 ;;		i1_Com_Lock_MPU_RD_Reg
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261                           
  9262                           ;psect for function i1_Com_Lock_IIC_Start
  9263  0B0B                     i1_Com_Lock_IIC_Start:	
  9264                           
  9265                           ;mpu_iic.c: 42: PORTCbits.RC4 = 1;
  9266                           
  9267                           ;incstack = 0
  9268                           ; Regs used in i1_Com_Lock_IIC_Start: []
  9269  0B0B  0140               	movlb	0	; select bank0
  9270  0B0C  160E               	bsf	14,4	;volatile
  9271                           
  9272                           ;mpu_iic.c: 44: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9273  0B0D  3200               	nop2	;2 cycle nop
  9274  0B0E  3200               	nop2	;2 cycle nop
  9275                           
  9276                           ;mpu_iic.c: 45: PORTCbits.RC3 = 1;
  9277  0B0F  0140               	movlb	0	; select bank0
  9278  0B10  158E               	bsf	14,3	;volatile
  9279                           
  9280                           ;mpu_iic.c: 47: _delay((unsigned long)((3)*(8000000/4000000.0)));
  9281  0B11  3200               	nop2	;2 cycle nop
  9282  0B12  3200               	nop2	;2 cycle nop
  9283  0B13  3200               	nop2	;2 cycle nop
  9284                           
  9285                           ;mpu_iic.c: 48: PORTCbits.RC4 = 0;
  9286  0B14  0140               	movlb	0	; select bank0
  9287  0B15  120E               	bcf	14,4	;volatile
  9288                           
  9289                           ;mpu_iic.c: 49: _delay((unsigned long)((3)*(8000000/4000000.0)));
  9290  0B16  3200               	nop2	;2 cycle nop
  9291  0B17  3200               	nop2	;2 cycle nop
  9292  0B18  3200               	nop2	;2 cycle nop
  9293                           
  9294                           ;mpu_iic.c: 50: PORTCbits.RC3 = 0;
  9295  0B19  0140               	movlb	0	; select bank0
  9296  0B1A  118E               	bcf	14,3	;volatile
  9297  0B1B  0008               	return
  9298  0B1C                     __end_ofi1_Com_Lock_IIC_Start:	
  9299                           
  9300                           	psect	text47
  9301  0EEA                     __ptext47:	
  9302 ;; *************** function i1_Com_Lock_IIC_Read_Data *****************
  9303 ;; Defined at:
  9304 ;;		line 137 in file "src/mpu_iic.c"
  9305 ;; Parameters:    Size  Location     Type
  9306 ;;  ack             1    wreg     unsigned char 
  9307 ;; Auto vars:     Size  Location     Type
  9308 ;;  ack             1    1[COMMON] unsigned char 
  9309 ;;  Com_Lock_IIC    2    3[COMMON] int 
  9310 ;;  Com_Lock_IIC    1    2[COMMON] unsigned char 
  9311 ;; Return value:  Size  Location     Type
  9312 ;;                  1    wreg      unsigned char 
  9313 ;; Registers used:
  9314 ;;		wreg, status,2, status,0
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9320 ;;      Params:         0       0       0       0       0       0       0       0
  9321 ;;      Locals:         4       0       0       0       0       0       0       0
  9322 ;;      Temps:          1       0       0       0       0       0       0       0
  9323 ;;      Totals:         5       0       0       0       0       0       0       0
  9324 ;;Total ram usage:        5 bytes
  9325 ;; Hardware stack levels used:    1
  9326 ;; This function calls:
  9327 ;;		Nothing
  9328 ;; This function is called by:
  9329 ;;		i1_Com_Lock_MPU_RD_Reg
  9330 ;; This function uses a non-reentrant model
  9331 ;;
  9332                           
  9333                           
  9334                           ;psect for function i1_Com_Lock_IIC_Read_Data
  9335  0EEA                     i1_Com_Lock_IIC_Read_Data:	
  9336                           
  9337                           ;incstack = 0
  9338                           ; Regs used in i1_Com_Lock_IIC_Read_Data: [wreg+status,2+status,0]
  9339                           ;i1Com_Lock_IIC_Read_Data@ack stored from wreg
  9340  0EEA  00F1               	movwf	i1Com_Lock_IIC_Read_Data@ack
  9341                           
  9342                           ;mpu_iic.c: 139: int i = 0;
  9343  0EEB  01F3               	clrf	i1Com_Lock_IIC_Read_Data@i
  9344  0EEC  01F4               	clrf	i1Com_Lock_IIC_Read_Data@i+1
  9345                           
  9346                           ;mpu_iic.c: 140: char retVal = 0;
  9347  0EED  01F2               	clrf	i1Com_Lock_IIC_Read_Data@retVal
  9348                           
  9349                           ;mpu_iic.c: 141: PORTCbits.RC3 = 0;
  9350  0EEE  0140               	movlb	0	; select bank0
  9351  0EEF  118E               	bcf	14,3	;volatile
  9352                           
  9353                           ;mpu_iic.c: 142: TRISC |= 0x10;
  9354  0EF0  1614               	bsf	20,4	;volatile
  9355                           
  9356                           ;mpu_iic.c: 143: for(i = 0; i < 8; i++)
  9357  0EF1  01F3               	clrf	i1Com_Lock_IIC_Read_Data@i
  9358  0EF2  01F4               	clrf	i1Com_Lock_IIC_Read_Data@i+1
  9359  0EF3  0874               	movf	i1Com_Lock_IIC_Read_Data@i+1,w
  9360  0EF4  3A80               	xorlw	128
  9361  0EF5  00F0               	movwf	??i1_Com_Lock_IIC_Read_Data
  9362  0EF6  3080               	movlw	128
  9363  0EF7  0270               	subwf	??i1_Com_Lock_IIC_Read_Data,w
  9364  0EF8  3008               	movlw	8
  9365  0EF9  1903               	btfsc	3,2
  9366  0EFA  0273               	subwf	i1Com_Lock_IIC_Read_Data@i,w
  9367  0EFB  1803               	btfsc	3,0
  9368  0EFC  2F15               	goto	i1l2339
  9369  0EFD                     i1l347:	
  9370                           
  9371                           ;mpu_iic.c: 144: {;mpu_iic.c: 146: PORTCbits.RC3 = 1;
  9372  0EFD  0140               	movlb	0	; select bank0
  9373  0EFE  158E               	bsf	14,3	;volatile
  9374                           
  9375                           ;mpu_iic.c: 148: retVal <<= 1;
  9376  0EFF  1003               	clrc
  9377  0F00  0DF2               	rlf	i1Com_Lock_IIC_Read_Data@retVal,f
  9378                           
  9379                           ;mpu_iic.c: 149: retVal |= PORTCbits.RC4;
  9380  0F01  0E0E               	swapf	14,w	;volatile
  9381  0F02  3901               	andlw	1
  9382  0F03  00F0               	movwf	??i1_Com_Lock_IIC_Read_Data
  9383  0F04  0870               	movf	??i1_Com_Lock_IIC_Read_Data,w
  9384  0F05  04F2               	iorwf	i1Com_Lock_IIC_Read_Data@retVal,f
  9385                           
  9386                           ;mpu_iic.c: 150: PORTCbits.RC3 = 0;
  9387  0F06  118E               	bcf	14,3	;volatile
  9388  0F07  3001               	movlw	1
  9389  0F08  07F3               	addwf	i1Com_Lock_IIC_Read_Data@i,f
  9390  0F09  3000               	movlw	0
  9391  0F0A  3DF4               	addwfc	i1Com_Lock_IIC_Read_Data@i+1,f
  9392  0F0B  0874               	movf	i1Com_Lock_IIC_Read_Data@i+1,w
  9393  0F0C  3A80               	xorlw	128
  9394  0F0D  00F0               	movwf	??i1_Com_Lock_IIC_Read_Data
  9395  0F0E  3080               	movlw	128
  9396  0F0F  0270               	subwf	??i1_Com_Lock_IIC_Read_Data,w
  9397  0F10  3008               	movlw	8
  9398  0F11  1903               	btfsc	3,2
  9399  0F12  0273               	subwf	i1Com_Lock_IIC_Read_Data@i,w
  9400  0F13  1C03               	skipc
  9401  0F14  2EFD               	goto	i1l347
  9402  0F15                     i1l2339:	
  9403                           
  9404                           ;mpu_iic.c: 151: };mpu_iic.c: 152: TRISC &= 0xEF;
  9405  0F15  30EF               	movlw	239
  9406  0F16  00F0               	movwf	??i1_Com_Lock_IIC_Read_Data
  9407  0F17  0870               	movf	??i1_Com_Lock_IIC_Read_Data,w
  9408  0F18  0140               	movlb	0	; select bank0
  9409  0F19  0594               	andwf	20,f	;volatile
  9410                           
  9411                           ;mpu_iic.c: 154: if(ack)
  9412  0F1A  0871               	movf	i1Com_Lock_IIC_Read_Data@ack,w
  9413  0F1B  1903               	btfsc	3,2
  9414  0F1C  2F1F               	goto	i1l349
  9415                           
  9416                           ;mpu_iic.c: 155: {;mpu_iic.c: 156: PORTCbits.RC4 = 0;
  9417  0F1D  120E               	bcf	14,4	;volatile
  9418                           
  9419                           ;mpu_iic.c: 157: }
  9420  0F1E  2F20               	goto	i1l350
  9421  0F1F                     i1l349:	
  9422                           
  9423                           ;mpu_iic.c: 159: else;mpu_iic.c: 160: {;mpu_iic.c: 161: PORTCbits.RC4 = 1;
  9424  0F1F  160E               	bsf	14,4	;volatile
  9425  0F20                     i1l350:	
  9426                           
  9427                           ;mpu_iic.c: 162: };mpu_iic.c: 163: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9428  0F20  3200               	nop2	;2 cycle nop
  9429  0F21  3200               	nop2	;2 cycle nop
  9430                           
  9431                           ;mpu_iic.c: 164: PORTCbits.RC3 = 1;
  9432  0F22  0140               	movlb	0	; select bank0
  9433  0F23  158E               	bsf	14,3	;volatile
  9434                           
  9435                           ;mpu_iic.c: 165: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9436  0F24  3200               	nop2	;2 cycle nop
  9437  0F25  3200               	nop2	;2 cycle nop
  9438                           
  9439                           ;mpu_iic.c: 166: PORTCbits.RC3 = 0;
  9440  0F26  0140               	movlb	0	; select bank0
  9441  0F27  118E               	bcf	14,3	;volatile
  9442                           
  9443                           ;mpu_iic.c: 167: return retVal;
  9444  0F28  0872               	movf	i1Com_Lock_IIC_Read_Data@retVal,w
  9445  0F29  0008               	return
  9446  0F2A                     __end_ofi1_Com_Lock_IIC_Read_Data:	
  9447                           
  9448                           	psect	text48
  9449  0C84                     __ptext48:	
  9450 ;; *************** function i1_EUSART_Write *****************
  9451 ;; Defined at:
  9452 ;;		line 185 in file "src/eusart.c"
  9453 ;; Parameters:    Size  Location     Type
  9454 ;;  txData          1    wreg     unsigned char 
  9455 ;; Auto vars:     Size  Location     Type
  9456 ;;  txData          1    1[COMMON] unsigned char 
  9457 ;; Return value:  Size  Location     Type
  9458 ;;                  1    wreg      void 
  9459 ;; Registers used:
  9460 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9461 ;; Tracked objects:
  9462 ;;		On entry : 0/0
  9463 ;;		On exit  : 0/0
  9464 ;;		Unchanged: 0/0
  9465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9466 ;;      Params:         0       0       0       0       0       0       0       0
  9467 ;;      Locals:         1       0       0       0       0       0       0       0
  9468 ;;      Temps:          1       0       0       0       0       0       0       0
  9469 ;;      Totals:         2       0       0       0       0       0       0       0
  9470 ;;Total ram usage:        2 bytes
  9471 ;; Hardware stack levels used:    1
  9472 ;; This function calls:
  9473 ;;		Nothing
  9474 ;; This function is called by:
  9475 ;;		_Mpu6500GyroAngle
  9476 ;;		_TMR0_Task
  9477 ;; This function uses a non-reentrant model
  9478 ;;
  9479                           
  9480                           
  9481                           ;psect for function i1_EUSART_Write
  9482  0C84                     i1_EUSART_Write:	
  9483                           
  9484                           ;incstack = 0
  9485                           ; Regs used in i1_EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  9486                           ;i1EUSART_Write@txData stored from wreg
  9487  0C84  00F1               	movwf	i1EUSART_Write@txData
  9488  0C85                     i1l2725:	
  9489                           ;eusart.c: 188: {
  9490                           
  9491                           ;eusart.c: 187: while(0 == eusartTxBufferRemaining)
  9492                           
  9493  0C85  0140               	movlb	0	; select bank0
  9494  0C86  086E               	movf	_eusartTxBufferRemaining,w	;volatile
  9495  0C87  1903               	btfsc	3,2
  9496  0C88  2C85               	goto	i1l2725
  9497  0C89                     i1l183:	
  9498                           ;eusart.c: 191: {
  9499                           
  9500                           ;eusart.c: 189: };eusart.c: 190: while(!(TX1STA&0x02))
  9501                           
  9502  0C89  0142               	movlb	2	; select bank2
  9503  0C8A  1C9E               	btfss	30,1	;volatile
  9504  0C8B  2C89               	goto	i1l183
  9505                           
  9506                           ;eusart.c: 193: };eusart.c: 194: if(0 == PIE3bits.TX1IE)
  9507  0C8C  014E               	movlb	14	; select bank14
  9508  0C8D  1A19               	btfsc	25,4	;volatile
  9509  0C8E  2C93               	goto	i1l186
  9510                           
  9511                           ;eusart.c: 195: {;eusart.c: 196: TX1REG = txData;
  9512  0C8F  0871               	movf	i1EUSART_Write@txData,w
  9513  0C90  0142               	movlb	2	; select bank2
  9514  0C91  009A               	movwf	26	;volatile
  9515                           
  9516                           ;eusart.c: 197: }
  9517  0C92  0008               	return
  9518  0C93                     i1l186:	
  9519                           
  9520                           ;eusart.c: 198: else;eusart.c: 199: {;eusart.c: 200: PIE3bits.TX1IE = 0;
  9521  0C93  1219               	bcf	25,4	;volatile
  9522                           
  9523                           ;eusart.c: 201: eusartTxBuffer[eusartTxHead++] = txData;
  9524  0C94  0871               	movf	i1EUSART_Write@txData,w
  9525  0C95  00F0               	movwf	??i1_EUSART_Write
  9526  0C96  0140               	movlb	0	; select bank0
  9527  0C97  086D               	movf	_eusartTxHead,w
  9528  0C98  3EA0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  9529  0C99  0086               	movwf	6
  9530  0C9A  0187               	clrf	7
  9531  0C9B  0870               	movf	??i1_EUSART_Write,w
  9532  0C9C  0081               	movwf	1
  9533  0C9D  3001               	movlw	1
  9534  0C9E  00F0               	movwf	??i1_EUSART_Write
  9535  0C9F  0870               	movf	??i1_EUSART_Write,w
  9536  0CA0  07ED               	addwf	_eusartTxHead,f
  9537                           
  9538                           ;eusart.c: 202: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  9539  0CA1  3008               	movlw	8
  9540  0CA2  026D               	subwf	_eusartTxHead,w
  9541  0CA3  1803               	btfsc	3,0
  9542                           
  9543                           ;eusart.c: 203: {;eusart.c: 204: eusartTxHead = 0;
  9544  0CA4  01ED               	clrf	_eusartTxHead
  9545                           
  9546                           ;eusart.c: 205: };eusart.c: 206: eusartTxBufferRemaining--;
  9547  0CA5  3001               	movlw	1
  9548  0CA6  02EE               	subwf	_eusartTxBufferRemaining,f	;volatile
  9549                           
  9550                           ;eusart.c: 207: PIE3bits.TX1IE = 1;
  9551  0CA7  014E               	movlb	14	; select bank14
  9552  0CA8  1619               	bsf	25,4	;volatile
  9553  0CA9  0008               	return
  9554  0CAA                     __end_ofi1_EUSART_Write:	
  9555                           
  9556                           	psect	text49
  9557  0AC1                     __ptext49:	
  9558 ;; *************** function _abs *****************
  9559 ;; Defined at:
  9560 ;;		line 4 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\abs.c"
  9561 ;; Parameters:    Size  Location     Type
  9562 ;;  a               2    0[COMMON] int 
  9563 ;; Auto vars:     Size  Location     Type
  9564 ;;		None
  9565 ;; Return value:  Size  Location     Type
  9566 ;;                  2    0[COMMON] int 
  9567 ;; Registers used:
  9568 ;;		wreg, status,2, status,0
  9569 ;; Tracked objects:
  9570 ;;		On entry : 0/0
  9571 ;;		On exit  : 0/0
  9572 ;;		Unchanged: 0/0
  9573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9574 ;;      Params:         2       0       0       0       0       0       0       0
  9575 ;;      Locals:         0       0       0       0       0       0       0       0
  9576 ;;      Temps:          2       0       0       0       0       0       0       0
  9577 ;;      Totals:         4       0       0       0       0       0       0       0
  9578 ;;Total ram usage:        4 bytes
  9579 ;; Hardware stack levels used:    1
  9580 ;; This function calls:
  9581 ;;		Nothing
  9582 ;; This function is called by:
  9583 ;;		_Mpu6500GyroAngle
  9584 ;; This function uses a non-reentrant model
  9585 ;;
  9586                           
  9587                           
  9588                           ;psect for function _abs
  9589  0AC1                     _abs:	
  9590                           
  9591                           ;incstack = 0
  9592                           ; Regs used in _abs: [wreg+status,2+status,0]
  9593  0AC1  1FF1               	btfss	abs@a+1,7
  9594  0AC2  0008               	return
  9595  0AC3  0970               	comf	abs@a,w
  9596  0AC4  00F2               	movwf	??_abs
  9597  0AC5  0971               	comf	abs@a+1,w
  9598  0AC6  00F3               	movwf	??_abs+1
  9599  0AC7  0AF2               	incf	??_abs,f
  9600  0AC8  1903               	skipnz
  9601  0AC9  0AF3               	incf	??_abs+1,f
  9602  0ACA  0872               	movf	??_abs,w
  9603  0ACB  00F0               	movwf	?_abs
  9604  0ACC  0873               	movf	??_abs+1,w
  9605  0ACD  00F1               	movwf	?_abs+1
  9606  0ACE  0008               	return
  9607  0ACF                     __end_of_abs:	
  9608                           
  9609                           	psect	text50
  9610  0A97                     __ptext50:	
  9611 ;; *************** function ___ftneg *****************
  9612 ;; Defined at:
  9613 ;;		line 15 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  9614 ;; Parameters:    Size  Location     Type
  9615 ;;  f1              3    0[BANK0 ] float 
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;		None
  9618 ;; Return value:  Size  Location     Type
  9619 ;;                  3    0[BANK0 ] float 
  9620 ;; Registers used:
  9621 ;;		wreg
  9622 ;; Tracked objects:
  9623 ;;		On entry : 0/0
  9624 ;;		On exit  : 0/0
  9625 ;;		Unchanged: 0/0
  9626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9627 ;;      Params:         0       3       0       0       0       0       0       0
  9628 ;;      Locals:         0       0       0       0       0       0       0       0
  9629 ;;      Temps:          0       0       0       0       0       0       0       0
  9630 ;;      Totals:         0       3       0       0       0       0       0       0
  9631 ;;Total ram usage:        3 bytes
  9632 ;; Hardware stack levels used:    1
  9633 ;; This function calls:
  9634 ;;		Nothing
  9635 ;; This function is called by:
  9636 ;;		_Mpu6500GyroAngle
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           
  9641                           ;psect for function ___ftneg
  9642  0A97                     ___ftneg:	
  9643                           
  9644                           ;incstack = 0
  9645                           ; Regs used in ___ftneg: [wreg]
  9646  0A97  0140               	movlb	0	; select bank0
  9647  0A98  0822               	movf	___ftneg@f1+2,w
  9648  0A99  0421               	iorwf	___ftneg@f1+1,w
  9649  0A9A  0420               	iorwf	___ftneg@f1,w
  9650  0A9B  1903               	skipnz
  9651  0A9C  0008               	return
  9652  0A9D  3080               	movlw	128
  9653  0A9E  06A2               	xorwf	___ftneg@f1+2,f
  9654  0A9F  0008               	return
  9655  0AA0                     __end_of___ftneg:	
  9656                           
  9657                           	psect	text51
  9658  03D8                     __ptext51:	
  9659 ;; *************** function ___ftdiv *****************
  9660 ;; Defined at:
  9661 ;;		line 56 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9662 ;; Parameters:    Size  Location     Type
  9663 ;;  f2              3   23[BANK0 ] float 
  9664 ;;  f1              3   26[BANK0 ] float 
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;  f3              3   34[BANK0 ] float 
  9667 ;;  sign            1   38[BANK0 ] unsigned char 
  9668 ;;  exp             1   37[BANK0 ] unsigned char 
  9669 ;;  cntr            1   33[BANK0 ] unsigned char 
  9670 ;; Return value:  Size  Location     Type
  9671 ;;                  3   23[BANK0 ] float 
  9672 ;; Registers used:
  9673 ;;		wreg, status,2, status,0, pclath, cstack
  9674 ;; Tracked objects:
  9675 ;;		On entry : 0/0
  9676 ;;		On exit  : 0/0
  9677 ;;		Unchanged: 0/0
  9678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9679 ;;      Params:         0       6       0       0       0       0       0       0
  9680 ;;      Locals:         0       6       0       0       0       0       0       0
  9681 ;;      Temps:          0       4       0       0       0       0       0       0
  9682 ;;      Totals:         0      16       0       0       0       0       0       0
  9683 ;;Total ram usage:       16 bytes
  9684 ;; Hardware stack levels used:    1
  9685 ;; Hardware stack levels required when called:    1
  9686 ;; This function calls:
  9687 ;;		___ftpack
  9688 ;; This function is called by:
  9689 ;;		_Mpu6500GyroAngle
  9690 ;; This function uses a non-reentrant model
  9691 ;;
  9692                           
  9693                           
  9694                           ;psect for function ___ftdiv
  9695  03D8                     ___ftdiv:	
  9696                           
  9697                           ;incstack = 0
  9698                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9699  03D8  0140               	movlb	0	; select bank0
  9700  03D9  083A               	movf	___ftdiv@f1,w
  9701  03DA  00BD               	movwf	??___ftdiv
  9702  03DB  083B               	movf	___ftdiv@f1+1,w
  9703  03DC  00BE               	movwf	??___ftdiv+1
  9704  03DD  083C               	movf	___ftdiv@f1+2,w
  9705  03DE  00BF               	movwf	??___ftdiv+2
  9706  03DF  1003               	clrc
  9707  03E0  0D3E               	rlf	??___ftdiv+1,w
  9708  03E1  0D3F               	rlf	??___ftdiv+2,w
  9709  03E2  00C0               	movwf	??___ftdiv+3
  9710  03E3  0840               	movf	??___ftdiv+3,w
  9711  03E4  00C5               	movwf	___ftdiv@exp
  9712  03E5  0845               	movf	___ftdiv@exp,w
  9713  03E6  1D03               	btfss	3,2
  9714  03E7  2BEF               	goto	i1l2603
  9715  03E8  3000               	movlw	0
  9716  03E9  00B7               	movwf	?___ftdiv
  9717  03EA  3000               	movlw	0
  9718  03EB  00B8               	movwf	?___ftdiv+1
  9719  03EC  3000               	movlw	0
  9720  03ED  00B9               	movwf	?___ftdiv+2
  9721  03EE  0008               	return
  9722  03EF                     i1l2603:	
  9723  03EF  0837               	movf	___ftdiv@f2,w
  9724  03F0  00BD               	movwf	??___ftdiv
  9725  03F1  0838               	movf	___ftdiv@f2+1,w
  9726  03F2  00BE               	movwf	??___ftdiv+1
  9727  03F3  0839               	movf	___ftdiv@f2+2,w
  9728  03F4  00BF               	movwf	??___ftdiv+2
  9729  03F5  1003               	clrc
  9730  03F6  0D3E               	rlf	??___ftdiv+1,w
  9731  03F7  0D3F               	rlf	??___ftdiv+2,w
  9732  03F8  00C0               	movwf	??___ftdiv+3
  9733  03F9  0840               	movf	??___ftdiv+3,w
  9734  03FA  00C6               	movwf	___ftdiv@sign
  9735  03FB  0846               	movf	___ftdiv@sign,w
  9736  03FC  1D03               	btfss	3,2
  9737  03FD  2C05               	goto	i1l2609
  9738  03FE  3000               	movlw	0
  9739  03FF  00B7               	movwf	?___ftdiv
  9740  0400  3000               	movlw	0
  9741  0401  00B8               	movwf	?___ftdiv+1
  9742  0402  3000               	movlw	0
  9743  0403  00B9               	movwf	?___ftdiv+2
  9744  0404  0008               	return
  9745  0405                     i1l2609:	
  9746  0405  3000               	movlw	0
  9747  0406  00C2               	movwf	___ftdiv@f3
  9748  0407  3000               	movlw	0
  9749  0408  00C3               	movwf	___ftdiv@f3+1
  9750  0409  3000               	movlw	0
  9751  040A  00C4               	movwf	___ftdiv@f3+2
  9752  040B  3089               	movlw	137
  9753  040C  0746               	addwf	___ftdiv@sign,w
  9754  040D  00BD               	movwf	??___ftdiv
  9755  040E  083D               	movf	??___ftdiv,w
  9756  040F  02C5               	subwf	___ftdiv@exp,f
  9757  0410  083A               	movf	___ftdiv@f1,w
  9758  0411  00BD               	movwf	??___ftdiv
  9759  0412  083B               	movf	___ftdiv@f1+1,w
  9760  0413  00BE               	movwf	??___ftdiv+1
  9761  0414  083C               	movf	___ftdiv@f1+2,w
  9762  0415  00BF               	movwf	??___ftdiv+2
  9763  0416  3010               	movlw	16
  9764  0417                     u246_25:	
  9765  0417  36BF               	lsrf	??___ftdiv+2,f
  9766  0418  0CBE               	rrf	??___ftdiv+1,f
  9767  0419  0CBD               	rrf	??___ftdiv,f
  9768  041A  0B89               	decfsz	9,f
  9769  041B  2C17               	goto	u246_25
  9770  041C  083D               	movf	??___ftdiv,w
  9771  041D  00C0               	movwf	??___ftdiv+3
  9772  041E  0840               	movf	??___ftdiv+3,w
  9773  041F  00C6               	movwf	___ftdiv@sign
  9774  0420  0837               	movf	___ftdiv@f2,w
  9775  0421  00BD               	movwf	??___ftdiv
  9776  0422  0838               	movf	___ftdiv@f2+1,w
  9777  0423  00BE               	movwf	??___ftdiv+1
  9778  0424  0839               	movf	___ftdiv@f2+2,w
  9779  0425  00BF               	movwf	??___ftdiv+2
  9780  0426  3010               	movlw	16
  9781  0427                     u247_25:	
  9782  0427  36BF               	lsrf	??___ftdiv+2,f
  9783  0428  0CBE               	rrf	??___ftdiv+1,f
  9784  0429  0CBD               	rrf	??___ftdiv,f
  9785  042A  0B89               	decfsz	9,f
  9786  042B  2C27               	goto	u247_25
  9787  042C  083D               	movf	??___ftdiv,w
  9788  042D  00C0               	movwf	??___ftdiv+3
  9789  042E  0840               	movf	??___ftdiv+3,w
  9790  042F  06C6               	xorwf	___ftdiv@sign,f
  9791  0430  3080               	movlw	128
  9792  0431  00BD               	movwf	??___ftdiv
  9793  0432  083D               	movf	??___ftdiv,w
  9794  0433  05C6               	andwf	___ftdiv@sign,f
  9795  0434  17BB               	bsf	___ftdiv@f1+1,7
  9796  0435  30FF               	movlw	255
  9797  0436  05BA               	andwf	___ftdiv@f1,f
  9798  0437  30FF               	movlw	255
  9799  0438  05BB               	andwf	___ftdiv@f1+1,f
  9800  0439  3000               	movlw	0
  9801  043A  05BC               	andwf	___ftdiv@f1+2,f
  9802  043B  17B8               	bsf	___ftdiv@f2+1,7
  9803  043C  30FF               	movlw	255
  9804  043D  05B7               	andwf	___ftdiv@f2,f
  9805  043E  30FF               	movlw	255
  9806  043F  05B8               	andwf	___ftdiv@f2+1,f
  9807  0440  3000               	movlw	0
  9808  0441  05B9               	andwf	___ftdiv@f2+2,f
  9809  0442  3018               	movlw	24
  9810  0443  00BD               	movwf	??___ftdiv
  9811  0444  083D               	movf	??___ftdiv,w
  9812  0445  00C1               	movwf	___ftdiv@cntr
  9813  0446                     i1l2623:	
  9814  0446  3001               	movlw	1
  9815  0447                     u248_25:	
  9816  0447  35C2               	lslf	___ftdiv@f3,f
  9817  0448  0DC3               	rlf	___ftdiv@f3+1,f
  9818  0449  0DC4               	rlf	___ftdiv@f3+2,f
  9819  044A  0B89               	decfsz	9,f
  9820  044B  2C47               	goto	u248_25
  9821  044C  0839               	movf	___ftdiv@f2+2,w
  9822  044D  023C               	subwf	___ftdiv@f1+2,w
  9823  044E  1D03               	skipz
  9824  044F  2C56               	goto	u249_25
  9825  0450  0838               	movf	___ftdiv@f2+1,w
  9826  0451  023B               	subwf	___ftdiv@f1+1,w
  9827  0452  1D03               	skipz
  9828  0453  2C56               	goto	u249_25
  9829  0454  0837               	movf	___ftdiv@f2,w
  9830  0455  023A               	subwf	___ftdiv@f1,w
  9831  0456                     u249_25:	
  9832  0456  1C03               	skipc
  9833  0457  2C5F               	goto	i1l2631
  9834  0458  0837               	movf	___ftdiv@f2,w
  9835  0459  02BA               	subwf	___ftdiv@f1,f
  9836  045A  0838               	movf	___ftdiv@f2+1,w
  9837  045B  3BBB               	subwfb	___ftdiv@f1+1,f
  9838  045C  0839               	movf	___ftdiv@f2+2,w
  9839  045D  3BBC               	subwfb	___ftdiv@f1+2,f
  9840  045E  1442               	bsf	___ftdiv@f3,0
  9841  045F                     i1l2631:	
  9842  045F  3001               	movlw	1
  9843  0460                     u250_25:	
  9844  0460  35BA               	lslf	___ftdiv@f1,f
  9845  0461  0DBB               	rlf	___ftdiv@f1+1,f
  9846  0462  0DBC               	rlf	___ftdiv@f1+2,f
  9847  0463  0B89               	decfsz	9,f
  9848  0464  2C60               	goto	u250_25
  9849  0465  3001               	movlw	1
  9850  0466  02C1               	subwf	___ftdiv@cntr,f
  9851  0467  1D03               	btfss	3,2
  9852  0468  2C46               	goto	i1l2623
  9853  0469  0842               	movf	___ftdiv@f3,w
  9854  046A  00F0               	movwf	___ftpack@arg
  9855  046B  0843               	movf	___ftdiv@f3+1,w
  9856  046C  00F1               	movwf	___ftpack@arg+1
  9857  046D  0844               	movf	___ftdiv@f3+2,w
  9858  046E  00F2               	movwf	___ftpack@arg+2
  9859  046F  0845               	movf	___ftdiv@exp,w
  9860  0470  00BD               	movwf	??___ftdiv
  9861  0471  083D               	movf	??___ftdiv,w
  9862  0472  00F3               	movwf	___ftpack@exp
  9863  0473  0846               	movf	___ftdiv@sign,w
  9864  0474  00BE               	movwf	??___ftdiv+1
  9865  0475  083E               	movf	??___ftdiv+1,w
  9866  0476  00F4               	movwf	___ftpack@sign
  9867  0477  3186  26ED         	fcall	___ftpack
  9868  0479  0870               	movf	?___ftpack,w
  9869  047A  0140               	movlb	0	; select bank0
  9870  047B  00B7               	movwf	?___ftdiv
  9871  047C  0871               	movf	?___ftpack+1,w
  9872  047D  00B8               	movwf	?___ftdiv+1
  9873  047E  0872               	movf	?___ftpack+2,w
  9874  047F  00B9               	movwf	?___ftdiv+2
  9875  0480  0008               	return
  9876  0481                     __end_of___ftdiv:	
  9877                           
  9878                           	psect	text52
  9879  0BFD                     __ptext52:	
  9880 ;; *************** function ___awtoft *****************
  9881 ;; Defined at:
  9882 ;;		line 32 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9883 ;; Parameters:    Size  Location     Type
  9884 ;;  c               2    8[COMMON] int 
  9885 ;; Auto vars:     Size  Location     Type
  9886 ;;  sign            1   13[COMMON] unsigned char 
  9887 ;; Return value:  Size  Location     Type
  9888 ;;                  3    8[COMMON] float 
  9889 ;; Registers used:
  9890 ;;		wreg, status,2, status,0, pclath, cstack
  9891 ;; Tracked objects:
  9892 ;;		On entry : 0/0
  9893 ;;		On exit  : 0/0
  9894 ;;		Unchanged: 0/0
  9895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9896 ;;      Params:         3       0       0       0       0       0       0       0
  9897 ;;      Locals:         1       0       0       0       0       0       0       0
  9898 ;;      Temps:          2       0       0       0       0       0       0       0
  9899 ;;      Totals:         6       0       0       0       0       0       0       0
  9900 ;;Total ram usage:        6 bytes
  9901 ;; Hardware stack levels used:    1
  9902 ;; Hardware stack levels required when called:    1
  9903 ;; This function calls:
  9904 ;;		___ftpack
  9905 ;; This function is called by:
  9906 ;;		_Mpu6500GyroAngle
  9907 ;; This function uses a non-reentrant model
  9908 ;;
  9909                           
  9910                           
  9911                           ;psect for function ___awtoft
  9912  0BFD                     ___awtoft:	
  9913                           
  9914                           ;incstack = 0
  9915                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9916  0BFD  01FD               	clrf	___awtoft@sign
  9917  0BFE  1FF9               	btfss	___awtoft@c+1,7
  9918  0BFF  2C07               	goto	i1l2523
  9919  0C00  09F8               	comf	___awtoft@c,f
  9920  0C01  09F9               	comf	___awtoft@c+1,f
  9921  0C02  0AF8               	incf	___awtoft@c,f
  9922  0C03  1903               	skipnz
  9923  0C04  0AF9               	incf	___awtoft@c+1,f
  9924  0C05  01FD               	clrf	___awtoft@sign
  9925  0C06  0AFD               	incf	___awtoft@sign,f
  9926  0C07                     i1l2523:	
  9927  0C07  0878               	movf	___awtoft@c,w
  9928  0C08  00F0               	movwf	___ftpack@arg
  9929  0C09  0879               	movf	___awtoft@c+1,w
  9930  0C0A  00F1               	movwf	___ftpack@arg+1
  9931  0C0B  01F2               	clrf	___ftpack@arg+2
  9932  0C0C  308E               	movlw	142
  9933  0C0D  00FB               	movwf	??___awtoft
  9934  0C0E  087B               	movf	??___awtoft,w
  9935  0C0F  00F3               	movwf	___ftpack@exp
  9936  0C10  087D               	movf	___awtoft@sign,w
  9937  0C11  00FC               	movwf	??___awtoft+1
  9938  0C12  087C               	movf	??___awtoft+1,w
  9939  0C13  00F4               	movwf	___ftpack@sign
  9940  0C14  3186  26ED         	fcall	___ftpack
  9941  0C16  0870               	movf	?___ftpack,w
  9942  0C17  00F8               	movwf	?___awtoft
  9943  0C18  0871               	movf	?___ftpack+1,w
  9944  0C19  00F9               	movwf	?___awtoft+1
  9945  0C1A  0872               	movf	?___ftpack+2,w
  9946  0C1B  00FA               	movwf	?___awtoft+2
  9947  0C1C  0008               	return
  9948  0C1D                     __end_of___awtoft:	
  9949                           
  9950                           	psect	text53
  9951  0751                     __ptext53:	
  9952 ;; *************** function _AngleCalcu *****************
  9953 ;; Defined at:
  9954 ;;		line 91 in file "src/filter.c"
  9955 ;; Parameters:    Size  Location     Type
  9956 ;;  angle_m         3   23[BANK0 ] float 
  9957 ;;  gyro_m          3   26[BANK0 ] float 
  9958 ;;  p               1   29[BANK0 ] PTR float 
  9959 ;;		 -> filter_result(6), 
  9960 ;; Auto vars:     Size  Location     Type
  9961 ;;		None
  9962 ;; Return value:  Size  Location     Type
  9963 ;;                  1    wreg      void 
  9964 ;; Registers used:
  9965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/0
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9971 ;;      Params:         0       7       0       0       0       0       0       0
  9972 ;;      Locals:         0       0       0       0       0       0       0       0
  9973 ;;      Temps:          0       0       0       0       0       0       0       0
  9974 ;;      Totals:         0       7       0       0       0       0       0       0
  9975 ;;Total ram usage:        7 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; Hardware stack levels required when called:    2
  9978 ;; This function calls:
  9979 ;;		___ftadd
  9980 ;;		___ftmul
  9981 ;;		i1___ftge
  9982 ;; This function is called by:
  9983 ;;		_TMR0_Task
  9984 ;; This function uses a non-reentrant model
  9985 ;;
  9986                           
  9987                           
  9988                           ;psect for function _AngleCalcu
  9989  0751                     _AngleCalcu:	
  9990                           
  9991                           ;filter.c: 99: if((gyro_m >= 0.1)||(gyro_m <= -0.1))
  9992                           
  9993                           ;incstack = 0
  9994                           ; Regs used in _AngleCalcu: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9995  0751  0140               	movlb	0	; select bank0
  9996  0752  083A               	movf	AngleCalcu@gyro_m,w
  9997  0753  00F0               	movwf	i1___ftge@ff1
  9998  0754  083B               	movf	AngleCalcu@gyro_m+1,w
  9999  0755  00F1               	movwf	i1___ftge@ff1+1
 10000  0756  083C               	movf	AngleCalcu@gyro_m+2,w
 10001  0757  00F2               	movwf	i1___ftge@ff1+2
 10002  0758  30CD               	movlw	205
 10003  0759  00F3               	movwf	i1___ftge@ff2
 10004  075A  30CC               	movlw	204
 10005  075B  00F4               	movwf	i1___ftge@ff2+1
 10006  075C  303D               	movlw	61
 10007  075D  00F5               	movwf	i1___ftge@ff2+2
 10008  075E  318D  25F9  3187   	fcall	i1___ftge
 10009  0761  1803               	btfsc	3,0
 10010  0762  2F75               	goto	i1l2853
 10011  0763  30CD               	movlw	205
 10012  0764  00F0               	movwf	i1___ftge@ff1
 10013  0765  30CC               	movlw	204
 10014  0766  00F1               	movwf	i1___ftge@ff1+1
 10015  0767  30BD               	movlw	189
 10016  0768  00F2               	movwf	i1___ftge@ff1+2
 10017  0769  0140               	movlb	0	; select bank0
 10018  076A  083A               	movf	AngleCalcu@gyro_m,w
 10019  076B  00F3               	movwf	i1___ftge@ff2
 10020  076C  083B               	movf	AngleCalcu@gyro_m+1,w
 10021  076D  00F4               	movwf	i1___ftge@ff2+1
 10022  076E  083C               	movf	AngleCalcu@gyro_m+2,w
 10023  076F  00F5               	movwf	i1___ftge@ff2+2
 10024  0770  318D  25F9  3187   	fcall	i1___ftge
 10025  0773  1C03               	btfss	3,0
 10026  0774  2F9B               	goto	i1l2855
 10027  0775                     i1l2853:	
 10028                           
 10029                           ;filter.c: 100: {;filter.c: 101: Angle_t = Angle_t + + gyro_m*0.01;
 10030  0775  0140               	movlb	0	; select bank0
 10031  0776  085F               	movf	_Angle_t,w
 10032  0777  00AA               	movwf	___ftadd@f1
 10033  0778  0860               	movf	_Angle_t+1,w
 10034  0779  00AB               	movwf	___ftadd@f1+1
 10035  077A  0861               	movf	_Angle_t+2,w
 10036  077B  00AC               	movwf	___ftadd@f1+2
 10037  077C  30D7               	movlw	215
 10038  077D  00F8               	movwf	___ftmul@f1
 10039  077E  3023               	movlw	35
 10040  077F  00F9               	movwf	___ftmul@f1+1
 10041  0780  303C               	movlw	60
 10042  0781  00FA               	movwf	___ftmul@f1+2
 10043  0782  083A               	movf	AngleCalcu@gyro_m,w
 10044  0783  00FB               	movwf	___ftmul@f2
 10045  0784  083B               	movf	AngleCalcu@gyro_m+1,w
 10046  0785  00FC               	movwf	___ftmul@f2+1
 10047  0786  083C               	movf	AngleCalcu@gyro_m+2,w
 10048  0787  00FD               	movwf	___ftmul@f2+2
 10049  0788  3183  2325  3187   	fcall	___ftmul
 10050  078B  0878               	movf	?___ftmul,w
 10051  078C  0140               	movlb	0	; select bank0
 10052  078D  00AD               	movwf	___ftadd@f2
 10053  078E  0879               	movf	?___ftmul+1,w
 10054  078F  00AE               	movwf	___ftadd@f2+1
 10055  0790  087A               	movf	?___ftmul+2,w
 10056  0791  00AF               	movwf	___ftadd@f2+2
 10057  0792  3180  2069         	fcall	___ftadd
 10058  0794  0140               	movlb	0	; select bank0
 10059  0795  082A               	movf	?___ftadd,w
 10060  0796  00DF               	movwf	_Angle_t
 10061  0797  082B               	movf	?___ftadd+1,w
 10062  0798  00E0               	movwf	_Angle_t+1
 10063  0799  082C               	movf	?___ftadd+2,w
 10064  079A  00E1               	movwf	_Angle_t+2
 10065  079B                     i1l2855:	
 10066                           
 10067                           ;filter.c: 102: };filter.c: 103: p[0] = Angle_t;
 10068  079B  0140               	movlb	0	; select bank0
 10069  079C  083D               	movf	AngleCalcu@p,w
 10070  079D  0086               	movwf	6
 10071  079E  0187               	clrf	7
 10072  079F  085F               	movf	_Angle_t,w
 10073  07A0  3FC0               	movwi [0]fsr1
 10074  07A1  0860               	movf	_Angle_t+1,w
 10075  07A2  3FC1               	movwi [1]fsr1
 10076  07A3  0861               	movf	_Angle_t+2,w
 10077  07A4  3FC2               	movwi [2]fsr1
 10078                           
 10079                           ;filter.c: 104: p[1] = gyro_m;
 10080  07A5  083D               	movf	AngleCalcu@p,w
 10081  07A6  3E03               	addlw	3
 10082  07A7  0086               	movwf	6
 10083  07A8  0187               	clrf	7
 10084  07A9  083A               	movf	AngleCalcu@gyro_m,w
 10085  07AA  3FC0               	movwi [0]fsr1
 10086  07AB  083B               	movf	AngleCalcu@gyro_m+1,w
 10087  07AC  3FC1               	movwi [1]fsr1
 10088  07AD  083C               	movf	AngleCalcu@gyro_m+2,w
 10089  07AE  3FC2               	movwi [2]fsr1
 10090  07AF  0008               	return
 10091  07B0                     __end_of_AngleCalcu:	
 10092                           
 10093                           	psect	text54
 10094  0DF9                     __ptext54:	
 10095 ;; *************** function i1___ftge *****************
 10096 ;; Defined at:
 10097 ;;		line 4 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;  ff1             3    0[COMMON] float 
 10100 ;;  ff2             3    3[COMMON] float 
 10101 ;; Auto vars:     Size  Location     Type
 10102 ;;		None
 10103 ;; Return value:  Size  Location     Type
 10104 ;;		None               void
 10105 ;; Registers used:
 10106 ;;		wreg, status,2, status,0
 10107 ;; Tracked objects:
 10108 ;;		On entry : 0/0
 10109 ;;		On exit  : 0/0
 10110 ;;		Unchanged: 0/0
 10111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10112 ;;      Params:         6       0       0       0       0       0       0       0
 10113 ;;      Locals:         0       0       0       0       0       0       0       0
 10114 ;;      Temps:          3       0       0       0       0       0       0       0
 10115 ;;      Totals:         9       0       0       0       0       0       0       0
 10116 ;;Total ram usage:        9 bytes
 10117 ;; Hardware stack levels used:    1
 10118 ;; This function calls:
 10119 ;;		Nothing
 10120 ;; This function is called by:
 10121 ;;		_AngleCalcu
 10122 ;; This function uses a non-reentrant model
 10123 ;;
 10124                           
 10125                           
 10126                           ;psect for function i1___ftge
 10127  0DF9                     i1___ftge:	
 10128                           
 10129                           ;incstack = 0
 10130                           ; Regs used in i1___ftge: [wreg+status,2+status,0]
 10131  0DF9  1FF2               	btfss	i1___ftge@ff1+2,7
 10132  0DFA  2E0F               	goto	i1l2751
 10133  0DFB  0970               	comf	i1___ftge@ff1,w
 10134  0DFC  00F6               	movwf	??i1___ftge
 10135  0DFD  0971               	comf	i1___ftge@ff1+1,w
 10136  0DFE  00F7               	movwf	??i1___ftge+1
 10137  0DFF  0972               	comf	i1___ftge@ff1+2,w
 10138  0E00  00F8               	movwf	??i1___ftge+2
 10139  0E01  0AF6               	incf	??i1___ftge,f
 10140  0E02  1903               	skipnz
 10141  0E03  0AF7               	incf	??i1___ftge+1,f
 10142  0E04  1903               	skipnz
 10143  0E05  0AF8               	incf	??i1___ftge+2,f
 10144  0E06  3000               	movlw	0
 10145  0E07  0776               	addwf	??i1___ftge,w
 10146  0E08  00F0               	movwf	i1___ftge@ff1
 10147  0E09  3000               	movlw	0
 10148  0E0A  3D77               	addwfc	??i1___ftge+1,w
 10149  0E0B  00F1               	movwf	i1___ftge@ff1+1
 10150  0E0C  3080               	movlw	128
 10151  0E0D  3D78               	addwfc	??i1___ftge+2,w
 10152  0E0E  00F2               	movwf	i1___ftge@ff1+2
 10153  0E0F                     i1l2751:	
 10154  0E0F  1FF5               	btfss	i1___ftge@ff2+2,7
 10155  0E10  2E25               	goto	i1l2755
 10156  0E11  0973               	comf	i1___ftge@ff2,w
 10157  0E12  00F6               	movwf	??i1___ftge
 10158  0E13  0974               	comf	i1___ftge@ff2+1,w
 10159  0E14  00F7               	movwf	??i1___ftge+1
 10160  0E15  0975               	comf	i1___ftge@ff2+2,w
 10161  0E16  00F8               	movwf	??i1___ftge+2
 10162  0E17  0AF6               	incf	??i1___ftge,f
 10163  0E18  1903               	skipnz
 10164  0E19  0AF7               	incf	??i1___ftge+1,f
 10165  0E1A  1903               	skipnz
 10166  0E1B  0AF8               	incf	??i1___ftge+2,f
 10167  0E1C  3000               	movlw	0
 10168  0E1D  0776               	addwf	??i1___ftge,w
 10169  0E1E  00F3               	movwf	i1___ftge@ff2
 10170  0E1F  3000               	movlw	0
 10171  0E20  3D77               	addwfc	??i1___ftge+1,w
 10172  0E21  00F4               	movwf	i1___ftge@ff2+1
 10173  0E22  3080               	movlw	128
 10174  0E23  3D78               	addwfc	??i1___ftge+2,w
 10175  0E24  00F5               	movwf	i1___ftge@ff2+2
 10176  0E25                     i1l2755:	
 10177  0E25  3080               	movlw	128
 10178  0E26  06F2               	xorwf	i1___ftge@ff1+2,f
 10179  0E27  3080               	movlw	128
 10180  0E28  06F5               	xorwf	i1___ftge@ff2+2,f
 10181  0E29  0875               	movf	i1___ftge@ff2+2,w
 10182  0E2A  0272               	subwf	i1___ftge@ff1+2,w
 10183  0E2B  1D03               	skipz
 10184  0E2C  0008               	return
 10185  0E2D  0874               	movf	i1___ftge@ff2+1,w
 10186  0E2E  0271               	subwf	i1___ftge@ff1+1,w
 10187  0E2F  1D03               	skipz
 10188  0E30  0008               	return
 10189  0E31  0873               	movf	i1___ftge@ff2,w
 10190  0E32  0270               	subwf	i1___ftge@ff1,w
 10191  0E33  0008               	return
 10192  0E34                     __end_ofi1___ftge:	
 10193                           
 10194                           	psect	text55
 10195  0325                     __ptext55:	
 10196 ;; *************** function ___ftmul *****************
 10197 ;; Defined at:
 10198 ;;		line 62 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
 10199 ;; Parameters:    Size  Location     Type
 10200 ;;  f1              3    8[COMMON] float 
 10201 ;;  f2              3   11[COMMON] float 
 10202 ;; Auto vars:     Size  Location     Type
 10203 ;;  f3_as_produc    3    5[BANK0 ] unsigned um
 10204 ;;  sign            1    9[BANK0 ] unsigned char 
 10205 ;;  cntr            1    8[BANK0 ] unsigned char 
 10206 ;;  exp             1    4[BANK0 ] unsigned char 
 10207 ;; Return value:  Size  Location     Type
 10208 ;;                  3    8[COMMON] float 
 10209 ;; Registers used:
 10210 ;;		wreg, status,2, status,0, pclath, cstack
 10211 ;; Tracked objects:
 10212 ;;		On entry : 0/0
 10213 ;;		On exit  : 0/0
 10214 ;;		Unchanged: 0/0
 10215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10216 ;;      Params:         6       0       0       0       0       0       0       0
 10217 ;;      Locals:         0       6       0       0       0       0       0       0
 10218 ;;      Temps:          0       4       0       0       0       0       0       0
 10219 ;;      Totals:         6      10       0       0       0       0       0       0
 10220 ;;Total ram usage:       16 bytes
 10221 ;; Hardware stack levels used:    1
 10222 ;; Hardware stack levels required when called:    1
 10223 ;; This function calls:
 10224 ;;		___ftpack
 10225 ;; This function is called by:
 10226 ;;		_AngleCalcu
 10227 ;; This function uses a non-reentrant model
 10228 ;;
 10229                           
 10230                           
 10231                           ;psect for function ___ftmul
 10232  0325                     ___ftmul:	
 10233                           
 10234                           ;incstack = 0
 10235                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10236  0325  0878               	movf	___ftmul@f1,w
 10237  0326  0140               	movlb	0	; select bank0
 10238  0327  00A0               	movwf	??___ftmul
 10239  0328  0879               	movf	___ftmul@f1+1,w
 10240  0329  00A1               	movwf	??___ftmul+1
 10241  032A  087A               	movf	___ftmul@f1+2,w
 10242  032B  00A2               	movwf	??___ftmul+2
 10243  032C  1003               	clrc
 10244  032D  0D21               	rlf	??___ftmul+1,w
 10245  032E  0D22               	rlf	??___ftmul+2,w
 10246  032F  00A3               	movwf	??___ftmul+3
 10247  0330  0823               	movf	??___ftmul+3,w
 10248  0331  00A4               	movwf	___ftmul@exp
 10249  0332  0824               	movf	___ftmul@exp,w
 10250  0333  1D03               	btfss	3,2
 10251  0334  2B3C               	goto	i1l2645
 10252  0335  3000               	movlw	0
 10253  0336  00F8               	movwf	?___ftmul
 10254  0337  3000               	movlw	0
 10255  0338  00F9               	movwf	?___ftmul+1
 10256  0339  3000               	movlw	0
 10257  033A  00FA               	movwf	?___ftmul+2
 10258  033B  0008               	return
 10259  033C                     i1l2645:	
 10260  033C  087B               	movf	___ftmul@f2,w
 10261  033D  00A0               	movwf	??___ftmul
 10262  033E  087C               	movf	___ftmul@f2+1,w
 10263  033F  00A1               	movwf	??___ftmul+1
 10264  0340  087D               	movf	___ftmul@f2+2,w
 10265  0341  00A2               	movwf	??___ftmul+2
 10266  0342  1003               	clrc
 10267  0343  0D21               	rlf	??___ftmul+1,w
 10268  0344  0D22               	rlf	??___ftmul+2,w
 10269  0345  00A3               	movwf	??___ftmul+3
 10270  0346  0823               	movf	??___ftmul+3,w
 10271  0347  00A9               	movwf	___ftmul@sign
 10272  0348  0829               	movf	___ftmul@sign,w
 10273  0349  1D03               	btfss	3,2
 10274  034A  2B52               	goto	i1l2651
 10275  034B  3000               	movlw	0
 10276  034C  00F8               	movwf	?___ftmul
 10277  034D  3000               	movlw	0
 10278  034E  00F9               	movwf	?___ftmul+1
 10279  034F  3000               	movlw	0
 10280  0350  00FA               	movwf	?___ftmul+2
 10281  0351  0008               	return
 10282  0352                     i1l2651:	
 10283  0352  0829               	movf	___ftmul@sign,w
 10284  0353  3E7B               	addlw	123
 10285  0354  00A0               	movwf	??___ftmul
 10286  0355  0820               	movf	??___ftmul,w
 10287  0356  07A4               	addwf	___ftmul@exp,f
 10288  0357  0878               	movf	___ftmul@f1,w
 10289  0358  00A0               	movwf	??___ftmul
 10290  0359  0879               	movf	___ftmul@f1+1,w
 10291  035A  00A1               	movwf	??___ftmul+1
 10292  035B  087A               	movf	___ftmul@f1+2,w
 10293  035C  00A2               	movwf	??___ftmul+2
 10294  035D  3010               	movlw	16
 10295  035E                     u254_25:	
 10296  035E  36A2               	lsrf	??___ftmul+2,f
 10297  035F  0CA1               	rrf	??___ftmul+1,f
 10298  0360  0CA0               	rrf	??___ftmul,f
 10299  0361  0B89               	decfsz	9,f
 10300  0362  2B5E               	goto	u254_25
 10301  0363  0820               	movf	??___ftmul,w
 10302  0364  00A3               	movwf	??___ftmul+3
 10303  0365  0823               	movf	??___ftmul+3,w
 10304  0366  00A9               	movwf	___ftmul@sign
 10305  0367  087B               	movf	___ftmul@f2,w
 10306  0368  00A0               	movwf	??___ftmul
 10307  0369  087C               	movf	___ftmul@f2+1,w
 10308  036A  00A1               	movwf	??___ftmul+1
 10309  036B  087D               	movf	___ftmul@f2+2,w
 10310  036C  00A2               	movwf	??___ftmul+2
 10311  036D  3010               	movlw	16
 10312  036E                     u255_25:	
 10313  036E  36A2               	lsrf	??___ftmul+2,f
 10314  036F  0CA1               	rrf	??___ftmul+1,f
 10315  0370  0CA0               	rrf	??___ftmul,f
 10316  0371  0B89               	decfsz	9,f
 10317  0372  2B6E               	goto	u255_25
 10318  0373  0820               	movf	??___ftmul,w
 10319  0374  00A3               	movwf	??___ftmul+3
 10320  0375  0823               	movf	??___ftmul+3,w
 10321  0376  06A9               	xorwf	___ftmul@sign,f
 10322  0377  3080               	movlw	128
 10323  0378  00A0               	movwf	??___ftmul
 10324  0379  0820               	movf	??___ftmul,w
 10325  037A  05A9               	andwf	___ftmul@sign,f
 10326  037B  17F9               	bsf	___ftmul@f1+1,7
 10327  037C  17FC               	bsf	___ftmul@f2+1,7
 10328  037D  30FF               	movlw	255
 10329  037E  05FB               	andwf	___ftmul@f2,f
 10330  037F  30FF               	movlw	255
 10331  0380  05FC               	andwf	___ftmul@f2+1,f
 10332  0381  3000               	movlw	0
 10333  0382  05FD               	andwf	___ftmul@f2+2,f
 10334  0383  3000               	movlw	0
 10335  0384  00A5               	movwf	___ftmul@f3_as_product
 10336  0385  3000               	movlw	0
 10337  0386  00A6               	movwf	___ftmul@f3_as_product+1
 10338  0387  3000               	movlw	0
 10339  0388  00A7               	movwf	___ftmul@f3_as_product+2
 10340  0389  3007               	movlw	7
 10341  038A  00A0               	movwf	??___ftmul
 10342  038B  0820               	movf	??___ftmul,w
 10343  038C  00A8               	movwf	___ftmul@cntr
 10344  038D                     i1l2663:	
 10345  038D  1C78               	btfss	___ftmul@f1,0
 10346  038E  2B95               	goto	i1l2667
 10347  038F  087B               	movf	___ftmul@f2,w
 10348  0390  07A5               	addwf	___ftmul@f3_as_product,f
 10349  0391  087C               	movf	___ftmul@f2+1,w
 10350  0392  3DA6               	addwfc	___ftmul@f3_as_product+1,f
 10351  0393  087D               	movf	___ftmul@f2+2,w
 10352  0394  3DA7               	addwfc	___ftmul@f3_as_product+2,f
 10353  0395                     i1l2667:	
 10354  0395  3001               	movlw	1
 10355  0396                     u257_25:	
 10356  0396  36FA               	lsrf	___ftmul@f1+2,f
 10357  0397  0CF9               	rrf	___ftmul@f1+1,f
 10358  0398  0CF8               	rrf	___ftmul@f1,f
 10359  0399  0B89               	decfsz	9,f
 10360  039A  2B96               	goto	u257_25
 10361  039B  3001               	movlw	1
 10362  039C                     u258_25:	
 10363  039C  35FB               	lslf	___ftmul@f2,f
 10364  039D  0DFC               	rlf	___ftmul@f2+1,f
 10365  039E  0DFD               	rlf	___ftmul@f2+2,f
 10366  039F  0B89               	decfsz	9,f
 10367  03A0  2B9C               	goto	u258_25
 10368  03A1  3001               	movlw	1
 10369  03A2  02A8               	subwf	___ftmul@cntr,f
 10370  03A3  1D03               	btfss	3,2
 10371  03A4  2B8D               	goto	i1l2663
 10372  03A5  3009               	movlw	9
 10373  03A6  00A0               	movwf	??___ftmul
 10374  03A7  0820               	movf	??___ftmul,w
 10375  03A8  00A8               	movwf	___ftmul@cntr
 10376  03A9                     i1l2675:	
 10377  03A9  1C78               	btfss	___ftmul@f1,0
 10378  03AA  2BB1               	goto	i1l2679
 10379  03AB  087B               	movf	___ftmul@f2,w
 10380  03AC  07A5               	addwf	___ftmul@f3_as_product,f
 10381  03AD  087C               	movf	___ftmul@f2+1,w
 10382  03AE  3DA6               	addwfc	___ftmul@f3_as_product+1,f
 10383  03AF  087D               	movf	___ftmul@f2+2,w
 10384  03B0  3DA7               	addwfc	___ftmul@f3_as_product+2,f
 10385  03B1                     i1l2679:	
 10386  03B1  3001               	movlw	1
 10387  03B2                     u261_25:	
 10388  03B2  36FA               	lsrf	___ftmul@f1+2,f
 10389  03B3  0CF9               	rrf	___ftmul@f1+1,f
 10390  03B4  0CF8               	rrf	___ftmul@f1,f
 10391  03B5  0B89               	decfsz	9,f
 10392  03B6  2BB2               	goto	u261_25
 10393  03B7  3001               	movlw	1
 10394  03B8                     u262_25:	
 10395  03B8  36A7               	lsrf	___ftmul@f3_as_product+2,f
 10396  03B9  0CA6               	rrf	___ftmul@f3_as_product+1,f
 10397  03BA  0CA5               	rrf	___ftmul@f3_as_product,f
 10398  03BB  0B89               	decfsz	9,f
 10399  03BC  2BB8               	goto	u262_25
 10400  03BD  3001               	movlw	1
 10401  03BE  02A8               	subwf	___ftmul@cntr,f
 10402  03BF  1D03               	btfss	3,2
 10403  03C0  2BA9               	goto	i1l2675
 10404  03C1  0825               	movf	___ftmul@f3_as_product,w
 10405  03C2  00F0               	movwf	___ftpack@arg
 10406  03C3  0826               	movf	___ftmul@f3_as_product+1,w
 10407  03C4  00F1               	movwf	___ftpack@arg+1
 10408  03C5  0827               	movf	___ftmul@f3_as_product+2,w
 10409  03C6  00F2               	movwf	___ftpack@arg+2
 10410  03C7  0824               	movf	___ftmul@exp,w
 10411  03C8  00A0               	movwf	??___ftmul
 10412  03C9  0820               	movf	??___ftmul,w
 10413  03CA  00F3               	movwf	___ftpack@exp
 10414  03CB  0829               	movf	___ftmul@sign,w
 10415  03CC  00A1               	movwf	??___ftmul+1
 10416  03CD  0821               	movf	??___ftmul+1,w
 10417  03CE  00F4               	movwf	___ftpack@sign
 10418  03CF  3186  26ED         	fcall	___ftpack
 10419  03D1  0870               	movf	?___ftpack,w
 10420  03D2  00F8               	movwf	?___ftmul
 10421  03D3  0871               	movf	?___ftpack+1,w
 10422  03D4  00F9               	movwf	?___ftmul+1
 10423  03D5  0872               	movf	?___ftpack+2,w
 10424  03D6  00FA               	movwf	?___ftmul+2
 10425  03D7  0008               	return
 10426  03D8                     __end_of___ftmul:	
 10427                           
 10428                           	psect	text56
 10429  0069                     __ptext56:	
 10430 ;; *************** function ___ftadd *****************
 10431 ;; Defined at:
 10432 ;;		line 86 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
 10433 ;; Parameters:    Size  Location     Type
 10434 ;;  f1              3   10[BANK0 ] float 
 10435 ;;  f2              3   13[BANK0 ] float 
 10436 ;; Auto vars:     Size  Location     Type
 10437 ;;  exp1            1   22[BANK0 ] unsigned char 
 10438 ;;  exp2            1   21[BANK0 ] unsigned char 
 10439 ;;  sign            1   20[BANK0 ] unsigned char 
 10440 ;; Return value:  Size  Location     Type
 10441 ;;                  3   10[BANK0 ] float 
 10442 ;; Registers used:
 10443 ;;		wreg, status,2, status,0, pclath, cstack
 10444 ;; Tracked objects:
 10445 ;;		On entry : 0/0
 10446 ;;		On exit  : 0/0
 10447 ;;		Unchanged: 0/0
 10448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10449 ;;      Params:         0       6       0       0       0       0       0       0
 10450 ;;      Locals:         0       3       0       0       0       0       0       0
 10451 ;;      Temps:          0       4       0       0       0       0       0       0
 10452 ;;      Totals:         0      13       0       0       0       0       0       0
 10453 ;;Total ram usage:       13 bytes
 10454 ;; Hardware stack levels used:    1
 10455 ;; Hardware stack levels required when called:    1
 10456 ;; This function calls:
 10457 ;;		___ftpack
 10458 ;; This function is called by:
 10459 ;;		_Mpu6500GyroAngle
 10460 ;;		_AngleCalcu
 10461 ;; This function uses a non-reentrant model
 10462 ;;
 10463                           
 10464                           
 10465                           ;psect for function ___ftadd
 10466  0069                     ___ftadd:	
 10467                           
 10468                           ;incstack = 0
 10469                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10470  0069  0140               	movlb	0	; select bank0
 10471  006A  082A               	movf	___ftadd@f1,w
 10472  006B  00B0               	movwf	??___ftadd
 10473  006C  082B               	movf	___ftadd@f1+1,w
 10474  006D  00B1               	movwf	??___ftadd+1
 10475  006E  082C               	movf	___ftadd@f1+2,w
 10476  006F  00B2               	movwf	??___ftadd+2
 10477  0070  1003               	clrc
 10478  0071  0D31               	rlf	??___ftadd+1,w
 10479  0072  0D32               	rlf	??___ftadd+2,w
 10480  0073  00B3               	movwf	??___ftadd+3
 10481  0074  0833               	movf	??___ftadd+3,w
 10482  0075  00B6               	movwf	___ftadd@exp1
 10483  0076  082D               	movf	___ftadd@f2,w
 10484  0077  00B0               	movwf	??___ftadd
 10485  0078  082E               	movf	___ftadd@f2+1,w
 10486  0079  00B1               	movwf	??___ftadd+1
 10487  007A  082F               	movf	___ftadd@f2+2,w
 10488  007B  00B2               	movwf	??___ftadd+2
 10489  007C  1003               	clrc
 10490  007D  0D31               	rlf	??___ftadd+1,w
 10491  007E  0D32               	rlf	??___ftadd+2,w
 10492  007F  00B3               	movwf	??___ftadd+3
 10493  0080  0833               	movf	??___ftadd+3,w
 10494  0081  00B5               	movwf	___ftadd@exp2
 10495  0082  0836               	movf	___ftadd@exp1,w
 10496  0083  1903               	btfsc	3,2
 10497  0084  2891               	goto	i1l2533
 10498  0085  0835               	movf	___ftadd@exp2,w
 10499  0086  0236               	subwf	___ftadd@exp1,w
 10500  0087  1803               	skipnc
 10501  0088  2898               	goto	i1l2537
 10502  0089  0336               	decf	___ftadd@exp1,w
 10503  008A  3AFF               	xorlw	255
 10504  008B  0735               	addwf	___ftadd@exp2,w
 10505  008C  00B0               	movwf	??___ftadd
 10506  008D  3019               	movlw	25
 10507  008E  0230               	subwf	??___ftadd,w
 10508  008F  1C03               	skipc
 10509  0090  2898               	goto	i1l2537
 10510  0091                     i1l2533:	
 10511  0091  082D               	movf	___ftadd@f2,w
 10512  0092  00AA               	movwf	?___ftadd
 10513  0093  082E               	movf	___ftadd@f2+1,w
 10514  0094  00AB               	movwf	?___ftadd+1
 10515  0095  082F               	movf	___ftadd@f2+2,w
 10516  0096  00AC               	movwf	?___ftadd+2
 10517  0097  0008               	return
 10518  0098                     i1l2537:	
 10519  0098  0835               	movf	___ftadd@exp2,w
 10520  0099  1903               	btfsc	3,2
 10521  009A  0008               	return
 10522  009B  0836               	movf	___ftadd@exp1,w
 10523  009C  0235               	subwf	___ftadd@exp2,w
 10524  009D  1803               	skipnc
 10525  009E  28A7               	goto	i1l2543
 10526  009F  0335               	decf	___ftadd@exp2,w
 10527  00A0  3AFF               	xorlw	255
 10528  00A1  0736               	addwf	___ftadd@exp1,w
 10529  00A2  00B0               	movwf	??___ftadd
 10530  00A3  3019               	movlw	25
 10531  00A4  0230               	subwf	??___ftadd,w
 10532  00A5  1803               	btfsc	3,0
 10533  00A6  0008               	return
 10534  00A7                     i1l2543:	
 10535  00A7  3006               	movlw	6
 10536  00A8  00B0               	movwf	??___ftadd
 10537  00A9  0830               	movf	??___ftadd,w
 10538  00AA  00B4               	movwf	___ftadd@sign
 10539  00AB  1BAC               	btfsc	___ftadd@f1+2,7
 10540  00AC  17B4               	bsf	___ftadd@sign,7
 10541  00AD  1BAF               	btfsc	___ftadd@f2+2,7
 10542  00AE  1734               	bsf	___ftadd@sign,6
 10543  00AF  17AB               	bsf	___ftadd@f1+1,7
 10544  00B0  30FF               	movlw	255
 10545  00B1  05AA               	andwf	___ftadd@f1,f
 10546  00B2  30FF               	movlw	255
 10547  00B3  05AB               	andwf	___ftadd@f1+1,f
 10548  00B4  3000               	movlw	0
 10549  00B5  05AC               	andwf	___ftadd@f1+2,f
 10550  00B6  17AE               	bsf	___ftadd@f2+1,7
 10551  00B7  30FF               	movlw	255
 10552  00B8  05AD               	andwf	___ftadd@f2,f
 10553  00B9  30FF               	movlw	255
 10554  00BA  05AE               	andwf	___ftadd@f2+1,f
 10555  00BB  3000               	movlw	0
 10556  00BC  05AF               	andwf	___ftadd@f2+2,f
 10557  00BD  0835               	movf	___ftadd@exp2,w
 10558  00BE  0236               	subwf	___ftadd@exp1,w
 10559  00BF  1803               	skipnc
 10560  00C0  28E3               	goto	i1l2565
 10561  00C1                     i1l2555:	
 10562  00C1  3001               	movlw	1
 10563  00C2                     u230_25:	
 10564  00C2  35AD               	lslf	___ftadd@f2,f
 10565  00C3  0DAE               	rlf	___ftadd@f2+1,f
 10566  00C4  0DAF               	rlf	___ftadd@f2+2,f
 10567  00C5  0B89               	decfsz	9,f
 10568  00C6  28C2               	goto	u230_25
 10569  00C7  3001               	movlw	1
 10570  00C8  02B5               	subwf	___ftadd@exp2,f
 10571  00C9  0835               	movf	___ftadd@exp2,w
 10572  00CA  0636               	xorwf	___ftadd@exp1,w
 10573  00CB  1903               	skipnz
 10574  00CC  28DE               	goto	i1l2563
 10575  00CD  3001               	movlw	1
 10576  00CE  02B4               	subwf	___ftadd@sign,f
 10577  00CF  0834               	movf	___ftadd@sign,w
 10578  00D0  3907               	andlw	7
 10579  00D1  1903               	btfsc	3,2
 10580  00D2  28DE               	goto	i1l2563
 10581  00D3  28C1               	goto	i1l2555
 10582  00D4                     i1l2561:	
 10583  00D4  3001               	movlw	1
 10584  00D5                     u233_25:	
 10585  00D5  36AC               	lsrf	___ftadd@f1+2,f
 10586  00D6  0CAB               	rrf	___ftadd@f1+1,f
 10587  00D7  0CAA               	rrf	___ftadd@f1,f
 10588  00D8  0B89               	decfsz	9,f
 10589  00D9  28D5               	goto	u233_25
 10590  00DA  3001               	movlw	1
 10591  00DB  00B0               	movwf	??___ftadd
 10592  00DC  0830               	movf	??___ftadd,w
 10593  00DD  07B6               	addwf	___ftadd@exp1,f
 10594  00DE                     i1l2563:	
 10595  00DE  0836               	movf	___ftadd@exp1,w
 10596  00DF  0635               	xorwf	___ftadd@exp2,w
 10597  00E0  1903               	btfsc	3,2
 10598  00E1  2908               	goto	i1l791
 10599  00E2  28D4               	goto	i1l2561
 10600  00E3                     i1l2565:	
 10601  00E3  0836               	movf	___ftadd@exp1,w
 10602  00E4  0235               	subwf	___ftadd@exp2,w
 10603  00E5  1803               	skipnc
 10604  00E6  2908               	goto	i1l791
 10605  00E7                     i1l2567:	
 10606  00E7  3001               	movlw	1
 10607  00E8                     u236_25:	
 10608  00E8  35AA               	lslf	___ftadd@f1,f
 10609  00E9  0DAB               	rlf	___ftadd@f1+1,f
 10610  00EA  0DAC               	rlf	___ftadd@f1+2,f
 10611  00EB  0B89               	decfsz	9,f
 10612  00EC  28E8               	goto	u236_25
 10613  00ED  3001               	movlw	1
 10614  00EE  02B6               	subwf	___ftadd@exp1,f
 10615  00EF  0835               	movf	___ftadd@exp2,w
 10616  00F0  0636               	xorwf	___ftadd@exp1,w
 10617  00F1  1903               	skipnz
 10618  00F2  2904               	goto	i1l2575
 10619  00F3  3001               	movlw	1
 10620  00F4  02B4               	subwf	___ftadd@sign,f
 10621  00F5  0834               	movf	___ftadd@sign,w
 10622  00F6  3907               	andlw	7
 10623  00F7  1903               	btfsc	3,2
 10624  00F8  2904               	goto	i1l2575
 10625  00F9  28E7               	goto	i1l2567
 10626  00FA                     i1l2573:	
 10627  00FA  3001               	movlw	1
 10628  00FB                     u239_25:	
 10629  00FB  36AF               	lsrf	___ftadd@f2+2,f
 10630  00FC  0CAE               	rrf	___ftadd@f2+1,f
 10631  00FD  0CAD               	rrf	___ftadd@f2,f
 10632  00FE  0B89               	decfsz	9,f
 10633  00FF  28FB               	goto	u239_25
 10634  0100  3001               	movlw	1
 10635  0101  00B0               	movwf	??___ftadd
 10636  0102  0830               	movf	??___ftadd,w
 10637  0103  07B5               	addwf	___ftadd@exp2,f
 10638  0104                     i1l2575:	
 10639  0104  0836               	movf	___ftadd@exp1,w
 10640  0105  0635               	xorwf	___ftadd@exp2,w
 10641  0106  1D03               	skipz
 10642  0107  28FA               	goto	i1l2573
 10643  0108                     i1l791:	
 10644  0108  1FB4               	btfss	___ftadd@sign,7
 10645  0109  291A               	goto	i1l2579
 10646  010A  30FF               	movlw	255
 10647  010B  06AA               	xorwf	___ftadd@f1,f
 10648  010C  30FF               	movlw	255
 10649  010D  06AB               	xorwf	___ftadd@f1+1,f
 10650  010E  30FF               	movlw	255
 10651  010F  06AC               	xorwf	___ftadd@f1+2,f
 10652  0110  3001               	movlw	1
 10653  0111  07AA               	addwf	___ftadd@f1,f
 10654  0112  3000               	movlw	0
 10655  0113  1803               	skipnc
 10656  0114  3001               	movlw	1
 10657  0115  07AB               	addwf	___ftadd@f1+1,f
 10658  0116  3000               	movlw	0
 10659  0117  1803               	skipnc
 10660  0118  3001               	movlw	1
 10661  0119  07AC               	addwf	___ftadd@f1+2,f
 10662  011A                     i1l2579:	
 10663  011A  1F34               	btfss	___ftadd@sign,6
 10664  011B  292C               	goto	i1l2583
 10665  011C  30FF               	movlw	255
 10666  011D  06AD               	xorwf	___ftadd@f2,f
 10667  011E  30FF               	movlw	255
 10668  011F  06AE               	xorwf	___ftadd@f2+1,f
 10669  0120  30FF               	movlw	255
 10670  0121  06AF               	xorwf	___ftadd@f2+2,f
 10671  0122  3001               	movlw	1
 10672  0123  07AD               	addwf	___ftadd@f2,f
 10673  0124  3000               	movlw	0
 10674  0125  1803               	skipnc
 10675  0126  3001               	movlw	1
 10676  0127  07AE               	addwf	___ftadd@f2+1,f
 10677  0128  3000               	movlw	0
 10678  0129  1803               	skipnc
 10679  012A  3001               	movlw	1
 10680  012B  07AF               	addwf	___ftadd@f2+2,f
 10681  012C                     i1l2583:	
 10682  012C  01B4               	clrf	___ftadd@sign
 10683  012D  082A               	movf	___ftadd@f1,w
 10684  012E  07AD               	addwf	___ftadd@f2,f
 10685  012F  082B               	movf	___ftadd@f1+1,w
 10686  0130  3DAE               	addwfc	___ftadd@f2+1,f
 10687  0131  082C               	movf	___ftadd@f1+2,w
 10688  0132  3DAF               	addwfc	___ftadd@f2+2,f
 10689  0133  1FAF               	btfss	___ftadd@f2+2,7
 10690  0134  2947               	goto	i1l2593
 10691  0135  30FF               	movlw	255
 10692  0136  06AD               	xorwf	___ftadd@f2,f
 10693  0137  30FF               	movlw	255
 10694  0138  06AE               	xorwf	___ftadd@f2+1,f
 10695  0139  30FF               	movlw	255
 10696  013A  06AF               	xorwf	___ftadd@f2+2,f
 10697  013B  3001               	movlw	1
 10698  013C  07AD               	addwf	___ftadd@f2,f
 10699  013D  3000               	movlw	0
 10700  013E  1803               	skipnc
 10701  013F  3001               	movlw	1
 10702  0140  07AE               	addwf	___ftadd@f2+1,f
 10703  0141  3000               	movlw	0
 10704  0142  1803               	skipnc
 10705  0143  3001               	movlw	1
 10706  0144  07AF               	addwf	___ftadd@f2+2,f
 10707  0145  01B4               	clrf	___ftadd@sign
 10708  0146  0AB4               	incf	___ftadd@sign,f
 10709  0147                     i1l2593:	
 10710  0147  082D               	movf	___ftadd@f2,w
 10711  0148  00F0               	movwf	___ftpack@arg
 10712  0149  082E               	movf	___ftadd@f2+1,w
 10713  014A  00F1               	movwf	___ftpack@arg+1
 10714  014B  082F               	movf	___ftadd@f2+2,w
 10715  014C  00F2               	movwf	___ftpack@arg+2
 10716  014D  0836               	movf	___ftadd@exp1,w
 10717  014E  00B0               	movwf	??___ftadd
 10718  014F  0830               	movf	??___ftadd,w
 10719  0150  00F3               	movwf	___ftpack@exp
 10720  0151  0834               	movf	___ftadd@sign,w
 10721  0152  00B1               	movwf	??___ftadd+1
 10722  0153  0831               	movf	??___ftadd+1,w
 10723  0154  00F4               	movwf	___ftpack@sign
 10724  0155  3186  26ED         	fcall	___ftpack
 10725  0157  0870               	movf	?___ftpack,w
 10726  0158  0140               	movlb	0	; select bank0
 10727  0159  00AA               	movwf	?___ftadd
 10728  015A  0871               	movf	?___ftpack+1,w
 10729  015B  00AB               	movwf	?___ftadd+1
 10730  015C  0872               	movf	?___ftpack+2,w
 10731  015D  00AC               	movwf	?___ftadd+2
 10732  015E  0008               	return
 10733  015F                     __end_of___ftadd:	
 10734                           
 10735                           	psect	text57
 10736  06ED                     __ptext57:	
 10737 ;; *************** function ___ftpack *****************
 10738 ;; Defined at:
 10739 ;;		line 62 in file "E:\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;  arg             3    0[COMMON] unsigned um
 10742 ;;  exp             1    3[COMMON] unsigned char 
 10743 ;;  sign            1    4[COMMON] unsigned char 
 10744 ;; Auto vars:     Size  Location     Type
 10745 ;;		None
 10746 ;; Return value:  Size  Location     Type
 10747 ;;                  3    0[COMMON] float 
 10748 ;; Registers used:
 10749 ;;		wreg, status,2, status,0
 10750 ;; Tracked objects:
 10751 ;;		On entry : 0/0
 10752 ;;		On exit  : 0/0
 10753 ;;		Unchanged: 0/0
 10754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10755 ;;      Params:         5       0       0       0       0       0       0       0
 10756 ;;      Locals:         0       0       0       0       0       0       0       0
 10757 ;;      Temps:          3       0       0       0       0       0       0       0
 10758 ;;      Totals:         8       0       0       0       0       0       0       0
 10759 ;;Total ram usage:        8 bytes
 10760 ;; Hardware stack levels used:    1
 10761 ;; This function calls:
 10762 ;;		Nothing
 10763 ;; This function is called by:
 10764 ;;		___awtoft
 10765 ;;		___ftadd
 10766 ;;		___ftdiv
 10767 ;;		___ftmul
 10768 ;; This function uses a non-reentrant model
 10769 ;;
 10770                           
 10771                           
 10772                           ;psect for function ___ftpack
 10773  06ED                     ___ftpack:	
 10774                           
 10775                           ;incstack = 0
 10776                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10777  06ED  0873               	movf	___ftpack@exp,w
 10778  06EE  1903               	btfsc	3,2
 10779  06EF  2EF5               	goto	i1l2371
 10780  06F0  0872               	movf	___ftpack@arg+2,w
 10781  06F1  0471               	iorwf	___ftpack@arg+1,w
 10782  06F2  0470               	iorwf	___ftpack@arg,w
 10783  06F3  1D03               	skipz
 10784  06F4  2F06               	goto	i1l2377
 10785  06F5                     i1l2371:	
 10786  06F5  3000               	movlw	0
 10787  06F6  00F0               	movwf	?___ftpack
 10788  06F7  3000               	movlw	0
 10789  06F8  00F1               	movwf	?___ftpack+1
 10790  06F9  3000               	movlw	0
 10791  06FA  00F2               	movwf	?___ftpack+2
 10792  06FB  0008               	return
 10793  06FC                     i1l2375:	
 10794  06FC  3001               	movlw	1
 10795  06FD  00F5               	movwf	??___ftpack
 10796  06FE  0875               	movf	??___ftpack,w
 10797  06FF  07F3               	addwf	___ftpack@exp,f
 10798  0700  3001               	movlw	1
 10799  0701                     u190_25:	
 10800  0701  36F2               	lsrf	___ftpack@arg+2,f
 10801  0702  0CF1               	rrf	___ftpack@arg+1,f
 10802  0703  0CF0               	rrf	___ftpack@arg,f
 10803  0704  0B89               	decfsz	9,f
 10804  0705  2F01               	goto	u190_25
 10805  0706                     i1l2377:	
 10806  0706  30FE               	movlw	254
 10807  0707  0572               	andwf	___ftpack@arg+2,w
 10808  0708  1903               	btfsc	3,2
 10809  0709  2F1F               	goto	i1l760
 10810  070A  2EFC               	goto	i1l2375
 10811  070B                     i1l2379:	
 10812  070B  3001               	movlw	1
 10813  070C  00F5               	movwf	??___ftpack
 10814  070D  0875               	movf	??___ftpack,w
 10815  070E  07F3               	addwf	___ftpack@exp,f
 10816  070F  3001               	movlw	1
 10817  0710  07F0               	addwf	___ftpack@arg,f
 10818  0711  3000               	movlw	0
 10819  0712  1803               	skipnc
 10820  0713  3001               	movlw	1
 10821  0714  07F1               	addwf	___ftpack@arg+1,f
 10822  0715  3000               	movlw	0
 10823  0716  1803               	skipnc
 10824  0717  3001               	movlw	1
 10825  0718  07F2               	addwf	___ftpack@arg+2,f
 10826  0719  3001               	movlw	1
 10827  071A                     u192_25:	
 10828  071A  36F2               	lsrf	___ftpack@arg+2,f
 10829  071B  0CF1               	rrf	___ftpack@arg+1,f
 10830  071C  0CF0               	rrf	___ftpack@arg,f
 10831  071D  0B89               	decfsz	9,f
 10832  071E  2F1A               	goto	u192_25
 10833  071F                     i1l760:	
 10834  071F  30FF               	movlw	255
 10835  0720  0572               	andwf	___ftpack@arg+2,w
 10836  0721  1903               	btfsc	3,2
 10837  0722  2F2C               	goto	i1l2387
 10838  0723  2F0B               	goto	i1l2379
 10839  0724                     i1l2385:	
 10840  0724  3001               	movlw	1
 10841  0725  02F3               	subwf	___ftpack@exp,f
 10842  0726  3001               	movlw	1
 10843  0727                     u194_25:	
 10844  0727  35F0               	lslf	___ftpack@arg,f
 10845  0728  0DF1               	rlf	___ftpack@arg+1,f
 10846  0729  0DF2               	rlf	___ftpack@arg+2,f
 10847  072A  0B89               	decfsz	9,f
 10848  072B  2F27               	goto	u194_25
 10849  072C                     i1l2387:	
 10850  072C  1BF1               	btfsc	___ftpack@arg+1,7
 10851  072D  2F32               	goto	i1l767
 10852  072E  3002               	movlw	2
 10853  072F  0273               	subwf	___ftpack@exp,w
 10854  0730  1803               	skipnc
 10855  0731  2F24               	goto	i1l2385
 10856  0732                     i1l767:	
 10857  0732  1873               	btfsc	___ftpack@exp,0
 10858  0733  2F3A               	goto	i1l768
 10859  0734  30FF               	movlw	255
 10860  0735  05F0               	andwf	___ftpack@arg,f
 10861  0736  307F               	movlw	127
 10862  0737  05F1               	andwf	___ftpack@arg+1,f
 10863  0738  30FF               	movlw	255
 10864  0739  05F2               	andwf	___ftpack@arg+2,f
 10865  073A                     i1l768:	
 10866  073A  1003               	clrc
 10867  073B  0CF3               	rrf	___ftpack@exp,f
 10868  073C  0873               	movf	___ftpack@exp,w
 10869  073D  00F5               	movwf	??___ftpack
 10870  073E  01F6               	clrf	??___ftpack+1
 10871  073F  01F7               	clrf	??___ftpack+2
 10872  0740  3010               	movlw	16
 10873  0741                     u198_25:	
 10874  0741  35F5               	lslf	??___ftpack,f
 10875  0742  0DF6               	rlf	??___ftpack+1,f
 10876  0743  0DF7               	rlf	??___ftpack+2,f
 10877  0744  0B89               	decfsz	9,f
 10878  0745  2F41               	goto	u198_25
 10879  0746  0875               	movf	??___ftpack,w
 10880  0747  04F0               	iorwf	___ftpack@arg,f
 10881  0748  0876               	movf	??___ftpack+1,w
 10882  0749  04F1               	iorwf	___ftpack@arg+1,f
 10883  074A  0877               	movf	??___ftpack+2,w
 10884  074B  04F2               	iorwf	___ftpack@arg+2,f
 10885  074C  0874               	movf	___ftpack@sign,w
 10886  074D  1903               	btfsc	3,2
 10887  074E  0008               	return
 10888  074F  17F2               	bsf	___ftpack@arg+2,7
 10889  0750  0008               	return
 10890  0751                     __end_of___ftpack:	
 10891                           
 10892                           	psect	text58
 10893  0BA3                     __ptext58:	
 10894 ;; *************** function _EUSART_Transmit_ISR *****************
 10895 ;; Defined at:
 10896 ;;		line 265 in file "src/eusart.c"
 10897 ;; Parameters:    Size  Location     Type
 10898 ;;		None
 10899 ;; Auto vars:     Size  Location     Type
 10900 ;;		None
 10901 ;; Return value:  Size  Location     Type
 10902 ;;                  1    wreg      void 
 10903 ;; Registers used:
 10904 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10905 ;; Tracked objects:
 10906 ;;		On entry : 0/0
 10907 ;;		On exit  : 0/0
 10908 ;;		Unchanged: 0/0
 10909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10910 ;;      Params:         0       0       0       0       0       0       0       0
 10911 ;;      Locals:         0       0       0       0       0       0       0       0
 10912 ;;      Temps:          1       0       0       0       0       0       0       0
 10913 ;;      Totals:         1       0       0       0       0       0       0       0
 10914 ;;Total ram usage:        1 bytes
 10915 ;; Hardware stack levels used:    1
 10916 ;; This function calls:
 10917 ;;		Nothing
 10918 ;; This function is called by:
 10919 ;;		_INTERRUPT_InterruptManager
 10920 ;; This function uses a non-reentrant model
 10921 ;;
 10922                           
 10923                           
 10924                           ;psect for function _EUSART_Transmit_ISR
 10925  0BA3                     _EUSART_Transmit_ISR:	
 10926                           
 10927                           ;eusart.c: 269: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 10928                           
 10929                           ;incstack = 0
 10930                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10931  0BA3  3008               	movlw	8
 10932  0BA4  0140               	movlb	0	; select bank0
 10933  0BA5  026E               	subwf	_eusartTxBufferRemaining,w	;volatile
 10934  0BA6  1803               	skipnc
 10935  0BA7  2BBD               	goto	i1l213
 10936                           
 10937                           ;eusart.c: 270: {;eusart.c: 271: TX1REG = eusartTxBuffer[eusartTxTail++];
 10938  0BA8  086C               	movf	_eusartTxTail,w
 10939  0BA9  3EA0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 10940  0BAA  0086               	movwf	6
 10941  0BAB  0187               	clrf	7
 10942  0BAC  0801               	movf	1,w
 10943  0BAD  0142               	movlb	2	; select bank2
 10944  0BAE  009A               	movwf	26	;volatile
 10945  0BAF  3001               	movlw	1
 10946  0BB0  00F0               	movwf	??_EUSART_Transmit_ISR
 10947  0BB1  0870               	movf	??_EUSART_Transmit_ISR,w
 10948  0BB2  0140               	movlb	0	; select bank0
 10949  0BB3  07EC               	addwf	_eusartTxTail,f
 10950                           
 10951                           ;eusart.c: 272: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 10952  0BB4  3008               	movlw	8
 10953  0BB5  026C               	subwf	_eusartTxTail,w
 10954  0BB6  1803               	btfsc	3,0
 10955                           
 10956                           ;eusart.c: 273: {;eusart.c: 274: eusartTxTail = 0;
 10957  0BB7  01EC               	clrf	_eusartTxTail
 10958                           
 10959                           ;eusart.c: 275: };eusart.c: 276: eusartTxBufferRemaining++;
 10960  0BB8  3001               	movlw	1
 10961  0BB9  00F0               	movwf	??_EUSART_Transmit_ISR
 10962  0BBA  0870               	movf	??_EUSART_Transmit_ISR,w
 10963  0BBB  07EE               	addwf	_eusartTxBufferRemaining,f	;volatile
 10964                           
 10965                           ;eusart.c: 277: }
 10966  0BBC  0008               	return
 10967  0BBD                     i1l213:	
 10968                           
 10969                           ;eusart.c: 278: else;eusart.c: 279: {;eusart.c: 280: PIE3bits.TX1IE = 0;
 10970  0BBD  014E               	movlb	14	; select bank14
 10971  0BBE  1219               	bcf	25,4	;volatile
 10972  0BBF  0008               	return
 10973  0BC0                     __end_of_EUSART_Transmit_ISR:	
 10974                           
 10975                           	psect	text59
 10976  0C60                     __ptext59:	
 10977 ;; *************** function _EUSART_Receive_ISR *****************
 10978 ;; Defined at:
 10979 ;;		line 284 in file "src/eusart.c"
 10980 ;; Parameters:    Size  Location     Type
 10981 ;;		None
 10982 ;; Auto vars:     Size  Location     Type
 10983 ;;  dumread         1    1[COMMON] unsigned char 
 10984 ;; Return value:  Size  Location     Type
 10985 ;;                  1    wreg      void 
 10986 ;; Registers used:
 10987 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10988 ;; Tracked objects:
 10989 ;;		On entry : 0/0
 10990 ;;		On exit  : 0/0
 10991 ;;		Unchanged: 0/0
 10992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10993 ;;      Params:         0       0       0       0       0       0       0       0
 10994 ;;      Locals:         1       0       0       0       0       0       0       0
 10995 ;;      Temps:          1       0       0       0       0       0       0       0
 10996 ;;      Totals:         2       0       0       0       0       0       0       0
 10997 ;;Total ram usage:        2 bytes
 10998 ;; Hardware stack levels used:    1
 10999 ;; This function calls:
 11000 ;;		Nothing
 11001 ;; This function is called by:
 11002 ;;		_INTERRUPT_InterruptManager
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           
 11007                           ;psect for function _EUSART_Receive_ISR
 11008  0C60                     _EUSART_Receive_ISR:	
 11009                           
 11010                           ;eusart.c: 286: uint8_t dumread;;eusart.c: 287: if(1 == RC1STAbits.OERR)
 11011                           
 11012                           ;incstack = 0
 11013                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 11014  0C60  0142               	movlb	2	; select bank2
 11015  0C61  1C9D               	btfss	29,1	;volatile
 11016  0C62  2C65               	goto	i1l219
 11017                           
 11018                           ;eusart.c: 288: {;eusart.c: 291: RC1STAbits.SPEN = 0;
 11019  0C63  139D               	bcf	29,7	;volatile
 11020                           
 11021                           ;eusart.c: 292: RC1STAbits.SPEN = 1;
 11022  0C64  179D               	bsf	29,7	;volatile
 11023  0C65                     i1l219:	
 11024                           
 11025                           ;eusart.c: 293: };eusart.c: 296: if(BAUD1CON&0x02)
 11026  0C65  1C9F               	btfss	31,1	;volatile
 11027  0C66  2C6C               	goto	i1l3195
 11028                           
 11029                           ;eusart.c: 297: {;eusart.c: 298: dumread = RC1REG;
 11030  0C67  0819               	movf	25,w	;volatile
 11031  0C68  00F0               	movwf	??_EUSART_Receive_ISR
 11032  0C69  0870               	movf	??_EUSART_Receive_ISR,w
 11033  0C6A  00F1               	movwf	EUSART_Receive_ISR@dumread
 11034                           
 11035                           ;eusart.c: 299: }
 11036  0C6B  0008               	return
 11037  0C6C                     i1l3195:	
 11038                           
 11039                           ;eusart.c: 300: else;eusart.c: 301: {;eusart.c: 302: eusartRxBuffer[eusartRxHead++] = RC
      +                          1REG;
 11040  0C6C  0819               	movf	25,w	;volatile
 11041  0C6D  00F0               	movwf	??_EUSART_Receive_ISR
 11042  0C6E  0140               	movlb	0	; select bank0
 11043  0C6F  086B               	movf	_eusartRxHead,w
 11044  0C70  3E34               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 11045  0C71  0086               	movwf	6
 11046  0C72  3001               	movlw	1	; select bank2/3
 11047  0C73  0087               	movwf	7
 11048  0C74  0870               	movf	??_EUSART_Receive_ISR,w
 11049  0C75  0081               	movwf	1
 11050  0C76  3001               	movlw	1
 11051  0C77  00F0               	movwf	??_EUSART_Receive_ISR
 11052  0C78  0870               	movf	??_EUSART_Receive_ISR,w
 11053  0C79  07EB               	addwf	_eusartRxHead,f
 11054                           
 11055                           ;eusart.c: 303: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 11056  0C7A  3014               	movlw	20
 11057  0C7B  026B               	subwf	_eusartRxHead,w
 11058  0C7C  1803               	btfsc	3,0
 11059                           
 11060                           ;eusart.c: 304: {;eusart.c: 305: eusartRxHead = 0;
 11061  0C7D  01EB               	clrf	_eusartRxHead
 11062                           
 11063                           ;eusart.c: 306: };eusart.c: 307: eusartRxCount++;
 11064  0C7E  3001               	movlw	1
 11065  0C7F  00F0               	movwf	??_EUSART_Receive_ISR
 11066  0C80  0870               	movf	??_EUSART_Receive_ISR,w
 11067  0C81  0141               	movlb	1	; select bank1
 11068  0C82  07B9               	addwf	_eusartRxCount^(0+128),f	;volatile
 11069  0C83  0008               	return
 11070  0C84                     __end_of_EUSART_Receive_ISR:	
 11071  007E                     btemp	set	126	;btemp
 11072  007E                     int$flags	set	126
 11073  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         96
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     55      80
    BANK1            80     30      64
    BANK2            80      0      40
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    AngleCalcu@p	PTR float  size(1) Largest target is 6
		 -> filter_result(BANK1[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR0_Task->___fttol
    _Mpu6500GyroAngle->___awtoft
    i1_Get6500Data->i1_Com_Lock_MPU_RD_Reg
    i1_Com_Lock_MPU_RD_Reg->i1_Com_Lock_IIC_Read_Data
    i1_Com_Lock_MPU_RD_Reg->i1_Com_Lock_IIC_Write_Data
    ___ftneg->___awtoft
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _AngleCalcu->___ftmul
    ___ftmul->___ftpack
    ___ftadd->___awtoft
    ___ftadd->___ftmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_TMR0_ISR
    _TMR0_ISR->_TMR0_Task
    _TMR0_Task->_Mpu6500GyroAngle
    _Mpu6500GyroAngle->___ftdiv
    ___ftdiv->___ftadd
    _AngleCalcu->___ftadd
    ___ftadd->___ftmul

Critical Paths under _main in BANK1

    _UART_Task->_EUSART_Write_Frame
    _EUSART_Write_Frame->_ADC_Get_Vol
    _ADC_Get_Vol->___lwdiv
    ___lwdiv->___wmul
    _SYSTEM_Initialize->_Init_MPU6500
    _Init_MPU6500->_Read_Offset
    _Read_Offset->_Get6500Data
    _Get6500Data->_Com_Lock_MPU_RD_Reg
    _Com_Lock_MPU_RD_Reg->_Com_Lock_IIC_Read_Data
    _Com_Lock_MPU_RD_Reg->_Com_Lock_IIC_Write_Data
    _Com_Lock_MPU_Write_Command->_Com_Lock_IIC_Write_Data
    _CheckDoorOpened->___ftge
    _CheckDoorClosed->___ftge

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    4241
                                             29 BANK1      1     1      0
                    _CheckDoorClosed
                    _CheckDoorOpened
                         _ClearAngle
                    _Clear_FrameDone
                        _EUSART_Read
                       _EUSART_Write
                         _ReadRstPIN
                    _ReadTouchKeyPIN
                  _SYSTEM_Initialize
                    _TMR0_StartTimer
                     _TMR0_StopTimer
                          _UART_Task
 ---------------------------------------------------------------------------------
 (1) _UART_Task                                            0     0      0     735
                 _EUSART_Write_Frame
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write_Frame                                   3     3      0     735
                                             20 BANK1      3     3      0
                        _ADC_Get_Vol
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _ADC_Get_Vol                                          6     6      0     601
                                             14 BANK1      6     6      0
                  _ADC_GetConversion
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     220
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     290
                                              6 BANK1      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _ADC_GetConversion                                    4     2      2      22
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1839
                     _ADC_Initialize
                  _EUSART_Initialize
                       _Init_MPU6500
                   _Interrupt_Enable
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Interrupt_Enable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_MPU6500                                         2     2      0    1839
                                             27 BANK1      2     2      0
                _Com_Lock_MPU_RD_Reg
         _Com_Lock_MPU_Write_Command
                        _Read_Offset
 ---------------------------------------------------------------------------------
 (3) _Read_Offset                                          9     9      0     890
                                             18 BANK1      9     9      0
                       _EUSART_Write
                        _Get6500Data
                            ___aldiv
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8     428
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (4) _Get6500Data                                         10     8      2     326
                                              8 BANK1     10     8      2
                _Com_Lock_MPU_RD_Reg
 ---------------------------------------------------------------------------------
 (5) _Com_Lock_MPU_RD_Reg                                  3     3      0     236
                                              5 BANK1      3     3      0
             _Com_Lock_IIC_Read_Data
                 _Com_Lock_IIC_Start
                  _Com_Lock_IIC_Stop
            _Com_Lock_IIC_Write_Data
 ---------------------------------------------------------------------------------
 (6) _Com_Lock_IIC_Read_Data                               5     5      0      94
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         2     2      0      44
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Com_Lock_MPU_Write_Command                           2     1      1     713
                                              5 BANK1      2     1      1
                 _Com_Lock_IIC_Start
                  _Com_Lock_IIC_Stop
            _Com_Lock_IIC_Write_Data
 ---------------------------------------------------------------------------------
 (6) _Com_Lock_IIC_Write_Data                              5     5      0      93
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (6) _Com_Lock_IIC_Stop                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Com_Lock_IIC_Start                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ReadTouchKeyPIN                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadRstPIN                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      23
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Clear_FrameDone                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClearAngle                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckDoorOpened                                      0     0      0     800
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _CheckDoorClosed                                      1     1      0     800
                                              9 BANK1      1     1      0
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     800
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           0     0      0   15557
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
                  i1_TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (8) i1_TMR0_StartTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             1     1      0   15556
                                             54 BANK0      1     1      0
                          _TMR0_Task
 ---------------------------------------------------------------------------------
 (9) _TMR0_Task                                            5     5      0   15556
                                             49 BANK0      5     5      0
                         _AngleCalcu
                   _Mpu6500GyroAngle
                            ___fttol
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            14    10      4     380
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (10) _Mpu6500GyroAngle                                   11     8      3    8776
                                             39 BANK0     10     7      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                                _abs
                     i1_EUSART_Write
                      i1_Get6500Data
 ---------------------------------------------------------------------------------
 (11) i1_Get6500Data                                      10     8      2     326
                                              8 COMMON     5     3      2
                                              0 BANK0      5     5      0
              i1_Com_Lock_MPU_RD_Reg
 ---------------------------------------------------------------------------------
 (12) i1_Com_Lock_MPU_RD_Reg                               3     3      0     236
                                              5 COMMON     3     3      0
           i1_Com_Lock_IIC_Read_Data
               i1_Com_Lock_IIC_Start
                i1_Com_Lock_IIC_Stop
          i1_Com_Lock_IIC_Write_Data
 ---------------------------------------------------------------------------------
 (13) i1_Com_Lock_IIC_Write_Data                           5     5      0      93
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_Com_Lock_IIC_Stop                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Com_Lock_IIC_Start                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Com_Lock_IIC_Read_Data                            5     5      0      94
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (10) i1_EUSART_Write                                      2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _abs                                                 4     2      2     194
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (11) ___ftneg                                             3     0      3     109
                                              0 BANK0      3     0      3
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftdiv                                            16    10      6    2478
                                             23 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___awtoft                                            6     3      3    2289
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) _AngleCalcu                                          7     0      7    6356
                                             23 BANK0      7     0      7
                            ___ftadd
                            ___ftmul
                           i1___ftge
 ---------------------------------------------------------------------------------
 (11) i1___ftge                                            9     3      6     240
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (11) ___ftmul                                            16    10      6    2524
                                              8 COMMON     6     0      6
                                              0 BANK0     10    10      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftadd                                            13     7      6    3268
                                             10 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___ftpack                                            8     3      5    2070
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   2     2      0       1
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckDoorClosed
     ___ftge
   _CheckDoorOpened
     ___ftge
   _ClearAngle
   _Clear_FrameDone
   _EUSART_Read
   _EUSART_Write
   _ReadRstPIN
   _ReadTouchKeyPIN
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _Init_MPU6500
       _Com_Lock_MPU_RD_Reg
         _Com_Lock_IIC_Read_Data
         _Com_Lock_IIC_Start
         _Com_Lock_IIC_Stop
         _Com_Lock_IIC_Write_Data
       _Com_Lock_MPU_Write_Command
         _Com_Lock_IIC_Start
         _Com_Lock_IIC_Stop
         _Com_Lock_IIC_Write_Data
       _Read_Offset
         _EUSART_Write
         _Get6500Data
           _Com_Lock_MPU_RD_Reg
             _Com_Lock_IIC_Read_Data
             _Com_Lock_IIC_Start
             _Com_Lock_IIC_Stop
             _Com_Lock_IIC_Write_Data
         ___aldiv
     _Interrupt_Enable
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR0_Initialize
   _TMR0_StartTimer
   _TMR0_StopTimer
   _UART_Task
     _EUSART_Write_Frame
       _ADC_Get_Vol
         _ADC_GetConversion
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_Task
       _AngleCalcu
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___ftpack
         i1___ftge
       _Mpu6500GyroAngle
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
         _abs
         i1_EUSART_Write
         i1_Get6500Data
           i1_Com_Lock_MPU_RD_Reg
             i1_Com_Lock_IIC_Read_Data
             i1_Com_Lock_IIC_Start
             i1_Com_Lock_IIC_Stop
             i1_Com_Lock_IIC_Write_Data
       ___fttol
       i1_EUSART_Write
   i1_TMR0_StartTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      C6       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     37      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     1E      40       8       80.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      28      10       50.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      C6      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Jan 22 13:47:32 2019

                   ??i1_EUSART_Write 0070                   ??_Interrupt_Enable 00C1  
         i1Com_Lock_IIC_Write_Data@i 0073                          __CFG_CP$OFF 0000  
                ___wmul@multiplicand 00C3     __size_of_Com_Lock_IIC_Write_Data 004A  
               i1_Com_Lock_IIC_Start 0B0B                         ___ftadd@exp1 0036  
                       ___ftadd@exp2 0035                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 0034                                  l109 0AD5  
                                l207 0B3F                                  l405 0D89  
                                l350 07F1                                  l183 0CD8  
                                l337 0F7B                                  l193 0E77  
                                l338 0F99                                  l186 0CE3  
                                l339 0F83                                  l347 07C5  
                                l349 07EF                                  l288 0B80  
                                l628 05A7                                  l557 0B90  
                      _filter_result 00BB                         i1___ftge@ff1 0070  
                       i1___ftge@ff2 0073           Com_Lock_IIC_Write_Data@dat 00C2  
                                _abs 0AC1                                  _sum 005B  
            __size_of_PMD_Initialize 0008                         __CFG_BORV$LO 0000  
                                wreg 0009                        __CFG_BBEN$OFF 0000  
               __size_of_ADC_Get_Vol 002F                         ?_EUSART_Read 0070  
                   AngleCalcu@gyro_m 003A                        ?_Init_MPU6500 0070  
                       __CFG_ZCD$OFF 0000                         ___ftdiv@cntr 0041  
                       ___ftdiv@sign 0046                                 ?_abs 0070  
                               l3001 0E7B                                 l3101 0AD9  
                               l3007 0E87                                 l3121 062B  
                               l3105 0ADB                                 l3009 0E8F  
                               l3051 0E61                                 l2251 0F85  
                               l3125 0632                                 l2421 0CD4  
                               l3047 0E4B                                 l3231 0D8C  
                               l3143 0674                                 l2511 060F  
                               l2503 05F6                                 l3241 0F5F  
                               l3161 0687                                 l3129 0645  
                               l3145 0675                                 l3401 01FC  
                               l3243 0F62                                 l3155 0681  
                               l2507 0601                                 l3331 0163  
                               l3085 0A8D                                 l2285 07E2  
                               l3173 0B36                                 l3405 0200  
                               l2463 0B8A                                 l3167 0B2E  
                               l3423 0220                                 l3431 022F  
                               l3407 0206                                 l3351 018C  
                               l3335 016A                                 l3249 0F69  
                               l3169 0B32                                 l2715 0DEB  
                               l2707 0DCD                                 l3435 0237  
                               l3339 0173                                 l2493 05C8  
                               l2485 05B8                                 l2709 0DD9  
                               l3429 0229                                 l3381 01D6  
                               l3373 01C1                                 l3357 019F  
                               l2495 05D6                                 l2719 0DF4  
                               l3439 023A                                 l3379 01D0  
                               l2791 0697                                 l2797 06B5  
                               _LATA 0018                                 _LATB 0019  
                               u2135 05CB                                 _LATC 001A  
                               u2155 05D7                                 u2075 0B91  
                               u2165 05EB                                 u2085 0B96  
                               u2175 05F7                                 u2705 0DEC  
                               u2665 0DD0                                 _PMD0 0796  
                               u3637 0B7B                                 u2685 0DDA  
                               _PMD1 0797                                 _PMD2 0798  
                               u3647 0FBB                                 u2695 0DE4  
                               _PMD3 0799                                 _PMD4 079A  
                               u3657 0FF6                                 _PMD5 079B  
                               _WPUA 1F39                                 _WPUB 1F44  
                               _WPUC 1F4F                                 _WPUE 1F65  
                      __CFG_FCMEN$ON 0000                                 abs@a 0070  
                               _main 015F                         ___ftpack@arg 0070  
                       ___ftpack@exp 0073                           _AngleCalcu 0751  
                    _TMR0_StartTimer 0A7D                           _ClearAngle 0AA0  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               _sum_ 0057                                 btemp 007E  
                      __CFG_BOREN$ON 0000            __size_of_Mpu6500GyroAngle 00DE  
                               start 0043                __end_ofi1_Get6500Data 0C3E  
                  AngleCalcu@angle_m 0037                        __CFG_CSWEN$ON 0000  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 0028  
                       ___ftmul@sign 0029          __end_of_Com_Lock_MPU_RD_Reg 0D2B  
                       ___fttol@exp1 007D                                ??_abs 0072  
                      ??_Read_Offset 00D3                         ___fttol@lval 0079  
            __end_of_TMR0_Initialize 0AC1                        ?_EUSART_Write 0070  
     __size_of_OSCILLATOR_Initialize 000A                ?i1_Com_Lock_IIC_Start 0070  
      __end_of_OSCILLATOR_Initialize 0AB4                      __end_of___aldiv 0618  
                              _ADACT 009F                                ?_main 0070  
                    __end_of___ftadd 015F                     ?_Clear_FrameDone 0070  
                    __end_of___ftdiv 0481                      __end_of___ftneg 0AA0  
                    __end_of___ftmul 03D8                      __end_of___fttol 0596  
                    __end_of___lwdiv 0DF9                                i1l213 0BBD  
                              i1l219 0C65                                i1l260 002F  
                              i1l350 0F20                                i1l183 0C89  
                              i1l263 0041                                i1l337 0EBB  
                              i1l186 0C93                                i1l338 0ED3  
                              i1l347 0EFD                                i1l339 0EC1  
                              i1l259 0029                                i1l349 0F1F  
                              i1l760 071F                                i1l851 057C  
                              i1l767 0732                                i1l791 0108  
                              i1l768 073A                                _OSCEN 0891  
                              _TMR0H 059D                                _TMR0L 059C  
                              _PORTA 000C                                _PORTB 000D  
                              _PORTC 000E                      _gu8OldDoorState 00DF  
                              _TRISA 0012                                _TRISB 0013  
                              _TRISC 0014                                _TRISE 0016  
                   __end_of_TMR0_ISR 0BFD                   __size_of_UART_Task 0013  
                      __CFG_WRTB$OFF 0000                        __CFG_WRTC$OFF 0000  
                     ??_Init_MPU6500 00DC                   __size_of_TMR0_Task 008F  
                      ___awtoft@sign 007D     __end_ofi1_Com_Lock_IIC_Read_Data 0F2A  
                      ___ftpack@sign 0074                     __end_ofi1___ftge 0E34  
                       Get6500Data@H 00D0                         Get6500Data@L 00D1  
                       _gu8ClosedCnt 00B3                                status 0003  
                              wtemp0 007E                i1_Com_Lock_MPU_RD_Reg 0CAA  
                       _gu8DoorState 006F          ?_Com_Lock_MPU_Write_Command 00C6  
                    __initialization 0045          ??i1_Com_Lock_IIC_Write_Data 0070  
                       __end_of_main 0247                           _ReadRstPIN 0A88  
                         _Frist_gyro 0064                       __CFG_SAFEN$OFF 0000  
                  _Com_Lock_IIC_Stop 0AFB                       ??_EUSART_Write 00C1  
        ?_INTERRUPT_InterruptManager 0070                   ?_Com_Lock_IIC_Stop 0070  
                             ??_main 00DE                        ___fttol@sign1 0078  
      Com_Lock_IIC_Write_Data@retVal 00C3       Com_Lock_MPU_Write_Command@data 00C6  
                __end_of_Read_Offset 06ED                  ??_Com_Lock_IIC_Stop 00C1  
                       _gu8UartTicnt 00B6              __end_of_TMR0_StartTimer 0A82  
                             _ADCON0 009D                               _ADCON1 009E  
                 _EUSART_Write_Frame 0E70                               _ADRESH 009C  
                             _ADRESL 009B             __size_of_ReadTouchKeyPIN 000E  
                   __end_of___awtoft 0C1D                               _ANSELA 1F38  
                             _ANSELB 1F43                               _ANSELC 1F4E  
                   __end_of___ftpack 0751                   __CFG_RSTOSC$HFINT1 0000  
                             _T0CON0 059E                               _T0CON1 059F  
                             _RC1REG 0119                               _RC1STA 011D  
                             i1l2305 0EC2                               _ODCONA 1F3A  
                             _ODCONB 1F45                               _ODCONC 1F50  
                             _RC6PPS 1F26                               i1l3213 0BE8  
                             i1l2371 06F5                               i1l2523 0C07  
                             i1l2603 03EF                               i1l2339 0F15  
                             i1l3219 0BF4                               i1l2533 0091  
                             i1l2375 06FC                               i1l2543 00A7  
                             i1l2631 045F                               i1l2623 0446  
                             i1l2385 0724                               i1l2377 0706  
                             i1l2561 00D4                               i1l2537 0098  
                             i1l2609 0405                               i1l3265 000D  
                             i1l3195 0C6C                               i1l2387 072C  
                             i1l2379 070B                               i1l2563 00DE  
                             i1l2555 00C1                               i1l2651 0352  
                             i1l3283 0022                               i1l2573 00FA  
                             i1l2565 00E3                               i1l2645 033C  
                             i1l2725 0C85                               i1l3277 001B  
                             i1l2583 012C                               i1l2575 0104  
                             i1l2567 00E7                               i1l2663 038D  
                             i1l2751 0E0F                               i1l2831 02BB  
                             i1l2593 0147                               i1l2833 02BD  
                             i1l2825 029B                               i1l3297 003B  
                             i1l2579 011A                               i1l2675 03A9  
                             i1l2667 0395                               i1l2755 0E25  
                             i1l2843 02E6                               i1l2853 0775  
                             i1l2679 03B1                               i1l2855 079B  
                             i1l2865 0528                               i1l2891 0573  
                             i1l2883 0558                               i1l2893 057F  
                             i1l2885 0566                               u300_25 04E3  
                             i1l2897 058D                               u301_25 04FD  
                             u230_25 00C2                               u233_25 00D5  
                             u250_25 0460                               _FVRCON 090C  
                             u236_25 00E8                               u261_25 03B2  
                             u190_25 0701                               u262_25 03B8  
                             u254_25 035E                               u246_25 0417  
                             u239_25 00FB                               u255_25 036E  
                             u247_25 0427                               u192_25 071A  
                             u248_25 0447                               u257_25 0396  
                             u249_25 0456                               u281_25 0291  
                             u194_25 0727                               u258_25 039C  
                             u283_25 02B9                               u291_25 0559  
                             u198_25 0741                               u294_25 0574  
                             u288_25 052F                               _OSCFRQ 0893  
                             _TX1REG 011A                      _CheckDoorClosed 0F2A  
                             _TX1STA 011E                       i1Get6500Data@H 007A  
                     i1Get6500Data@L 007B                          ?_AngleCalcu 0037  
                        ?_ClearAngle 0070                  ?_EUSART_Write_Frame 0070  
                    _CheckDoorOpened 0D5A                       __CFG_PWRTE$OFF 0000  
                  EUSART_Read@bitChk 00C2            __end_of_Com_Lock_IIC_Stop 0B0B  
                  __end_of_UART_Task 0B40                               ___ftge 0E34  
                  __end_of_TMR0_Task 0510                            ??___aldiv 00C9  
                             ___wmul 0B87                            ??___ftadd 0030  
                     __CFG_STVREN$ON 0000                            ??___ftdiv 003D  
                          ??___ftneg 007E                            ??___ftmul 0020  
                          ??___fttol 0074              _Com_Lock_IIC_Write_Data 0F6B  
                          ??___lwdiv 00CB               ??i1_Com_Lock_IIC_Start 0070  
                _EUSART_Transmit_ISR 0BA3                     ?_TMR0_Initialize 0070  
       i1Com_Lock_IIC_Write_Data@dat 0071                 ??_EUSART_Write_Frame 00D5  
              ___ftmul@f3_as_product 0025                       _PMD_Initialize 0A8F  
                 ADC_Get_Vol@adcdata 00D0            i1_Com_Lock_IIC_Write_Data 0EAC  
           ADC_GetConversion@channel 00C4                        _gu8DoorClosed 00B4  
               ?_EUSART_Transmit_ISR 0070                        _gu8DoorOpened 00B5  
               __size_of_EUSART_Read 0071                    _SYSTEM_Initialize 0B56  
            __end_of__initialization 0065               ?i1_Com_Lock_MPU_RD_Reg 0070  
           i1_Com_Lock_IIC_Read_Data 0EEA                           ___ftadd@f1 002A  
                         ___ftadd@f2 002D                           ___ftge@ff1 00C1  
                         ___ftge@ff2 00C4                   ?_SYSTEM_Initialize 0070  
                   _Mpu6500GyroAngle 0247                           ___ftdiv@f1 003A  
                         ___ftdiv@f2 0037                           ___ftdiv@f3 0042  
                       ?_Get6500Data 00C9                           ___ftneg@f1 0020  
                 ADC_Get_Vol@voldata 00D2                           ___awtoft@c 0078  
                         ___ftmul@f1 0078                           ___ftmul@f2 007B  
                         ___fttol@f1 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 0003                         __pidataBANK1 0002  
               __end_of_Init_MPU6500 1000                  ??_SYSTEM_Initialize 00DE  
                        ?_ReadRstPIN 0070                            ?_TMR0_ISR 0070  
       __size_ofi1_Com_Lock_IIC_Stop 0010                          _Read_Offset 0689  
             __end_of_PMD_Initialize 0A97        Com_Lock_MPU_Write_Command@reg 00C7  
                          ?i1___ftge 0070                   _Com_Lock_IIC_Start 0B1C  
                __size_of_AngleCalcu 005F                  __size_of_ClearAngle 000A  
          __size_of_Interrupt_Enable 0003      i1Com_Lock_IIC_Write_Data@retVal 0072  
            __end_of_CheckDoorClosed 0F6B             ??_Com_Lock_IIC_Read_Data 00C1  
                ?_Com_Lock_IIC_Start 0070  __size_of_Com_Lock_MPU_Write_Command 0016  
                   ?_TMR0_StartTimer 0070            __end_of_SYSTEM_Initialize 0B6E  
              ??_EUSART_Transmit_ISR 0070              __end_of_CheckDoorOpened 0D8F  
                         __pbssBANK0 0057                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                 __end_of_EUSART_Write 0CFD  
        __size_of_EUSART_Receive_ISR 0024                    ??_ReadTouchKeyPIN 00C1  
          ??_Com_Lock_IIC_Write_Data 00C1                           __pmaintext 015F  
               ??_Com_Lock_IIC_Start 00C1           __size_of_Com_Lock_IIC_Stop 0010  
                            ?___ftge 00C1              __size_of_TMR0_StopTimer 0003  
                            ?___wmul 00C1                           ??_TMR0_ISR 0056  
                         __pintentry 0004                            ?___awtoft 0078  
                          ?___ftpack 0070                           ??i1___ftge 0076  
                    ?_PMD_Initialize 0070              __size_of_ADC_Initialize 000E  
                      _eusartRxCount 00B9                        ??_ADC_Get_Vol 00CF  
                  _gu8OperationState 0069                              _SP1BRGH 011C  
                            _SP1BRGL 011B                              _OSCCON1 088D  
                            _OSCCON3 088F                              _OSCSTAT 0890  
                            _OSCTUNE 0892                  __size_of_ReadRstPIN 0007  
                            _Angle_t 005F                      _eusartFrameDone 00B7  
                            _Sam_cnt 0068                              ___aldiv 0596  
                    __size_of___ftge 003C                              ___ftadd 0069  
                            ___ftdiv 03D8                              ___ftneg 0A97  
                    __size_of___wmul 001C                              ___ftmul 0325  
                            ___fttol 0510                              ___lwdiv 0DC4  
          Com_Lock_IIC_Read_Data@ack 00C2                  Mpu6500GyroAngle@dir 004D  
                         ??___awtoft 007B                           ??___ftpack 0075  
         Mpu6500GyroAngle@gyro_angle 004E                              __ptext1 0B2D  
                            __ptext2 0E70                              __ptext3 0D2B  
                            __ptext4 0B87                              __ptext5 0DC4  
                            __ptext6 0B6E                              __ptext7 0A75  
                            __ptext8 0A7D                              __ptext9 0B56  
                    __CFG_WRTAPP$OFF 0000                _OSCILLATOR_Initialize 0AAA  
       __size_of_Com_Lock_MPU_RD_Reg 002E                         __size_of_abs 000E  
            __size_ofi1_EUSART_Write 0026                     ___aldiv@dividend 00C5  
           ??_PIN_MANAGER_Initialize 00C1                      __CFG_WRTSAF$OFF 0000  
                          _IOCBFbits 1F4A                            _IOCCFbits 1F55  
             __size_ofi1_Get6500Data 0021                            _IOCBNbits 1F49  
                          _IOCCNbits 1F54                     ?_CheckDoorClosed 0070  
    __size_of_Com_Lock_IIC_Read_Data 004C           __size_of_SYSTEM_Initialize 0018  
                            clrloop0 0A83             __size_of_Clear_FrameDone 0004  
                   ?_CheckDoorOpened 0070                  __end_of_ADC_Get_Vol 0D5A  
               end_of_initialization 0065                         ??_AngleCalcu 007E  
                       ??_ClearAngle 00C1                __size_of_Init_MPU6500 004B  
                  _EUSART_Initialize 0BC0                   ?_EUSART_Initialize 0070  
               __size_of_Get6500Data 0022                     ___aldiv@quotient 00CC  
                 _eusartTempRxBuffer 0120                __CFG_WDTCPS$WDTCPS_13 0000  
                          _UART_Task 0B2D                  ??_EUSART_Initialize 00C1  
                          _TMR0_Task 0481                            _PORTBbits 000D  
                          _PORTCbits 000E             __end_of_Mpu6500GyroAngle 0325  
                   _Interrupt_Enable 0A72                   __end_of_AngleCalcu 07B0  
                 __end_of_ClearAngle 0AAA                 __CFG_WDTCCS$LFINTOSC 0000  
         ??i1_Com_Lock_IIC_Read_Data 0070         Com_Lock_IIC_Read_Data@retVal 00C3  
              __size_of_EUSART_Write 002B              ??i1_Com_Lock_MPU_RD_Reg 0075  
                       _Init_MPU6500 0FB5                     __CFG_FEXTOSC$OFF 0000  
                i1_Com_Lock_IIC_Stop 0AEB          i1Com_Lock_IIC_Read_Data@ack 0071  
                     ADC_Get_Vol@vol 00D4            __end_of_EUSART_Initialize 0BDE  
                        ___ftdiv@exp 0045                        i1_Get6500Data 0C1D  
                        ___ftmul@exp 0024                       _TMR0_StopTimer 0A75  
             _Com_Lock_IIC_Read_Data 07B0                         ??_ReadRstPIN 00C1  
               ?i1_Com_Lock_IIC_Stop 0070                       __end_of___ftge 0E70  
                       ?_Read_Offset 0070                       __end_of___wmul 0BA3  
                         ?_UART_Task 0070                         _EUSART_Write 0CD2  
                  __size_of_TMR0_ISR 001F                           ?_TMR0_Task 0070  
                     _ADC_Initialize 0ADD        __size_ofi1_Com_Lock_IIC_Start 0011  
             ?_OSCILLATOR_Initialize 0070          __size_of_EUSART_Write_Frame 003C  
                        _ADC_Get_Vol 0D2B                    __size_ofi1___ftge 003B  
                start_initialization 0045             __size_of_TMR0_Initialize 000D  
    __size_of_PIN_MANAGER_Initialize 0035                          __end_of_abs 0ACF  
                    _ReadTouchKeyPIN 0ACF                        ??_EUSART_Read 00C1  
           i1Get6500Data@REG_Address 007C                   __end_of_ReadRstPIN 0A8F  
                  ??_Clear_FrameDone 00C1               __end_of_TMR0_StopTimer 0A78  
                     ?i1_Get6500Data 0078                     __CFG_LPBOREN$OFF 0000  
                   ??_PMD_Initialize 00C1                             ??___ftge 00C7  
              ??i1_Com_Lock_IIC_Stop 0070                             ??___wmul 00C5  
             __end_of_ADC_Initialize 0AEB                          __pdataBANK0 006F  
                        __pdataBANK1 00DF            EUSART_Receive_ISR@dumread 0071  
                     i1_EUSART_Write 0C84                    __size_of___awtoft 0020  
                  __size_of___ftpack 0064          __end_of_EUSART_Transmit_ISR 0BC0  
            EUSART_Write_Frame@u8cnt 00D7                            ___latbits 0001  
                      __pcstackBANK0 0020                        __pcstackBANK1 00C1  
            Com_Lock_MPU_RD_Reg@addr 00C7                    i1_TMR0_StartTimer 0A78  
         __end_of_EUSART_Receive_ISR 0C84              Com_Lock_MPU_RD_Reg@temp 00C8  
         __size_of_EUSART_Initialize 001E                   ?i1_TMR0_StartTimer 0070  
                __end_of_EUSART_Read 0689                _TMR0_InterruptHandler 0062  
                Read_Offset@G_Temp_X 00D7                            __pnvBANK0 006E  
                _Com_Lock_MPU_RD_Reg 0CFD             __size_of_TMR0_StartTimer 0005  
                    ?_TMR0_StopTimer 0070                     ___lwdiv@dividend 00C9  
             _PIN_MANAGER_Initialize 0D8F         ??_Com_Lock_MPU_Write_Command 00C7  
                ??i1_TMR0_StartTimer 0070            i1Com_Lock_MPU_RD_Reg@addr 0076  
        __size_of_Com_Lock_IIC_Start 0011                             ?___aldiv 00C1  
          i1Com_Lock_MPU_RD_Reg@temp 0077                             ?___ftadd 002A  
                           ?___ftdiv 0037                             ?___ftneg 0020  
                           ?___ftmul 0078                             ?___fttol 0070  
                           ?___lwdiv 00C7                      ?_ADC_Initialize 0070  
                       _eusartRxHead 006B                         _eusartTxHead 006D  
                       _eusartRxTail 00BA                     __CFG_PPS1WAY$OFF 0000  
                       _eusartTxTail 006C                          ??_UART_Task 00D8  
             __end_ofi1_EUSART_Write 0CAA         ??_INTERRUPT_InterruptManager 007E  
                        ??_TMR0_Task 0051              __end_of_ReadTouchKeyPIN 0ADD  
            _eusartTxBufferRemaining 006E                             _BAUD1CON 011F  
               ?_Com_Lock_MPU_RD_Reg 0070                     __CFG_WDTE$SWDTEN 0000  
          __end_ofi1_TMR0_StartTimer 0A7D                     ___lwdiv@quotient 00CC  
            Com_Lock_IIC_Read_Data@i 00C4                 i1EUSART_Write@txData 0071  
                     _eusartRxBuffer 0134                      ___aldiv@divisor 00C1  
                  ??_TMR0_Initialize 00C1                       _eusartTxBuffer 00A0  
                    ___aldiv@counter 00CA                       ___wmul@product 00C5  
           ?_Com_Lock_IIC_Write_Data 0070                      ??i1_Get6500Data 0020  
                          clear_ram0 0A82                             _PIE0bits 0716  
                           _PIE3bits 0719             __end_of_Interrupt_Enable 0A75  
          i1Com_Lock_IIC_Read_Data@i 0073  __size_of_INTERRUPT_InterruptManager 003F  
                           _PIR0bits 070C                             _PIR3bits 070F  
                  __CFG_BBSIZE$BB512 0000                    _eusartTempRxCount 00B8  
                           _TMR0_ISR 0BDE                       _gu16OpenTimCnt 00AB  
                    ?i1_EUSART_Write 0070                             i1___ftge 0DF9  
                         _ADCON0bits 009D                 __size_of_Read_Offset 0064  
                  ___wmul@multiplier 00C1                         _RX1DTPPSbits 1ECB  
              ??_Com_Lock_MPU_RD_Reg 00C6                    ?_Mpu6500GyroAngle 0047  
                 ??_Mpu6500GyroAngle 004A                          _EUSART_Read 0618  
     __size_ofi1_Com_Lock_MPU_RD_Reg 0028        __end_ofi1_Com_Lock_MPU_RD_Reg 0CD2  
                        AngleCalcu@p 003D                             _Old_gyro 00AF  
           __size_of_CheckDoorClosed 0041                             _New_gyro 0066  
            ?_Com_Lock_IIC_Read_Data 0070                        ??_Get6500Data 00CB  
           __size_of_CheckDoorOpened 0035                    _ADC_GetConversion 0B6E  
            ??_OSCILLATOR_Initialize 00C1                   ?_ADC_GetConversion 00C1  
                  ??_TMR0_StartTimer 00C1                     __size_of___aldiv 0082  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                   __size_of___ftneg 0009                     __size_of___ftmul 00B3  
                   __size_of___fttol 0086                     __size_of___lwdiv 0035  
                           ___awtoft 0BFD                             ___ftpack 06ED  
                   ?_ReadTouchKeyPIN 0070                  ??_ADC_GetConversion 00C3  
                       ?_ADC_Get_Vol 0070                           _T0CON0bits 059E  
                    ___lwdiv@divisor 00C7                      _Clear_FrameDone 07FC  
                    ___lwdiv@counter 00CE                             __ptext10 0AB4  
                           __ptext11 0A8F                             __ptext20 07B0  
                           __ptext12 0D8F           __size_ofi1_TMR0_StartTimer 0005  
                           __ptext21 0CD2                             __ptext13 0AAA  
                           __ptext30 0618                             __ptext22 0B40  
                           __ptext14 0A72                             __ptext31 07FC  
                           __ptext23 0F6B                             __ptext15 0FB5  
                           __ptext40 0510                             __ptext32 0AA0  
                           __ptext24 0AFB                             __ptext16 0689  
                           __ptext41 0247                             __ptext33 0D5A  
                           __ptext25 0B1C                             __ptext17 0596  
                           __ptext50 0A97                             __ptext42 0C1D  
                           __ptext34 0F2A                             __ptext26 0BC0  
                           __ptext18 0C3E                             __ptext51 03D8  
                           __ptext43 0CAA                             __ptext35 0E34  
                           __ptext27 0ADD                             __ptext19 0CFD  
                           __ptext52 0BFD                             __ptext44 0EAC  
                           __ptext28 0ACF                             __ptext53 0751  
                           __ptext45 0AEB                             __ptext37 0A78  
                           __ptext29 0A88                             __ptext54 0DF9  
                           __ptext46 0B0B                             __ptext38 0BDE  
                           __ptext55 0325                             __ptext47 0EEA  
                           __ptext39 0481                             __ptext56 0069  
                           __ptext48 0C84                             __ptext57 06ED  
                           __ptext49 0AC1                             __ptext58 0BA3  
                           __ptext59 0C60      __end_of_Com_Lock_IIC_Write_Data 0FB5  
       __end_ofi1_Com_Lock_IIC_Start 0B1C       __end_of_Com_Lock_IIC_Read_Data 07FC  
                      __size_of_main 00E8            __end_of_ADC_GetConversion 0B87  
               __CFG_WDTCWS$WDTCWS_7 0000   __end_of_Com_Lock_MPU_Write_Command 0B56  
         _Com_Lock_MPU_Write_Command 0B40               Get6500Data@REG_Address 00D2  
  __size_ofi1_Com_Lock_IIC_Read_Data 0040   __size_ofi1_Com_Lock_IIC_Write_Data 003E  
          ?i1_Com_Lock_IIC_Read_Data 0070                           _RC1STAbits 011D  
         ?i1_Com_Lock_IIC_Write_Data 0070       i1Com_Lock_IIC_Read_Data@retVal 0072  
                   _eusartTempRxTail 006A                             int$flags 007E  
                __end_of_Get6500Data 0C60   __end_of_INTERRUPT_InterruptManager 0043  
         _INTERRUPT_InterruptManager 0004           __end_of_EUSART_Write_Frame 0EAC  
                         _INTCONbits 000B                        _gu16RstTimCnt 00B1  
              EUSART_Write_Frame@cmd 00D6                             intlevel1 0000  
                   ??_TMR0_StopTimer 00C1              ?_PIN_MANAGER_Initialize 0070  
                  __CFG_CLKOUTEN$OFF 0000          __end_ofi1_Com_Lock_IIC_Stop 0AFB  
                   ??_ADC_Initialize 00C1    __end_ofi1_Com_Lock_IIC_Write_Data 0EEA  
                 _EUSART_Receive_ISR 0C60                    ??_CheckDoorClosed 00CA  
                  ??_CheckDoorOpened 00CA              __end_of_Clear_FrameDone 0800  
                ?_EUSART_Receive_ISR 0070             Com_Lock_IIC_Write_Data@i 00C4  
                    _TMR0_Initialize 0AB4                          _result_gyro 00A8  
                       ___aldiv@sign 00CB                   EUSART_Write@txData 00C2  
       __size_of_EUSART_Transmit_ISR 001D       __end_of_PIN_MANAGER_Initialize 0DC4  
               ??_EUSART_Receive_ISR 0070                       Read_Offset@cnt 00DB  
         __size_of_ADC_GetConversion 0019           __end_of_Com_Lock_IIC_Start 0B2D  
                        _Get6500Data 0C3E                    ?_Interrupt_Enable 0070  
                         _G_Offset_X 00AD  
